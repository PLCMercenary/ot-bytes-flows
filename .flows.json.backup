[
    {
        "id": "f530b7f4ac193173",
        "type": "tab",
        "label": "brazos-edge",
        "disabled": false,
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadabytes.io\n  \\/_____/   \\/_/ | sean@scadabytes.io\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "3eb826abb193de97",
        "type": "tab",
        "label": "BE-Simulation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "493d2f30c5ead3e9",
        "type": "tab",
        "label": "Brazos-Edge-FD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f913ab9df6ea05a",
        "type": "tab",
        "label": "Brazos-Edge-Dash",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "36ab6944693000d2",
        "type": "tab",
        "label": "p1-p2 t1-t2 http api",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dac686414b360668",
        "type": "tab",
        "label": "Sparkplug B v1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e3742b89.114eb8",
        "type": "tab",
        "label": "user control",
        "disabled": true,
        "info": ""
    },
    {
        "id": "322f47aac7111cf3",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1b40ef83a0652010",
        "type": "subflow",
        "name": "Oauth2 Refresh",
        "info": "",
        "category": "Google API",
        "in": [
            {
                "x": 240,
                "y": 80,
                "wires": [
                    {
                        "id": "ae3bb5af57217834"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 80,
                "wires": [
                    {
                        "id": "89eff7bbb77b98c4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Client_id",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Secret",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            }
        ],
        "meta": {},
        "color": "#C0DEED",
        "icon": "font-awesome/fa-lock"
    },
    {
        "id": "c516bb43d26b1e4d",
        "type": "subflow",
        "name": "Google Oauth2",
        "info": "",
        "category": "Google API",
        "in": [
            {
                "x": 480,
                "y": 320,
                "wires": [
                    {
                        "id": "0e032ab54e41c7f9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 80,
                "wires": [
                    {
                        "id": "4bbcc28955c3b685",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 320,
                "wires": [
                    {
                        "id": "0e032ab54e41c7f9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Client_id",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Secret",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Scope",
                "type": "str",
                "value": "calendar.events",
                "ui": {
                    "icon": "font-awesome/fa-angle-double-right",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Redirect",
                "type": "str",
                "value": "http://127.0.0.1:1880/Google/oauth2",
                "ui": {
                    "icon": "font-awesome/fa-globe",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Dashboard",
                "type": "str",
                "value": "http://127.0.0.1:1880/ui",
                "ui": {
                    "icon": "font-awesome/fa-globe",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "google_oauth2",
            "version": "1.0.0",
            "author": "farmer.eds.shed@gmail.com",
            "desc": "Authentication Node for Google API",
            "keywords": "google api, google oauth2",
            "license": "GPL-3.0"
        },
        "color": "#C0DEED",
        "icon": "font-awesome/fa-lock"
    },
    {
        "id": "6fa9b5ff.4dc4dc",
        "type": "subflow",
        "name": "R_TRIG",
        "info": "Detectabordadesubida.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "ed7124e5.9438f8"
                    },
                    {
                        "id": "862fae71.c4977"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 40,
                "wires": [
                    {
                        "id": "53fbb67b.1a5918",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "041c4fef5acdae7f",
        "type": "subflow",
        "name": "R_TRIG (2)",
        "info": "Detectabordadesubida.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "a8539e3bb9621a3b"
                    },
                    {
                        "id": "d8b17795938b7618"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 40,
                "wires": [
                    {
                        "id": "9b5a6f9012a3e7e1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "b4973237.46ab6",
        "type": "subflow",
        "name": "Process Simulation",
        "info": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "ec719d4d.0d54f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 260,
                "wires": [
                    {
                        "id": "ae1a6e5.d4c0d9",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "df521596.125698",
        "type": "subflow",
        "name": "Persistence Helper",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 45.5,
                "y": 85,
                "wires": [
                    {
                        "id": "37028a91.0b1ffe"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 749.5,
                "y": 53,
                "wires": [
                    {
                        "id": "230dfeb6.8ba792",
                        "port": 0
                    }
                ]
            },
            {
                "x": 755,
                "y": 169,
                "wires": [
                    {
                        "id": "856afee0.348098",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ffe905484c7d0790",
        "type": "subflow",
        "name": "Process Simulation (2)",
        "info": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "c908abb350bd7241"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 728.5,
                "y": 294,
                "wires": [
                    {
                        "id": "e035bfc2747dc8fe",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "3e979aa789561c0f",
        "type": "group",
        "z": "f530b7f4ac193173",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7e0434b2a4f7de17",
            "428cab07ce832223",
            "950276d5ad15ee24",
            "93bd5423d6db34ed"
        ],
        "x": 1394,
        "y": 579,
        "w": 232,
        "h": 122
    },
    {
        "id": "b26c443fca274222",
        "type": "group",
        "z": "f530b7f4ac193173",
        "name": "Control Valve testing",
        "style": {
            "label": true
        },
        "nodes": [
            "9352ec1231db8dd5",
            "bdd01b09885a00ae",
            "bacfc114638fb6e2",
            "2585c986ede6ff50",
            "a8b1d2276ebf0fdc",
            "d3bdb7ae027d96b5",
            "a78c5ea5a083b3e9",
            "bdf0f92b90ce20c9",
            "2e33874cbacac92f",
            "6324630f258d42af",
            "74a64391486beadc",
            "f8a587b02a1959f4",
            "677f394a9e75c161"
        ],
        "x": 134,
        "y": 959,
        "w": 472,
        "h": 402
    },
    {
        "id": "5019823267a294cf",
        "type": "eth-ip endpoint",
        "address": "10.10.10.15",
        "slot": "0",
        "cycletime": "500",
        "name": "",
        "vartable": {
            "": {
                "Hopper_PERM_int": {
                    "type": "INT"
                }
            }
        }
    },
    {
        "id": "ae6f683fb566469c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ot-bytes.com",
        "port": "8883",
        "tls": "4b78b960fba463b4",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4b78b960fba463b4",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "0b81330f081d079e",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "SCADABYTES.IO",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 55,
                "gx": 1,
                "gy": 6,
                "cx": 3,
                "cy": 3,
                "px": 1,
                "py": 0
            }
        }
    },
    {
        "id": "06eb262519ab1e8b",
        "type": "groov-io-device",
        "address": "localhost",
        "msgQueueFullBehavior": "DROP_OLD"
    },
    {
        "id": "3a9158adb601d14b",
        "type": "MySQLdatabase",
        "name": "dapt",
        "host": "10.2.5.103",
        "port": "3306",
        "db": "dapt",
        "tz": "",
        "charset": ""
    },
    {
        "id": "3d12573e4fa63ac8",
        "type": "groov-data-store",
        "project": "c2c222134da72b0e",
        "dsName": "view-red"
    },
    {
        "id": "c2c222134da72b0e",
        "type": "groov-project",
        "address": "localhost",
        "msgQueueFullBehavior": "DROP_OLD"
    },
    {
        "id": "5706d648a3e5e7bf",
        "type": "flexdash container",
        "name": "demo all grid",
        "title": "",
        "kind": "StdGrid",
        "fd_children": "",
        "tab": "e8d66b51b7d3600c",
        "min_cols": 4,
        "max_cols": "10",
        "parent": "",
        "solid": true,
        "cols": "2",
        "rows": "1"
    },
    {
        "id": "e8d66b51b7d3600c",
        "type": "flexdash tab",
        "name": "",
        "icon": "mdi-rocket",
        "title": "demo-all",
        "fd_children": ",5706d648a3e5e7bf",
        "fd": "40451b7f0294de46"
    },
    {
        "id": "478cb9823a626b8c",
        "type": "flexdash dashboard",
        "port": 80,
        "ioOpts": "{}",
        "path": "/flexdash",
        "redServer": true,
        "saveConfig": true,
        "allOrigins": false,
        "name": "FlexDash",
        "fd_children": ",8e29b2a7673a687b"
    },
    {
        "id": "8e29b2a7673a687b",
        "type": "flexdash tab",
        "name": " Big Brazos Balls",
        "icon": "mdi-fire",
        "title": "Brazos ",
        "fd_children": ",f5c40a17a891a657",
        "fd": "478cb9823a626b8c"
    },
    {
        "id": "f5c40a17a891a657",
        "type": "flexdash container",
        "name": "grid lock",
        "title": "Grid",
        "kind": "StdGrid",
        "fd_children": ",05e23e721857bba2,172dcff0e361032b,8683b3e527fd6e62,66ad283dd0e0aaa3",
        "tab": "8e29b2a7673a687b",
        "min_cols": 1,
        "max_cols": 12,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "66ad283dd0e0aaa3",
        "type": "flexdash container",
        "name": "PumpView",
        "title": "Pump 2",
        "kind": "Panel",
        "fd_children": ",cb4a58a854d28b7c,f21df0b6090b1ecb,ed81b2c984fe008c,1e9c1c3f62556dfb,7cd8ca49e1aff9f3,9a49b02bf96cafcf,a90d41cadcb31fa9,63097abca0a9c1a0,b6c0f44ff103965b",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "f5c40a17a891a657",
        "solid": false,
        "cols": 3,
        "rows": 6
    },
    {
        "id": "40451b7f0294de46",
        "type": "flexdash dashboard",
        "port": 80,
        "ioOpts": "{}",
        "path": "/rocket",
        "redServer": true,
        "saveConfig": true,
        "allOrigins": false,
        "name": "rocket",
        "fd_children": ",e8d66b51b7d3600c,1e908252f3517797"
    },
    {
        "id": "26ee4be0b705b085",
        "type": "flexdash container",
        "name": "solid-props",
        "title": "Tank 1 Alarm Control",
        "kind": "Panel",
        "fd_children": ",,217caed5e9cee597,0f7e034cdb57b753,a1a9a0ccbe7f5358",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "172dcff0e361032b",
        "solid": true,
        "cols": 6,
        "rows": 2
    },
    {
        "id": "378776577a63304a",
        "type": "flexdash container",
        "name": "two-props",
        "title": "Tank 2 Alarm Controls",
        "kind": "Panel",
        "fd_children": ",3d1daed2a6c539ca,41c82168eff9f224,e1bf9a9d5e68c697",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "172dcff0e361032b",
        "solid": true,
        "cols": 6,
        "rows": 2
    },
    {
        "id": "8683b3e527fd6e62",
        "type": "flexdash container",
        "name": "PumpView1",
        "title": "Pump 1",
        "kind": "Panel",
        "fd_children": ",f452a54dcc172f1e,1426d0bb3b43ca1d,bd6cd674cc9a05c6,ccc8eed15f2a9179,ce1496755502efd8,15090298114a7455,e94e96c90ba4927c,9948a20e60eaac14,d02343c5247cacbd",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "f5c40a17a891a657",
        "solid": false,
        "cols": 3,
        "rows": 6
    },
    {
        "id": "2b52487f866f284a",
        "type": "flexdash container",
        "name": "notshown",
        "title": "notshown grid",
        "kind": "StdGrid",
        "fd_children": "",
        "tab": "e7aa7c0167eef3af",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "e7aa7c0167eef3af",
        "type": "flexdash tab",
        "name": "not a tab",
        "icon": "mdi-view-dashboard",
        "title": "not a tab",
        "fd_children": ",2b52487f866f284a",
        "fd": ""
    },
    {
        "id": "a96ede31d15e8fcc",
        "type": "flexdash container",
        "name": "Repro",
        "title": "",
        "kind": "StdGrid",
        "fd_children": "",
        "tab": "1e908252f3517797",
        "min_cols": "6",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": "1",
        "rows": "1"
    },
    {
        "id": "1e908252f3517797",
        "type": "flexdash tab",
        "name": "Repros",
        "icon": "mdi-view-dashboard",
        "title": "Repro",
        "fd_children": ",a96ede31d15e8fcc",
        "fd": "40451b7f0294de46"
    },
    {
        "id": "172dcff0e361032b",
        "type": "flexdash container",
        "name": "tank plot panel",
        "title": "Tank Controls ",
        "kind": "Panel",
        "fd_children": ",26ee4be0b705b085,378776577a63304a,b52b75adc1d1ae63",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "f5c40a17a891a657",
        "solid": true,
        "cols": 6,
        "rows": 8
    },
    {
        "id": "d02343c5247cacbd",
        "type": "flexdash container",
        "name": "P1 Thermal ",
        "title": "P1 Thermal Status",
        "kind": "Panel",
        "fd_children": ",685d937a93327d76,9f86a61717bb6c31,2bb5f95fbe2972ec",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "8683b3e527fd6e62",
        "solid": true,
        "cols": 6,
        "rows": 2
    },
    {
        "id": "b6c0f44ff103965b",
        "type": "flexdash container",
        "name": "P2 Thermal",
        "title": "P2 Thermal Status",
        "kind": "Panel",
        "fd_children": ",3781d1e6a702107d,222e3ff24a1e6618,8bf0103d47f9063c",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "66ad283dd0e0aaa3",
        "solid": true,
        "cols": 6,
        "rows": 2
    },
    {
        "id": "05e23e721857bba2",
        "type": "flexdash container",
        "name": "rst panel",
        "kind": "Panel",
        "fd_children": ",8a58ead75eb38b6f,40d6a7c5836eba11,765c8ec72d128839",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "f5c40a17a891a657",
        "solid": false,
        "cols": 6,
        "rows": 1
    },
    {
        "id": "eadecf968f009e37",
        "type": "ui_tab",
        "name": "Brazos",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b451183ad23e7c4",
        "type": "ui_group",
        "name": "Chart",
        "tab": "eadecf968f009e37",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5dedb706.b6d6a8",
        "type": "ui_group",
        "z": "1f913ab9df6ea05a",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "ee3971e504d867b1",
        "type": "ui_group",
        "name": "Tank Controls",
        "tab": "eadecf968f009e37",
        "order": 3,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c27250b2120331ca",
        "type": "ui_group",
        "name": "Pump Controls",
        "tab": "eadecf968f009e37",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "48a8fbeb.e660d4",
        "type": "ui_group",
        "z": "36ab6944693000d2",
        "name": "Second",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "5"
    },
    {
        "id": "226cb3a1.d25c9c",
        "type": "ui_group",
        "z": "36ab6944693000d2",
        "name": "Click",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "5"
    },
    {
        "id": "3e9f3ca77700677b",
        "type": "ui_tab",
        "name": "Alarms",
        "icon": "fa-fire",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fa764ad7ba508d61",
        "type": "ui_group",
        "name": "Event Logs",
        "tab": "3e9f3ca77700677b",
        "order": 1,
        "disp": true,
        "width": 23,
        "collapse": false,
        "className": ""
    },
    {
        "id": "12b97cc8b6b6107b",
        "type": "ui_spacer",
        "z": "1f913ab9df6ea05a",
        "name": "spacer",
        "group": "7b451183ad23e7c4",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "7bc6a87b6c476fcb",
        "type": "ui_spacer",
        "z": "1f913ab9df6ea05a",
        "name": "spacer",
        "group": "7b451183ad23e7c4",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "21351c555048dc3a",
        "type": "auth0-server",
        "name": "bytes",
        "address": "https://dev-fd2jd1888p6kdqcp.us.auth0.com",
        "secret": "5tEHM5JUio2137l4sclMPUhQ2S12NnuX"
    },
    {
        "id": "2cd14f9f.247e8",
        "type": "auth0-server",
        "z": "36ab6944693000d2",
        "name": "Your Auth0 Account",
        "address": "dev-fd2jd1888p6kdqcp.us.auth0.com/oauth/token",
        "secret": "_sfZZ_WKmYbajwk9eEPHxiWlUYPt9HiBVKOUCZFbsd-2I1R3Fqpfhv6-qYUHQf_r"
    },
    {
        "id": "66386c9a34c0b6c3",
        "type": "ignition-server",
        "hostname": "ignition-maker",
        "port": "8088",
        "ssl": false,
        "tls": "4b78b960fba463b4",
        "defaultTagProvider": "default",
        "name": ""
    },
    {
        "id": "3a63e1223b28a993",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "mqtt://localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b26f54286b6796d4",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://10.10.10.110:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "b8f39990.157038",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://TREL16087112.vstage.co:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": false
    },
    {
        "id": "eaa395ff.8b6348",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "440c46c6.769ab8",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "58241fb2.5e084",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:53881/Anonymous",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "9cd7df76dded4d0a",
        "type": "OpcUa-Endpoint",
        "endpoint": "opcua://localhost:53888",
        "secpol": "None",
        "secmode": "None",
        "login": false,
        "usercert": true,
        "usercertificate": "cert.pem",
        "userprivatekey": "key.pem"
    },
    {
        "id": "ca9e0ada1995eb08",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:53881/Anonymous",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "efa15f3eee45752d",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:53881/Observer",
        "secpol": "Basic256",
        "secmode": "Sign",
        "none": false,
        "login": true,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "d678bc7ea3cfc31c",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://localhost:55380",
        "endpointMustExist": false,
        "keepSessionAlive": true,
        "loginEnabled": false,
        "name": "LOCAL SERVER",
        "showErrors": false,
        "securityPolicy": "None",
        "securityMode": "None",
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "c6bcdf23a4b63433",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://localhost:55388/",
        "endpointMustExist": false,
        "keepSessionAlive": true,
        "loginEnabled": false,
        "name": "opc srv",
        "showErrors": false,
        "securityPolicy": "None",
        "securityMode": "None",
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "77fdc29e.3c49ec",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://localhost:55380",
        "endpointMustExist": false,
        "keepSessionAlive": true,
        "loginEnabled": false,
        "name": "LOCAL FLEX 80",
        "showErrors": true,
        "securityPolicy": "None",
        "securityMode": "None",
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": ""
    },
    {
        "id": "91e570ff.c625b",
        "type": "ui_group",
        "name": "Registration",
        "tab": "479db76c.8cad78",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d30d6219.8ceef",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "training",
        "tz": "de",
        "charset": ""
    },
    {
        "id": "9e099cea.b3406",
        "type": "ui_group",
        "name": "Login",
        "tab": "afee5258.a3576",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cbdc940b.3c4378",
        "type": "ui_group",
        "name": "User database",
        "tab": "479db76c.8cad78",
        "order": 2,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "c2cb81de.e029",
        "type": "ui_group",
        "name": "Update password",
        "tab": "b9f5ab0d.cf64f8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "28d6b116.9db92e",
        "type": "ui_group",
        "name": "Control",
        "tab": "b9f5ab0d.cf64f8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "afe95a02.48f298",
        "type": "ui_group",
        "name": "Parameters",
        "tab": "b9f5ab0d.cf64f8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "fc48c562.accd48",
        "type": "ui_group",
        "name": "Display",
        "tab": "b9f5ab0d.cf64f8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "479db76c.8cad78",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "afee5258.a3576",
        "type": "ui_tab",
        "name": "Registration",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b9f5ab0d.cf64f8",
        "type": "ui_tab",
        "name": "Operator",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "882931c38fd799a3",
        "type": "users_config",
        "appPath": "/users",
        "jwtCookieName": "nr.nodeUsers.jwt",
        "jwtHttpsOnly": false
    },
    {
        "id": "cba93877ca03d070",
        "type": "MySQLdatabase",
        "name": "iot",
        "host": "iot-mariadb-1",
        "port": "3306",
        "db": "super",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "95d91e0447da9d8f",
        "type": "ui_group",
        "name": "PID",
        "tab": "f337c0b2af02c57a",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "f337c0b2af02c57a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "1441bd92.da41e2",
        "type": "mqtt-broker",
        "z": "322f47aac7111cf3",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "verifyservercert": true,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": null,
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": null,
        "willPayload": ""
    },
    {
        "id": "e199b404.e60e58",
        "type": "ui_group",
        "z": "322f47aac7111cf3",
        "name": "PID Controller For CPU Temperature of Raspberry Pi",
        "tab": "669cc6a9.2a11d8",
        "order": 1,
        "disp": true,
        "width": "9"
    },
    {
        "id": "669cc6a9.2a11d8",
        "type": "ui_tab",
        "z": "322f47aac7111cf3",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "ae3bb5af57217834",
        "type": "function",
        "z": "1b40ef83a0652010",
        "name": "Refresh Token",
        "func": "var Google_refresh = global.get('Google_refresh');\n\nmsg.payload ={\n            \"grant_type\": \"refresh_token\",\n            \"client_id\": env.get(\"Client_id\"),\n            \"client_secret\": env.get(\"Secret\"),\n            \"refresh_token\": Google_refresh\n        }\n\nmsg.headers = {};\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "be36287ea0b3eb53"
            ]
        ]
    },
    {
        "id": "be36287ea0b3eb53",
        "type": "http request",
        "z": "1b40ef83a0652010",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://oauth2.googleapis.com/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 80,
        "wires": [
            [
                "89eff7bbb77b98c4"
            ]
        ]
    },
    {
        "id": "89eff7bbb77b98c4",
        "type": "function",
        "z": "1b40ef83a0652010",
        "name": "Save OAuth Tokens",
        "func": "if (msg.payload.access_token) {\n    global.set('Google_token', msg.payload.access_token);\n    //global.set('Google_refresh', msg.payload.refresh_token);\n    Time = new Date()\n    msg.payload = \"Google Access Granted \" + Time;\n    \n} else {\n    msg.payload = \"Google Authorization error.\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cc666f64bb91c238",
        "type": "http in",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "url": "/Google/oauth2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "08ecd8469fb9fe7c"
            ]
        ]
    },
    {
        "id": "9127efc1faccdd28",
        "type": "http response",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "a446508ea873a530",
        "type": "template",
        "z": "c516bb43d26b1e4d",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <style>\n.button {\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.button2 {background-color: #008CBA;} /* Blue */\n</style>\n    </head>\n    <body>\n        <h1>Google Calendar Access Granted, click Continue</h1>\n       <a href=\"{{payload}}\" target=\"_parent\"><button class=\"button button2\">Continue</button></a>\n    </body>\n</html>",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "9127efc1faccdd28"
            ]
        ]
    },
    {
        "id": "4bbcc28955c3b685",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Save OAuth Tokens",
        "func": "if (msg.payload.access_token) {\n    global.set('Google_token', msg.payload.access_token);\n    global.set('Google_refresh', msg.payload.refresh_token);\n   let Time = new Date()\n    msg.result = \"Google Access Granted \" + Time;\n    \n} else {\n    msg.result = \"Google Authorization error.\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9318f97001dde25b",
        "type": "http request",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://oauth2.googleapis.com/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "4bbcc28955c3b685",
                "9a11e2cee582a63b"
            ]
        ]
    },
    {
        "id": "08ecd8469fb9fe7c",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Google Oauth2",
        "func": "msg.payload ={\n            \"grant_type\": \"authorization_code\",\n            \"client_id\": env.get(\"Client_id\"),\n            \"client_secret\": env.get(\"Secret\"),\n            \"code\": msg.payload.code,\n            \"redirect_uri\": env.get(\"Redirect\")\n        }\n\nmsg.headers = {};\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "9318f97001dde25b"
            ]
        ]
    },
    {
        "id": "9a11e2cee582a63b",
        "type": "switch",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "property": "payload.access_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "35a8d42d08ace432"
            ],
            [
                "cb4f3c3b1f8295b1"
            ]
        ]
    },
    {
        "id": "2efeedef766408a3",
        "type": "template",
        "z": "c516bb43d26b1e4d",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <style>\n.button {\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.button2 {background-color: #008CBA;} /* Blue */\n</style>\n    </head>\n    <body>\n        <h1>Google Authorization error</h1>\n        <a href=\"{{payload}}\" target=\"_parent\"><button class=\"button button2\">Return</button></a>\n    </body>\n</html>",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "9127efc1faccdd28"
            ]
        ]
    },
    {
        "id": "0e032ab54e41c7f9",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Generate  URL",
        "func": "msg.payload = \"https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A//www.googleapis.com/auth/\" + env.get(\"Scope\") + \"&access_type=offline&prompt=consent&include_granted_scopes=true&response_type=code&redirect_uri=\" + env.get(\"Redirect\") +\"&client_id=\" + env.get(\"Client_id\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "cb4f3c3b1f8295b1",
        "type": "change",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "2efeedef766408a3"
            ]
        ]
    },
    {
        "id": "35a8d42d08ace432",
        "type": "change",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "a446508ea873a530"
            ]
        ]
    },
    {
        "id": "a286a306.02b04",
        "type": "rbe",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 590,
        "y": 40,
        "wires": [
            [
                "53fbb67b.1a5918"
            ]
        ]
    },
    {
        "id": "cc4a0845.97a0d8",
        "type": "change",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "rules": [
            {
                "tot": "bool",
                "to": "false",
                "pt": "msg",
                "p": "payload",
                "t": "set"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "a286a306.02b04"
            ]
        ]
    },
    {
        "id": "53fbb67b.1a5918",
        "type": "switch",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ed7124e5.9438f8",
        "type": "switch",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 40,
        "wires": [
            [
                "a286a306.02b04"
            ]
        ]
    },
    {
        "id": "862fae71.c4977",
        "type": "switch",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "cc4a0845.97a0d8"
            ]
        ]
    },
    {
        "id": "c0171be022a026ff",
        "type": "rbe",
        "z": "041c4fef5acdae7f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 590,
        "y": 40,
        "wires": [
            [
                "9b5a6f9012a3e7e1"
            ]
        ]
    },
    {
        "id": "2123c4e31ea74df9",
        "type": "change",
        "z": "041c4fef5acdae7f",
        "name": "",
        "rules": [
            {
                "tot": "bool",
                "to": "false",
                "pt": "msg",
                "p": "payload",
                "t": "set"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "c0171be022a026ff"
            ]
        ]
    },
    {
        "id": "9b5a6f9012a3e7e1",
        "type": "switch",
        "z": "041c4fef5acdae7f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a8539e3bb9621a3b",
        "type": "switch",
        "z": "041c4fef5acdae7f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 40,
        "wires": [
            [
                "c0171be022a026ff"
            ]
        ]
    },
    {
        "id": "d8b17795938b7618",
        "type": "switch",
        "z": "041c4fef5acdae7f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "2123c4e31ea74df9"
            ]
        ]
    },
    {
        "id": "7fe4b5c3.32e58c",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 180,
        "wires": [
            [
                "ae1a6e5.d4c0d9"
            ]
        ]
    },
    {
        "id": "1bacd004.9753c",
        "type": "inject",
        "z": "b4973237.46ab6",
        "name": "Inject -0.2 at start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "ec719d4d.0d54f8"
            ]
        ]
    },
    {
        "id": "999a52c2.f465f",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "7fe4b5c3.32e58c"
            ]
        ]
    },
    {
        "id": "ec719d4d.0d54f8",
        "type": "delay",
        "z": "b4973237.46ab6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "ede39236.1961f8"
            ]
        ]
    },
    {
        "id": "a823c9cf.2a6178",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "999a52c2.f465f"
            ]
        ]
    },
    {
        "id": "ae1a6e5.d4c0d9",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ede39236.1961f8",
        "type": "range",
        "z": "b4973237.46ab6",
        "minin": "0",
        "maxin": "13",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "a823c9cf.2a6178"
            ]
        ]
    },
    {
        "id": "230dfeb6.8ba792",
        "type": "change",
        "z": "df521596.125698",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "restore",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 589.5,
        "y": 53,
        "wires": [
            []
        ]
    },
    {
        "id": "37028a91.0b1ffe",
        "type": "json",
        "z": "df521596.125698",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 175.5,
        "y": 85,
        "wires": [
            [
                "230dfeb6.8ba792"
            ]
        ]
    },
    {
        "id": "b78fb72d.ec3d78",
        "type": "catch",
        "z": "df521596.125698",
        "name": "",
        "scope": [
            "37028a91.0b1ffe"
        ],
        "uncaught": false,
        "x": 183.5,
        "y": 117,
        "wires": [
            [
                "c7f43b1c.b7b5d8"
            ]
        ]
    },
    {
        "id": "c7f43b1c.b7b5d8",
        "type": "change",
        "z": "df521596.125698",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 354.5,
        "y": 116,
        "wires": [
            [
                "230dfeb6.8ba792"
            ]
        ]
    },
    {
        "id": "856afee0.348098",
        "type": "inject",
        "z": "df521596.125698",
        "name": "Trigger restore",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 618.5,
        "y": 169,
        "wires": [
            []
        ]
    },
    {
        "id": "55e076905df1b0e3",
        "type": "function",
        "z": "ffe905484c7d0790",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626.5,
        "y": 207,
        "wires": [
            [
                "e035bfc2747dc8fe"
            ]
        ]
    },
    {
        "id": "c2d4b39177bc1ed4",
        "type": "inject",
        "z": "ffe905484c7d0790",
        "name": "Inject -0.2 at start",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "c908abb350bd7241"
            ]
        ]
    },
    {
        "id": "750731ef8f8373b0",
        "type": "function",
        "z": "ffe905484c7d0790",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 451,
        "y": 207,
        "wires": [
            [
                "55e076905df1b0e3"
            ]
        ]
    },
    {
        "id": "c908abb350bd7241",
        "type": "delay",
        "z": "ffe905484c7d0790",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "9e1061bc8d5572bd"
            ]
        ]
    },
    {
        "id": "5c66e7c6327c413c",
        "type": "function",
        "z": "ffe905484c7d0790",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 208,
        "wires": [
            [
                "750731ef8f8373b0"
            ]
        ]
    },
    {
        "id": "e035bfc2747dc8fe",
        "type": "function",
        "z": "ffe905484c7d0790",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 293,
        "wires": [
            []
        ]
    },
    {
        "id": "9e1061bc8d5572bd",
        "type": "range",
        "z": "ffe905484c7d0790",
        "minin": "0",
        "maxin": "1",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "5c66e7c6327c413c"
            ]
        ]
    },
    {
        "id": "090858351a9c26a2",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "391ecadd59f0afca"
            ]
        ]
    },
    {
        "id": "391ecadd59f0afca",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "clear cache & set tag variables",
        "func": "\nglobal.set('inlet',{ \n    'valve': undefined,\n    \"inletmeter\": { \n        'curflowrate': undefined}\n        })\nglobal.set('simRun', undefined)\nglobal.set('SITE', undefined)\n\nglobal.set('tank1', {\n    'Level': undefined,\n    'LvlAlms': [undefined, undefined, undefined, undefined],\n    'LvlAlmSP': [undefined, undefined, undefined, undefined]\n})\nglobal.set('tank2', {\n    'Level': undefined,\n    'LvlAlms': [undefined, undefined, undefined, undefined],\n    'LvlAlmSP': [undefined, undefined, undefined, undefined]\n})\nglobal.set('pump1', {\n    'HOA': undefined,\n    // 'chgPump': {\n    //     'runCmd': undefined,\n    //     'runInd': undefined,\n    //     'suctPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'discPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'fault': undefined,\n    //     'ftsTime': undefined,\n    //     'oilTemp': [undefined, undefined, undefined, undefined, undefined]},\n    // 'runCmd': undefined,\n    'runInd': undefined,\n    'speed': undefined,\n    'fault': undefined,\n    // 'ftsTime': undefined,\n    'suctPSI': { 'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined }, //value, hi almSP, hiSDsp, hiAlm, hiSD\n    'discPSI': { 'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined }, //value, hi alm, hiSDsp\n    'opSP': [undefined, undefined],\n    'inTemp': { 'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined },\n    'outTemp': { 'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined },\n    'oilTemp': { 'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined }, //temp val, hi alm, hi SD \n    'meter': {\n        'currRate': undefined\n    }\n})\n\n\nglobal.set('pump2', {\n    'HOA': undefined,\n    // 'chgPump': {\n    //     'runCmd': undefined,\n    //     'runInd': undefined,\n    //     'suctPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'discPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'fault': undefined,\n    //     'ftsTime': undefined,\n    //     'oilTemp': [undefined, undefined, undefined, undefined, undefined]},\n    // 'runCmd': undefined,\n    'runInd': undefined,\n    'speed': undefined,\n    'fault': undefined,\n   // 'ftsTime': undefined,\n    'suctPSI': {'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined}, //value, hi almSP, hiSDsp, hiAlm, hiSD\n    'discPSI': {'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined}, //value, hi alm, hiSDsp\n    'opSP': [undefined, undefined],\n    'inTemp':  {'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined},\n    'outTemp': {'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined},\n    'oilTemp': {'val': undefined, 'HiAlmSP': undefined, 'HiAlm': undefined, 'hiSDsp': undefined, 'hiSD': undefined}, //temp val, hi alm, hi SD \n    'meter': {\n        'currRate': undefined }\n})\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "7343f7e46f66d220"
            ]
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadabytes.io\n  \\/_____/   \\/_/ | sean@scadabytes.io\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "7343f7e46f66d220",
        "type": "debug",
        "z": "f530b7f4ac193173",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "1dadfb77ed020af5",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "42820f455eaa13e4"
            ]
        ]
    },
    {
        "id": "42820f455eaa13e4",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "Sim Stop",
        "func": "flow.set('stopTime' , msg.timestamp)\nglobal.set('simRun', false)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "7343f7e46f66d220"
            ]
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadabytes.io\n  \\/_____/   \\/_/ | sean@scadabytes.io\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "46d807b35d01cf52",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "abe5a5d3ef1ecac5"
        ],
        "x": 315,
        "y": 480,
        "wires": [
            [
                "87d1dcf6aa304771"
            ]
        ]
    },
    {
        "id": "c01f19b43bf0194b",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "abe5a5d3ef1ecac5"
        ],
        "x": 315,
        "y": 440,
        "wires": [
            [
                "7a16a0ca57ce853b"
            ]
        ]
    },
    {
        "id": "abe5a5d3ef1ecac5",
        "type": "link out",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "920be485913908dd",
            "c01f19b43bf0194b",
            "60a2d345307eb01b",
            "e25d5f39bbead1da",
            "46d807b35d01cf52",
            "83b65bba4892300b",
            "ed09e90cf855e3aa",
            "1f3aeeeefcd89774",
            "ff3b68b9902ef6ae",
            "f5dda0339946430d",
            "34b58ff82c1c730e",
            "1d2c2411c144cae1",
            "44cc04bb8c9180d9",
            "c3d0400d0699f8b7",
            "e2a7690780295f17",
            "29f4648a00640bb0",
            "c675199368cc539a",
            "cf542af01762daf2",
            "58e9d6960025c3bd",
            "5e2a70c24bb48e60",
            "e71b4d877a8ee63c",
            "275d50b6b2364c36",
            "a9e12191cf98e3c2",
            "b7f045436bfc0c97",
            "a080e2d332e5327e",
            "10ee521feceef687"
        ],
        "x": 285,
        "y": 280,
        "wires": []
    },
    {
        "id": "be5f930af524cae7",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "name": "30 sec",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "abe5a5d3ef1ecac5"
            ]
        ]
    },
    {
        "id": "83b65bba4892300b",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "abe5a5d3ef1ecac5"
        ],
        "x": 315,
        "y": 520,
        "wires": [
            [
                "bf89a1992827ac95"
            ]
        ]
    },
    {
        "id": "ed09e90cf855e3aa",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "abe5a5d3ef1ecac5"
        ],
        "x": 315,
        "y": 600,
        "wires": [
            [
                "acf57c746370e859"
            ]
        ]
    },
    {
        "id": "cf791bec19a7b714",
        "type": "link out",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "f21a16ba9855c846",
            "552fdad58891ac7c"
        ],
        "x": 615,
        "y": 600,
        "wires": []
    },
    {
        "id": "cb4c7706c9993465",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "format topic and send MQTT",
        "func": "let sim = global.get(\"simRun\");\nif (sim){\nmsg.payload = global.get('pump1.speed')\nmsg.topic = \"scadaBytes/tanksite/\"+global.get('SITE')+\"/main/pump1/vfd_speed\"\nnode.send(msg)\n\nmsg.payload = global.get('pump2.speed')\nmsg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/pump2/vfd_speed\"\nnode.send(msg)\n\nmsg.payload = global.get('pump1.suctPSI.val')\nmsg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/pump1/pump_suctPSI\"\nnode.send(msg)\n\nmsg.payload = global.get('pump1.discPSI.val')\nmsg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/pump1/pump_disPSI\"\nnode.send(msg)\n\nmsg.payload = global.get('pump2.suctPSI.val')\nmsg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/pump2/pump_suctPSI\"\nnode.send(msg)\n\nmsg.payload = global.get('pump2.discPSI.val')\nmsg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/pump2/pump_disPSI\"\nnode.send(msg)\n\nmsg.payload = global.get('pump1.meter.currRate')\nmsg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/meter_p1/p1flowrate\"\nnode.send(msg)\n\nmsg.payload = global.get('pump2.meter.currRate')\nmsg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/meter_p2/p2flowrate\"\nnode.send(msg)\n\n\nreturn ;}\n\nelse { \n    \n    return ;}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7e0434b2a4f7de17",
        "type": "function",
        "z": "f530b7f4ac193173",
        "d": true,
        "g": "3e979aa789561c0f",
        "name": "p1 meter",
        "func": "let f = global.get('pump1.meter')||{}\nlet r = f.currRate\nlet rcal = (r / 60)/60\nlet t = f.todayTot\nlet tcal = t + rcal\n\nglobal.set('pump1.meter.todayTot', tcal)\n\nif (msg.topic === \"ro\"){\n    var l = tcal + f.yestTot\n    global.set('pump1.meter.lifeTime', l)\n    global.set('pump1.meter.yestTot', tcal)\n    global.set('pump1.meter.todayTot', 0)\n}\n\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 620,
        "wires": [
            [
                "950276d5ad15ee24"
            ]
        ]
    },
    {
        "id": "428cab07ce832223",
        "type": "function",
        "z": "f530b7f4ac193173",
        "d": true,
        "g": "3e979aa789561c0f",
        "name": "p2 meter",
        "func": "let f = global.get('pump2.meter') || {}\nlet r = f.currRate\nlet rcal = (r / 60) / 60\nlet t = f.todayTot\nlet tcal = t + rcal\n\nglobal.set('pump2.meter.todayTot', tcal)\n\nif (msg.topic === \"ro\") {\n    var l = tcal + f.yestTot\n    global.set('pump2.meter.lifeTime', l)\n    global.set('pump2.meter.yestTot', tcal)\n    global.set('pump2.meter.todayTot', 0)\n}\n\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 660,
        "wires": [
            [
                "93bd5423d6db34ed"
            ]
        ]
    },
    {
        "id": "950276d5ad15ee24",
        "type": "link out",
        "z": "f530b7f4ac193173",
        "d": true,
        "g": "3e979aa789561c0f",
        "name": "",
        "mode": "link",
        "links": [],
        "x": 1585,
        "y": 620,
        "wires": []
    },
    {
        "id": "93bd5423d6db34ed",
        "type": "link out",
        "z": "f530b7f4ac193173",
        "d": true,
        "g": "3e979aa789561c0f",
        "name": "",
        "links": [
            "c33cdb17c33dd375",
            "199a09927c0c87e2"
        ],
        "x": 1585,
        "y": 660,
        "wires": []
    },
    {
        "id": "a20f6ed38cb82585",
        "type": "function",
        "z": "f530b7f4ac193173",
        "d": true,
        "name": "form MQTT",
        "func": "msg.topic = msg.topic + \"/\" + msg.parts.key\nif (msg.parts.key.indexOf(\"temp\")!==-1){\n    msg.units = \"degrees-C\"\n}\nelse if(msg.parts.key.indexOf(\"level\")!==-1){\n    msg.units = \"feet\"\n}\nelse if(msg.parts.key.indexOf(\"run\")!==-1){\n    msg.units = \"bool\"\n}else if(msg.parts.key.indexOf(\"Run\")!==-1){\n    msg.units = \"bool\"\n}\nelse if(msg.parts.key.indexOf(\"SP\")!==-1){\n    msg.units = \"feet\"\n}\nelse if(msg.parts.key.indexOf(\"act\")!==-1){\n    msg.units = \"bool\"\n}\nelse if(msg.parts.key.indexOf(\"inalm\")!==-1){\n    msg.units = \"bool\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 780,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.com\n  \\/_____/   \\/_/ | scadaBytes industrial data  \n                  | Montreal, QB\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "b7f045436bfc0c97",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "abe5a5d3ef1ecac5"
        ],
        "x": 315,
        "y": 400,
        "wires": [
            [
                "e4589e5358004ca0"
            ]
        ]
    },
    {
        "id": "775ddb90f6a92b14",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "2893aee692429024"
            ]
        ]
    },
    {
        "id": "ff3b68b9902ef6ae",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "abe5a5d3ef1ecac5"
        ],
        "x": 315,
        "y": 640,
        "wires": [
            [
                "cb4c7706c9993465"
            ]
        ]
    },
    {
        "id": "2893aee692429024",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "set some defaults & sim tags",
        "func": "flow.set('startTime', msg.timestamp)\nglobal.set('simTags', {\n 'high': 0.00009,\n 'low': 0.00001,\n 'inTempMaxMin': [55, 25],\n 'outTempMaxMin': [75, 30],\n 'oilTempMaxMin': [130, 40],\n 'cpOilTempMaxMin': [100, 60],\n 'plPSIMaxMin': [220, 80],\n 'cpMaxMinSuct': [90, 8],\n 'hpMaxMinSuct': [180, 15],\n 'hpMaxMinDisc': [450, 110] \n})\n\n\nlet st= global.get(\"simTags\")\nglobal.set('inlet',{ \n    'valve': true,\n    'plPSI': st.plPSIMaxMin[1] + 2,\n    \"inletmeter\": { \n        'curflowrate': 12,\n        'todayTotal': 0,\n        'yesterdayTotal': 0, \n        'lifetimeTotal': 0}\n        })\nglobal.set('simRun', true)\nglobal.set('SITE', \"East-Brazos\")\n\nglobal.set('tank1', {\n    'Level': 8,\n    'maxLv': 30,\n    'lvlCmd': true\n    })\nglobal.set('tank2', {\n    'Level': 3.1,\n    'maxLv': 24,\n    'lvlCmd': true\n    })\nlet t1 = global.get('tank1') ||{}\nlet t2 = global.get('tank2') || {}\n\nglobal.set('tank1.LvlAlmSP', [t1.maxLv -2, t1.maxLv -6, 5, 2.5])\nglobal.set('tank2.LvlAlmSP', [t2.maxLv - 2, t2.maxLv - 6, 7, 2.5])\nglobal.set('tank1.LvlAlms', [false, false, false, false])\nglobal.set('tank2.LvlAlms', [false, false, false, false])\nst = global.get('simTags') ||{}\n\nglobal.set('pump1', {\n    'name': 'pump1',\n    'alias': 'p1',\n    'HOA': 3,\n    // 'chgPump': {\n    //     'runCmd': undefined,\n    //     'runInd': undefined,\n    //     'suctPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'discPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'fault': undefined,\n    //     'ftsTime': undefined,\n    //     'oilTemp': [undefined, undefined, undefined, undefined, undefined]},\n    // 'runCmd': undefined,\n    'runInd': false,\n    'speed': 0,\n    'fault': false,\n    // 'ftsTime': undefined,\n    'runPerm':{\n        'psiPerm': true, \n        'tempPerm': true},   \n    'opSP': {'start':t1.maxLv - 5, 'stop': 4},\n    'suctPSI': { 'val': st.hpMaxMinSuct[1] + 8, 'HiAlmSP': st.hpMaxMinSuct[0] - 10, 'HiAlm': false, 'hiSDsp': st.hpMaxMinSuct[0] - 2, 'hiSD': false }, //value, hi almSP, hiSDsp, hiAlm, hiSD\n    'discPSI': { 'val': st.hpMaxMinDisc[1] + 5, 'HiAlmSP': st.hpMaxMinDisc[0] - 20, 'HiAlm': false, 'hiSDsp': st.hpMaxMinDisc[0] - 3, 'hiSD': false }, //value, hi alm, hiSDsp\n    'inTemp': { 'val': st.inTempMaxMin[1] + 10,   'HiAlmSP': st.inTempMaxMin[0] - 10, 'HiAlm': false, 'hiSDsp': st.inTempMaxMin[0] - 2, 'hiSD': false },\n    'outTemp': { 'val': st.outTempMaxMin[1] + 10, 'HiAlmSP': st.outTempMaxMin[0] - 10, 'HiAlm': false, 'hiSDsp': st.outTempMaxMin[0] - 2, 'hiSD': false  },\n    'oilTemp': { 'val': st.oilTempMaxMin[1] + 10, 'HiAlmSP': st.oilTempMaxMin[0] - 10, 'HiAlm': false, 'hiSDsp': st.oilTempMaxMin[0] - 2, 'hiSD': false  }, //temp val, hi alm, hi SD \n    \"controlValve\": {\n        \"position\": 50,\n        \"pressureRating\": 200,\n        \"pid\": {\n            \"setpoint\": 100,\n            \"kp\": 1,\n            \"ki\": 0.5,\n            \"kd\": 0\n        }\n    },\n    'meter': {\n        'currRate':12\n    }\n})\n\n\nglobal.set('pump2', {\n    'name': 'pump2',\n    'alias': 'p2',\n    'HOA': 3,\n    // 'chgPump': {\n    //     'runCmd': undefined,\n    //     'runInd': undefined,\n    //     'suctPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'discPSI': [undefined, undefined, undefined, undefined, undefined],\n    //     'fault': undefined,\n    //     'ftsTime': undefined,\n    //     'oilTemp': [undefined, undefined, undefined, undefined, undefined]},\n    // 'runCmd': undefined,\n    'runInd': false,\n    'speed': 0,\n    'fault': false,\n    'runPerm': { 'psiPerm': true, 'tempPerm': true },\n    'opSP': { 'start': t2.maxLv - 4, 'stop': 3 },\n    // 'ftsTime': undefined,\n    'suctPSI': { 'val': st.hpMaxMinSuct[1] + 7, 'HiAlmSP': st.hpMaxMinSuct[0] - 10, 'HiAlm': false, 'hiSDsp': st.hpMaxMinSuct[0] - 2, 'hiSD': false }, //value, hi almSP, hiSDsp, hiAlm, hiSD\n    'discPSI': { 'val': st.hpMaxMinDisc[1] + 3,  'HiAlmSP': st.hpMaxMinDisc[0] - 20, 'HiAlm': false, 'hiSDsp': st.hpMaxMinDisc[0] - 3,  'hiSD': false }, //value, hi alm, hiSDsp\n    'inTemp': { 'val': st.inTempMaxMin[1] + 10, 'HiAlmSP': st.inTempMaxMin[0] - 10, 'HiAlm': false, 'hiSDsp': st.inTempMaxMin[0] - 2, 'hiSD': false },\n    'outTemp': { 'val': st.outTempMaxMin[1] + 10, 'HiAlmSP': st.outTempMaxMin[0] - 10, 'HiAlm': false, 'hiSDsp': st.outTempMaxMin[0] - 2, 'hiSD': false },\n    'oilTemp': { 'val': st.oilTempMaxMin[1] + 10, 'HiAlmSP': st.oilTempMaxMin[0] - 10, 'HiAlm': false, 'hiSDsp': st.oilTempMaxMin[0] - 2, 'hiSD': false }, //temp val, hi alm, hi SD \n    \"controlValve\": {\n        \"position\": 50,\n        \"pressureRating\": 200,\n        \"pid\": {\n            \"setpoint\": 100,\n            \"kp\": 1,\n            \"ki\": 0.5,\n            \"kd\": 0\n        }\n    },\n    'meter': {\n        'currRate': 3\n    }\n})\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "7343f7e46f66d220"
            ]
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadabytes.io\n  \\/_____/   \\/_/ | sean@scadabytes.io\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "87d1dcf6aa304771",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "level alarms",
        "func": "\nfunction updateAlarms(tank, tankKey, reset) {\n    for (let i = 0; i < 4; i++) {\n        let alarmCondition = (i < 2) ? (tank.Level > tank.LvlAlmSP[i]) : (tank.Level < tank.LvlAlmSP[i]);\n\n        if (alarmCondition) {\n            tank.LvlAlms[i] = true;\n        } else if (tank.LvlAlms[i] && !alarmCondition && reset) {\n            tank.LvlAlms[i] = false;\n        }\n\n        global.set(`${tankKey}.LvlAlms[${i}]`, tank.LvlAlms[i]);\n    }\n    return tank.LvlAlms;\n}\n\nvar sim = global.get('simRun');\nlet reset = global.get('reset');\nlet tank1 = global.get('tank1') || {};\nlet tank2 = global.get('tank2') || {};\n\nif (sim) {\n    let tank1Alarms = updateAlarms(tank1, 'tank1', reset);\n    let tank2Alarms = updateAlarms(tank2, 'tank2', reset);\n\n//     let msg = {\n//         site: global.get('SITE'),\n//         metricType: \"tankalm\",\n//         payload: { 'tank1Alarms': tank1Alarms, 'tank2Alarms': tank2Alarms },\n//         topic: \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/tank-lvl-alarms\"\n//     };\n\nreturn msg;\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.com\n  \\/_____/   \\/_/ | scadaBytes industrial data  \n                  | Montreal, QB\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "7a16a0ca57ce853b",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "pump temp alarming",
        "func": "\nlet p1 = global.get('pump1') || {};\np1.id = p1.id || 1;\n\nlet p2 = global.get('pump2') || {};\np2.id = p2.id || 2;\n\nfunction processAlarms(pump, reset) {\n    for (const key of ['inTemp', 'outTemp', 'oilTemp']) {\n        const temp = pump[key];\n        const hiAlm = pump.runInd && temp.val > temp.HiAlmSP;\n        const hiSD = pump.runInd && temp.val > temp.hiSDsp;\n\n        if (hiAlm) {\n            temp.HiAlm = true;\n        } else if (temp.HiAlm && temp.val < temp.HiAlmSP && reset) {\n            temp.HiAlm = false;\n        } else if (!temp.HiAlm && !hiAlm) {\n            temp.HiAlm = false;\n        }\n\n        if (hiSD) {\n            temp.hiSD = true;\n        } else if (temp.hiSD && temp.val < temp.hiSDsp && reset) {\n            temp.hiSD = false;\n        } else if (!temp.hiSD && !hiSD) {\n            temp.hiSD = false;\n        }\n\n        global.set(`${pump.id}.${key}.HiAlm`, temp.HiAlm);\n        global.set(`${pump.id}.${key}.hiSD`, temp.hiSD);\n      \n    }\n}\n\nfunction updateTempPerm(pump, reset) {\n    const permKey = `p${pump.id}TempPerm`;\n    let perm = flow.get(permKey);\n\n    const hiSD = pump.inTemp.hiSD || pump.outTemp.hiSD || pump.oilTemp.hiSD;\n\n    if (hiSD) {\n        perm = false;\n    } else if (!perm && reset) {\n        perm = true;\n    }\n\n    flow.set(permKey, perm);\n}\n\n\nlet reset = global.get('reset');\nlet sim = global.get('simRun');\n\nif (sim) {\n    processAlarms(p1, reset);\n    processAlarms(p2, reset);\n\n    updateTempPerm(p1, reset);\n    updateTempPerm(p2, reset);\n}\n\n// if (sim){\n// msg.site = global.get('SITE')\n// msg.metricType = \"temperature\"\n// msg.payload = {'pump1_in-temp': p1.inTemp.val, 'pump1_out-temp': p1.outTemp.val, 'pump1_oil-temp': p1.oilTemp.val, 'pump2_in-temp': p2.inTemp.val, 'pump2_out-temp': p2.outTemp.val, 'pump2_oil-temp': p2.oilTemp.val}\n// msg.topic = \"scadaBytes/tanksite/\"+global.get('SITE')+\"/main/tank-pump/temperatures\"\n// }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.com\n  \\/_____/   \\/_/ | scadaBytes industrial data  \n                  | Montreal, QB\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "bf89a1992827ac95",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "pump PSI alm",
        "func": "\nconst sim = global.get('simRun')\nlet r = global.get('reset')\nlet p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\n\nfunction checkAlarms(pump, pumpId, type) {\n    if (sim && pump[type].val > pump[type].HiAlmSP && pump.runInd) {\n        pump[type].HiAlm = true\n    } else if (pump[type].HiAlm && pump[type].val < pump[type].HiAlmSP && r) {\n        pump[type].HiAlm = false\n    } else if (!pump[type].HiAlm && pump[type].val < pump[type].HiAlmSP) {\n        pump[type].HiAlm = false\n    }\n    global.set(pumpId + '.' + type + '.HiAlm', pump[type].HiAlm)\n\n    if (sim && pump[type].val > pump[type].hiSDsp && pump.runInd) {\n        pump[type].hiSD = true\n    } else if (pump[type].hiSD && pump[type].val < pump[type].hiSDsp && r) {\n        pump[type].hiSD = false\n    } else if (!pump[type].hiSD && pump[type].val < pump[type].hiSDsp) {\n        pump[type].hiSD = false\n    }\n    global.set(pumpId + '.' + type + '.hiSD', pump[type].hiSD)\n}\n\ncheckAlarms(p1, 'pump1', 'suctPSI')\ncheckAlarms(p1, 'pump1', 'discPSI')\ncheckAlarms(p2, 'pump2', 'suctPSI')\ncheckAlarms(p2, 'pump2', 'discPSI')\n\n\n\n\n// function PIDControl(pump, pumpId) {\n//     if (pump.runInd) {\n//         const error = pump.controlValve.pid.setpoint - pump.discPSI.val;\n//         let integralError = pump.controlValve.pid.integralError || 0;\n//         const derivativeError = error - (pump.controlValve.pid.lastError || 0);\n\n//         integralError += error;\n\n//         let output = pump.controlValve.pid.kp * error + pump.controlValve.pid.ki * integralError + pump.controlValve.pid.kd * derivativeError;\n\n//         // Save raw output for debugging\n//         const rawOutput = output;\n\n//         // Invert output for correct direction\n//         output = 100 - output;\n\n//         // Apply physical constraints to output\n//         output = Math.max(0, Math.min(100, output));\n//         if (pump.runInd && output < 8) output = 8;\n\n//         pump.controlValve.position = output;\n\n//         pump.controlValve.pid.integralError = integralError;\n//         pump.controlValve.pid.lastError = error;\n\n//         // Debugging\n//         console.log(`PID raw output for ${pumpId}: ${rawOutput}`);\n//     } else {\n//         pump.controlValve.position = 0;  // fully close the valve when pump is not running\n//         pump.controlValve.pid.integralError = 0;  // reset integral error\n//     }\n\n//     global.set(pumpId + '.controlValve.position', pump.controlValve.position);\n// }\n\n\n\n\n// PIDControl(p1, 'pump1');\n// PIDControl(p2, 'pump2');\n\nreturn;\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 520,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.com\n  \\/_____/   \\/_/ | scadaBytes industrial data  \n                  | Montreal, QB\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "acf57c746370e859",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "inlet valve",
        "func": "let t1 =  global.get('tank1') || {}\nlet t2 =  global.get('tank2') || {}\nlet p1 =  global.get('pump1') || {}\nlet p2 =  global.get('pump2') || {}\nlet sim = global.get('simRun')\n\nif (sim){\nif (t1.LvlAlms[0] || t2.LvlAlms[0]){\n    global.set('inlet.valve', 'closed')\n}else{\n    global.set('inlet.valve', 'open')\n}\n}\n\nif (sim) {\n    let i = global.get('inlet.valve')\n    msg.payload = {'Pipeline-Inlet': i}\n    msg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/pipeline-inlet\"\n    return msg;\n}\n\n\n\n\n\n\n\n\n// flow.set\n// var pSS = flow.get('pumpLvlSP')||{}\n// let pr = {\"pr1\": flow.get('pump1_Run'), \"pr2\":flow.get('pump2_Run')};\n// let lvs = {'lvl1':flow.get('tank1lvl'), 'lvl2':flow.get('tank2lvl')}\n// //let mana = flow.get('manmode-a')\n// ////let manb = flow.get('manmode-b')\n// //let autoa = flow.get('autoMode-a')\n// //let autob = flow.get('autoMode-b')\n// let pf = flow.get('pumpFreq')||{}\n\n// //Defiine a func to generate a random output\n\n// let high = 0.0009, low = 0.0001\n// function random(low, high) {\n//     return Math.random() * (high - low) + low\n// }\n// //Call our function and set var step to that val\n// let step = Math.random()\n// flow.set(\"step\", step)\n\n// let sim = flow.get('simRun')\n\n\n// if (pr.pr1 === true && lvs.lvl1 > pSS.pump1_stopSP) {\n//     if (pf.p1freq === 0){\n//         flow.set('pumpFreq', {'p1freq': 60});\n//         pf.p1freq = 60\n//         msg.payload= ('pumpFreq', {'p1freq': pf.p1freq})\n//         msg.topic = \"scadaBytes/tanksite/\"+flow.get('SITE')+\"set context\"\n//         return msg;     \n//     } \n    \n// }\n\n\n// if (pr.pr1=== true && lvs.lvl1 > pSS.pump1_stop) {\n//     if (pf.p1freq > 40){\n//        pf.p1freq = (pf.p1freq - flow.get('step'))\n//     } \n    \n// }\n\n// if (pr.pmp1Run == true && lvs.lvl1 > pSS.pump1_stop) {\n//     if (pf.p1freq < 40 && pf.p1freq!=0 ){\n//        pf.p1freq= 40\n//     } \n    \n// }\n\n// if (pr.pmp1Run !== true || lvs.lvl1 < pSS.pump1_stop) {\n//        pf.p1freq = 0\n        \n//     } \n    \n\n\n\n// //\n// //if (pr.pump2_Run == true && lvs.lvl2 > pSS.pump2_stopSP) {\n// //    if (p2F === 0){\n// //        flow.set('p2Freq', 60)\n// //        p2F = 60\n// //        msg.payload= ('pumpSpeed', {'p1Freq': p1F}, {'p2Freq': p2F})\n// //        msg.topic = \"scadaBytes/tanksite/\"+flow.get('SITE')+\"/main/tankLevel-pumpSpeed\"\n// //        return msg;     \n// //    } \n// //    \n// //}\n// //\n// //\n// //if (pr.pmp2Run == true && lvs.lvl2 > pSS.pump2_stop) {\n// //    if (p2F > 40){\n// //        p2F = p2F - flow.get('step')\n// //    } \n// //    \n// //}\n// //\n// //if (pr.pmp2Run == true && lvs.lvl2 > pSS.pump2_stop) {\n// //    if (p2F < 40 && p2F!=0 ){\n// //        p2F = 40\n// //    } \n// //    \n// //}\n// //\n// //if (pr.pmp2Run !== true || lvs.lvl2 < pSS.pump2_stop) {\n// //        p2F = 0\n// //        \n// //    } \n// //    \n// //\n// //\n// //\n// //\n// //\n// //\n// //\n// ////if (sim === true && pr.pmp1Run === false){\n// ////    lvs.lvl1 = parseFloat(lvs.lvl1.toFixed(1)) + parseFloat(step.toFixed(1)) \n// ////}  //tanklevel 1 = level 1 + step\n// ////if (sim === true && pr.pmp1Run === true){\n// ////    lvs.lvl1 = parseFloat(lvs.lvl1.toFixed(1)) -parseFloat(step.toFixed(1)) \n// ////}\n// ////if (auto === true && pr.pmp1Run === true){\n// ////    a = pSS.pump1_SP - lvs.lvl1\n// ////    \n// ////}\n// //\n// ////if ((sim === true && lvs.lvl1 <= pSS.pump1_stopSP)||(auto!=true)){\n// ////    pr.pmp1Run = false\n// ////    flow.set(\"pump1_Run\", false)\n// ////}\n// ////if (sim === true && auto === true && lvs.lvl1 >= pSS.pump1_startSP){\n// ////    pr.pmp1Run = true\n// ////    flow.set(\"pump1_Run\", true)\n// ////}\n// //\n// //\n// //\n// //\n// ////step = Math.random()\n// //\n// ////if (sim === true && pr.pmp2Run === false){\n// ////    lvs.lvl2 = parseFloat(lvs.lvl2.toFixed(2)) +  parseFloat(step.toFixed(2)) \n// ////}\n// ////if (sim === true && pr.pmp2Run === true){\n// ////    lvs.lvl2 = parseFloat(lvs.lvl2.toFixed(2))-  parseFloat(step.toFixed(2))\n// ////}\n// //\n// //\n// ////if ((sim === true && lvs.lvl2 <= pSS.pump2_stopSP) || (auto!=true)){\n// ////    pr.pmp2Run = false\n// ////    flow.set(\"pump2_Run\", false)\n// ////}\n// ////if (sim === true && lvs.lvl2 >= pSS.pump2_startSP){\n// ////    pr.pmp2Run = true\n// ////    flow.set(\"pump2_Run\", true)\n// ////}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 600,
        "wires": [
            [
                "cf791bec19a7b714"
            ]
        ]
    },
    {
        "id": "e4589e5358004ca0",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "Level Cmd Pump",
        "func": "\nlet t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\nlet p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\nlet sim = global.get('simRun')\n\n\nif (sim) {\n    \n    if (t1.Level <= p1.opSP.stop) {\n        t1.lvlCmd = false}\n    if (t1.Level >= p1.opSP.start) {\n        t1.lvlCmd = true} \n    if (t2.Level <= p2.opSP.stop) {\n        t2.lvlCmd = false}\n    if (t2.Level >= p2.opSP.start) {\n        t2.lvlCmd = true} \n\n   \n    \n    global.set('tank1.lvlCmd', t1.lvlCmd)\n    global.set('tank2.lvlCmd', t2.lvlCmd)\n    \n\n\n//if (sim) {\n   // msg.payload = { 'tank1_level': t1.Level, 'tank2_level': t2.Level, 'pump1_Run': p1.runInd, 'pump2_Run': p2.runInd}\n   // msg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/tankLevel-control\"\n   //return msg;\n//}\nreturn ;\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.io\n  \\/_____/   \\/_/ | sean@scadaBytes.io\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "24baeef2807eb76a",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "Level Control",
        "func": "\nconst t1 = global.get('tank1') || {},\n      t2 = global.get('tank2') || {},\n      p1 = global.get('pump1') || {},\n      p2 = global.get('pump2') || {},\n      sim = global.get('simRun')\n\nif (sim) {\n  const pPerm1 = Object.entries(p1.runPerm).every(Boolean),\n        pPerm2 = Object.entries(p2.runPerm).every(Boolean),\n        lPerm1 = !t1.LvlAlms[3],\n        lPerm2 = !t2.LvlAlms[3]\n\n  if (pPerm1 && lPerm1 && t1.lvlCmd) {\n     p1.runInd = true \n     }else{\n     p1.runInd = false\n     }\n  global.set('pump1.runInd', p1.runInd)\n    \n  if (pPerm2 && lPerm2 && t2.lvlCmd) {\n    p2.runInd = true\n    } else {\n    p2.runInd = false\n    }\n  global.set('pump2.runInd', p2.runInd)\n\n\n\n// if (sim) {\n//    msg.payload = { 'tank1_level': t1.Level, 'tank2_level': t2.Level, 'pump1_Run': p1.runInd, 'pump2_Run': p2.runInd}\n//    msg.topic = \"scadaBytes/tanksite/\" + global.get('SITE') + \"/main/tankLevel-control\"\n//    return msg;\n// }\nreturn \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 360,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.io\n  \\/_____/   \\/_/ | sean@scadaBytes.io\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "a080e2d332e5327e",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "abe5a5d3ef1ecac5"
        ],
        "x": 315,
        "y": 360,
        "wires": [
            [
                "24baeef2807eb76a"
            ]
        ]
    },
    {
        "id": "ce17751b26b0f520",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "reset false",
        "func": "global.set('reset', false)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "552fdad58891ac7c",
        "type": "link in",
        "z": "f530b7f4ac193173",
        "name": "",
        "links": [
            "cf791bec19a7b714"
        ],
        "x": 795,
        "y": 560,
        "wires": [
            [
                "ce17751b26b0f520"
            ]
        ]
    },
    {
        "id": "d4cd9c5488264110",
        "type": "comment",
        "z": "f530b7f4ac193173",
        "name": "TODO",
        "info": "# NodeRed simulator generator tester back pocket helper app.\n\n#TODO: document features.\n\n## eventually this will have helpful information \n- for now its just a TODO list for myself\n\n\n---\n\n\n###TODO \n#### **Priority** \n - Label ALL Function Nodes in all flows. \n - if fuction has default label - know why its not labeled \n\n### alarming\n -  finish alarming and verify produce logs\n -  validate alarm indications\n -  investigate dashboard notifications\n -  change log to date management vs array length\n -  email report upon req\n -  suct and disch psi alarms and cause / effect\n -  events and alarms stored in sql. \n\n\n### Controls\n - Need to latch and add effect of Temp monitorting\n - need to add temp setpoint adjustment (not even shown in /ui)\n - Need HOA multistate buttons to sync\n - Need to have HOA buttons logic programming for cause and effect\n - /ui setpoint tables kick user out, maybe need rbe?\n\n\n\n\n### Comms\n\n\n### Simulation",
        "x": 1270,
        "y": 60,
        "wires": []
    },
    {
        "id": "2f703dcf92a8e4e9",
        "type": "function",
        "z": "f530b7f4ac193173",
        "d": true,
        "name": "function 37",
        "func": "let p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\nlet t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\n\nmsg.payload = {\"pump1\":{p1}}\nmsg.topic = \"scadaBytes/tanksite/test/pump1\"\nnode.send(msg)\n\nmsg.payload = { \"pump2\": { p2 } }\nmsg.topic = \"scadaBytes/tanksite/test/pump2\"\nnode.send(msg)\n\nmsg.payload = { \"tank1\": { t1 } }\nmsg.topic = \"scadaBytes/tanksite/test/tank1\"\nnode.send(msg)\n\nmsg.payload = { \"tank2\": { t2 } }\nmsg.topic = \"scadaBytes/tanksite/test/tank2\"\nnode.send(msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "9352ec1231db8dd5",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 48",
        "func": "global.set(\"pump1.controlValve.pid.setpoint\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "bdd01b09885a00ae",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 49",
        "func": "global.set(\"pump2.controlValve.pid.setpoint\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "bacfc114638fb6e2",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "266",
        "payloadType": "num",
        "x": 310,
        "y": 1000,
        "wires": [
            [
                "9352ec1231db8dd5"
            ]
        ]
    },
    {
        "id": "2585c986ede6ff50",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "390",
        "payloadType": "num",
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "bdd01b09885a00ae"
            ]
        ]
    },
    {
        "id": "a8b1d2276ebf0fdc",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 50",
        "func": "global.set(\"pump1.controlValve.pid.kp\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "d3bdb7ae027d96b5",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 330,
        "y": 1100,
        "wires": [
            [
                "a8b1d2276ebf0fdc",
                "a78c5ea5a083b3e9"
            ]
        ]
    },
    {
        "id": "a78c5ea5a083b3e9",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 51",
        "func": "global.set(\"pump2.controlValve.pid.kp\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "bdf0f92b90ce20c9",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 53",
        "func": "global.set(\"pump2.controlValve.pid.ki\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "2e33874cbacac92f",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.03",
        "payloadType": "num",
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "6324630f258d42af",
                "bdf0f92b90ce20c9"
            ]
        ]
    },
    {
        "id": "6324630f258d42af",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 54",
        "func": "global.set(\"pump1.controlValve.pid.ki\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "2bef93d8a04e6d9f",
        "type": "function",
        "z": "f530b7f4ac193173",
        "name": "pump PSI control",
        "func": "function control(pumpId) {\n    let pump = global.get(pumpId) || {};\n\n    if (!pump.runInd) {\n        pump.controlValve.position = 0;\n        //console.log(pumpId + \" is stopped. Control valve position: \" + pump.controlValve.position);\n        global.set(pumpId, pump);\n        return;\n    }\n\n    let error = pump.controlValve.pid.setpoint - pump.discPSI.val;\n    pump.controlValve.pid.integralError += error;\n    let derivativeError = error - pump.controlValve.pid.lastError;\n    pump.controlValve.pid.lastError = error;\n\n    let cv = -(pump.controlValve.pid.kp * error +\n        pump.controlValve.pid.ki * pump.controlValve.pid.integralError +\n        pump.controlValve.pid.kd * derivativeError\n        );\n\n    //console.log(pumpId + \" dischargePSI: \" + pump.discPSI.val);\n    //console.log(\"PID calculations (error, integral error, derivative error): \", error, pump.controlValve.pid.integralError, derivativeError);\n    //console.log(\"Calculated control valve position (before clamping): \" + cv);\n\n    pump.controlValve.position = Math.min(Math.max(cv, 0), 100);\n\n    //console.log(\"Control valve position (after clamping): \" + pump.controlValve.position);\n\n    global.set(pumpId, pump);\n}\n\ncontrol('pump1');\ncontrol('pump2');\n\n\n// // Function to apply PID control to a pump\n// function applyPIDControl(pumpId) {\n//     // Fetch pump data from the global context\n//     let pump = global.get(pumpId) || {};\n\n//     // If the pump is not running, close the control valve and return\n//     // If the pump is not running, close the control valve, reset the integral term, and return\n//     if (!pump.runInd) {\n//         pump.controlValve.position = 0;\n//         pump.controlValve.pid.integralError = 0; // Reset the integral term\n//         global.set(pumpId, pump);\n//         return;\n//     }\n\n//     // PID constants from the pump's info model\n//     const Kp = pump.controlValve.pid.kp;\n//     const Ki = pump.controlValve.pid.ki;\n//     const Kd = pump.controlValve.pid.kd;\n\n//     // Setpoint and process value\n//     const setpoint = pump.controlValve.pid.setpoint;\n//     const pv = pump.discPSI.val;\n\n//     // Initialize state variables if they don't exist\n//     const integralError = pump.controlValve.pid.integralError || 0;\n//     const lastError = pump.controlValve.pid.lastError || 0;\n\n//     // Calculate error\n//     const error = setpoint - pv;\n\n//     // Calculate integral\n//     const integral = integralError + error;\n\n//     // Calculate derivative\n//     const derivative = error - lastError;\n\n//     // Calculate control variable (valve position)\n//     let cv = Kp * error + Ki * integral + Kd * derivative;\n\n//     // Reverse action of valve (0=closed, 100=open)\n//     cv = 100 - cv;\n\n//     // Limit control variable to 0-100\n//     cv = Math.min(Math.max(cv, 0), 100);\n\n//     // Store variables for next iteration\n//     pump.controlValve.pid.integralError = integral;\n//     pump.controlValve.pid.lastError = error;\n\n//     // Write the control variable directly to the global variable\n//     pump.controlValve.position = cv;\n\n//     // Update the global context\n//     global.set(pumpId, pump);\n// }\n\n// // Apply PID control to both pumps\n// applyPIDControl('pump1');\n// applyPIDControl('pump2');\n\n\nreturn ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 560,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.com\n  \\/_____/   \\/_/ | scadaBytes industrial data  \n                  | Montreal, QB\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "86dd49859b92f811",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.6",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "2bef93d8a04e6d9f"
            ]
        ]
    },
    {
        "id": "f8a587b02a1959f4",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 56",
        "func": "global.set(\"pump2.controlValve.pid.integralError\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "74a64391486beadc",
        "type": "inject",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 230,
        "y": 1280,
        "wires": [
            [
                "677f394a9e75c161",
                "f8a587b02a1959f4"
            ]
        ]
    },
    {
        "id": "677f394a9e75c161",
        "type": "function",
        "z": "f530b7f4ac193173",
        "g": "b26c443fca274222",
        "name": "function 57",
        "func": "global.set(\"pump1.controlValve.pid.integralError\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "c479e897a8cddfb9",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "Level sim",
        "func": "let t1 = global.get('tank1') || {};\nlet t2 = global.get('tank2') || {};\nlet p1 = global.get('pump1') || {};\nlet p2 = global.get('pump2') || {};\nlet st = global.get('simTags') || {};\nlet iv = global.get('inlet') || {};\nconst sim = global.get('simRun')\n\nconst low = st.low;\nconst high = st.high;\n\n\n\nfunction updateTankLevel(tank, pumpRunInd, valveStatus, updateInterval, fastMode, tankName) {\n    const initialLevel = tank.Level;\n    const maxInchesPerUpdate = fastMode ? 60 : 4;\n    const minInchesPerUpdate = fastMode ? 30 : 0;\n    const avgInchesPerUpdate = fastMode ? 45 : 2.2; // Adjust these values based on your desired average rise or fall\n\n    const inchesPerSecond = (Math.random() * (maxInchesPerUpdate - minInchesPerUpdate) + minInchesPerUpdate) / updateInterval;\n    const inchesChange = inchesPerSecond * updateInterval;\n    const feetChange = inchesChange / 12; // Convert inches to feet\n\n    if (sim && !pumpRunInd && valveStatus === 'open') {\n        tank.Level += feetChange;\n    }\n    if (sim && pumpRunInd) {\n        tank.Level -= feetChange;\n    }\n\n    tank.Level = Math.max(0, tank.Level);\n    tank.Level = Math.floor(tank.Level * 100) / 100; // Round down to 2 decimal places\n\n    \n}\n\nconst fastMode = msg.fastMode || false;\nconst updateInterval = fastMode ? (Math.random() * 60 + 120) : (Math.random() * 15 + 45); // Random interval between 45 to 60 seconds for normal mode, and between 120 to 180 seconds for fast mode\n\nupdateTankLevel(t1, p1.runInd, iv.valve, updateInterval, fastMode, 'Tank1');\nupdateTankLevel(t2, p2.runInd, iv.valve, updateInterval, fastMode, 'Tank2');\n\nif (sim) {\n    global.set('tank1', t1);\n    global.set('tank2', t2);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.io\n  \\/_____/   \\/_/ | sean@scadaBytes.io\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "3228cc79f5041434",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "Temp simulation",
        "func": "let p1 = global.get('pump1') || {};\nlet p2 = global.get('pump2') || {};\nlet st = global.get('simTags') || {};\nlet sim = global.get('simRun');\nlet anomaly = flow.get('anomaly') || false; // New anomaly variable\n\nfunction random(low, high) {\n    return Math.random() * (high - low) + low;\n}\n\nfunction updateTemperature(pump, property, runInd) {\n    let hiAlmSP = pump[property].HiAlmSP;\n    let hiShutSP = pump[property].hiSDsp;\n    let maxVal = hiAlmSP - 0.1;\n    let minVal = hiAlmSP - 3.6;\n    let stepSize = Math.random() * 0.5 + 0.1; // Random value between 0.1 and 0.6\n\n    if (sim && runInd) {\n        if (pump[property].val < maxVal) {\n            pump[property].val += stepSize; // Increase temperature by stepSize\n        }\n        if (anomaly && Math.random() < 0.01) {\n            let anomalyType = Math.random() < 0.5 ? 'alarm' : 'shutdown';\n            let newValue = anomalyType === 'alarm' ? hiAlmSP : hiShutSP;\n            pump[property].val = random(newValue + 0.1, newValue + 1);\n        }\n    } else if (sim && !runInd) {\n        let step = Math.random();\n        let minValOriginal = st[property + 'MaxMin'][1];\n        if (pump[property].val > minValOriginal) {\n            pump[property].val = Math.round((pump[property].val - step) * 100) / 100;\n        }\n    }\n    global.set(pump.id + '.' + property + '.val', pump[property].val);\n}\n\n\n// function updateTemperature(pump, property, runInd) {\n//     let hiAlmSP = pump[property].HiAlmSP;\n//     let hiShutSP = pump[property].hiSDsp; // Updated\n//     let maxVal = hiAlmSP - 0.1;\n//     let minVal = hiAlmSP - 3.6;\n\n//     if (sim && runInd) {\n//         if (pump[property].val < maxVal) {\n//             pump[property].val = random(minVal, maxVal);\n//         }\n//         // New: If anomaly is enabled, sometimes make the value exceed the alarm or shutdown setpoint\n//         if (anomaly && Math.random() < 0.01) { // 1% chance of an anomaly\n//             let anomalyType = Math.random() < 0.5 ? 'alarm' : 'shutdown';\n//             let newValue = anomalyType === 'alarm' ? hiAlmSP : hiShutSP;\n//             pump[property].val = random(newValue + 0.1, newValue + 1); // exceed the setpoint\n//         }\n//     } else if (sim && !runInd) {\n//         let step = Math.random();\n//         let minValOriginal = st[property + 'MaxMin'][1];\n//         if (pump[property].val > minValOriginal) {\n//             pump[property].val = Math.round((pump[property].val - step) * 100) / 100;\n//         }\n//     }\n//     global.set(pump.id + '.' + property + '.val', pump[property].val);\n// }\n\np1.id = 'pump1';\np2.id = 'pump2';\n\n// Decide how many anomalies to cause (0-2)\nlet anomalyCount = anomaly ? Math.floor(Math.random() * 3) : 0;\n\n// Cause anomalies in random properties\nfor (let i = 0; i < anomalyCount; i++) {\n    let pump = Math.random() < 0.5 ? p1 : p2;\n    let property = ['inTemp', 'outTemp', 'oilTemp'][Math.floor(Math.random() * 3)];\n    updateTemperature(pump, property, pump.runInd);\n}\n\nreturn;\n\n\n// let p1 = global.get('pump1') || {};\n// let p2 = global.get('pump2') || {};\n// let st = global.get('simTags') || {};\n// let sim = global.get('simRun');\n\n// function random(low, high) {\n//     return Math.random() * (high - low) + low;\n// }\n\n// function updateTemperature(pump, property, runInd) {\n//     let hiAlmSP = pump[property].HiAlmSP;\n//     let maxVal = hiAlmSP - 0.1;\n//     let minVal = hiAlmSP - 3.6;\n\n//     if (sim && runInd) {\n//         if (pump[property].val < maxVal) {\n//             pump[property].val = random(minVal, maxVal);\n//         }\n//     } else if (sim && !runInd) {\n//         let step = Math.random();\n//         let minValOriginal = st[property + 'MaxMin'][1];\n//         if (pump[property].val > minValOriginal) {\n//             pump[property].val = Math.round((pump[property].val - step) * 100) / 100;\n//         }\n//     }\n//     global.set(pump.id + '.' + property + '.val', pump[property].val);\n// }\n\n// p1.id = 'pump1';\n// p2.id = 'pump2';\n\n// updateTemperature(p1, 'inTemp', p1.runInd);\n// updateTemperature(p1, 'outTemp', p1.runInd);\n// updateTemperature(p1, 'oilTemp', p1.runInd);\n\n// updateTemperature(p2, 'inTemp', p2.runInd);\n// updateTemperature(p2, 'outTemp', p2.runInd);\n// updateTemperature(p2, 'oilTemp', p2.runInd);\n\n// return;\n\n\n\n\n\n// // let p1 = global.get('pump1') || {};\n// // let p2 = global.get('pump2') || {};\n// // let st = global.get('simTags') || {};\n// // let sim = global.get('simRun')\n\n// // function random(low, high) {\n// //     return Math.random() * (high - low) + low;\n// // }\n\n// // function updateTemperature(pump, property, runInd, maxMin) {\n// //     let step = Math.random();\n// //     if (sim && runInd && pump[property].val < maxMin[0]) {\n// //         pump[property].val = Math.round((pump[property].val + step) * 100) / 100;\n// //     }\n// //     if (sim && !runInd && pump[property].val > maxMin[1]) {\n// //         pump[property].val = Math.round((pump[property].val - step) * 100) / 100;\n// //     }\n// //     global.set(pump.id + '.' + property + '.val', pump[property].val);\n// // }\n\n// // p1.id = 'pump1';\n// // p2.id = 'pump2';\n\n// // updateTemperature(p1, 'inTemp', p1.runInd, st.inTempMaxMin);\n// // updateTemperature(p1, 'outTemp', p1.runInd, st.outTempMaxMin);\n// // updateTemperature(p1, 'oilTemp', p1.runInd, st.oilTempMaxMin);\n\n// // updateTemperature(p2, 'inTemp', p2.runInd, st.inTempMaxMin);\n// // updateTemperature(p2, 'outTemp', p2.runInd, st.outTempMaxMin);\n// // updateTemperature(p2, 'oilTemp', p2.runInd, st.oilTempMaxMin);\n\n// // return;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            []
        ],
        "info": "***********************************************\n ______   ______  | Copyright 2021\n/\\  ___\\ /\\__  _\\ | Rights Reserved \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | https://scadaBytes.com\n  \\/_____/   \\/_/ | scadaBytes industrial data  \n                  | Montreal, QB\n***********************************************\n\nFind me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin)\n"
    },
    {
        "id": "1249a8ef35cebda8",
        "type": "inject",
        "z": "3eb826abb193de97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "6",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "6242a77fe70b73cb"
            ]
        ]
    },
    {
        "id": "46ebad62de560535",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "scale flow to speed",
        "func": "// Function to scale pump speed to flow rate\nfunction scaleSpeedToFlowRate(speed, minIn, maxIn, minOut, maxOut) {\n    const scaledSpeed = Math.max(Math.min(speed, maxIn), minIn);\n    const scale = (maxOut - minOut) / (maxIn - minIn);\n    return Math.round(minOut + scale * (scaledSpeed - minIn));\n}\n\n// Update pump flow rate based on pump speed\nfunction updatePumpFlowRate(pumpId, speed) {\n    const flowRate = scaleSpeedToFlowRate(speed, 0, 62, 0, 512);\n    global.set(pumpId + '.meter.currRate', flowRate);\n    return flowRate;\n}\n\nlet p1 = global.get('pump1') || {};\nlet p2 = global.get('pump2') || {};\n\nlet p1FlowRate = p1.runInd ? updatePumpFlowRate('pump1', p1.speed) : 0;\nlet p2FlowRate = p2.runInd ? updatePumpFlowRate('pump2', p2.speed) : 0;\n\nmsg.payload = { p1FlowRate: p1FlowRate, p2FlowRate: p2FlowRate };\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "a4584bb75851f6b2",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 1",
        "links": [
            "6242a77fe70b73cb"
        ],
        "x": 245,
        "y": 280,
        "wires": [
            [
                "3ec2fb8b7af0b335"
            ]
        ]
    },
    {
        "id": "2b6985d5dc5f5883",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 5",
        "links": [
            "6242a77fe70b73cb"
        ],
        "x": 245,
        "y": 360,
        "wires": [
            [
                "46ebad62de560535"
            ]
        ]
    },
    {
        "id": "6242a77fe70b73cb",
        "type": "link out",
        "z": "3eb826abb193de97",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "2b6985d5dc5f5883",
            "3f1628ce08fed92c",
            "92b9e87521413c9a",
            "a4584bb75851f6b2",
            "fe97dc58596fd1dc",
            "6e234048a3fe814d",
            "9d39612f66507e23",
            "f2f140e4fbff9554",
            "b4b5312b3dd10365",
            "f380f9d05f44ac67",
            "375ef620d0b41d53",
            "65084cf19bc7f48f"
        ],
        "x": 275,
        "y": 120,
        "wires": []
    },
    {
        "id": "3920af8a21990d23",
        "type": "inject",
        "z": "3eb826abb193de97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "fastMode",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "40",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 195,
        "y": 200,
        "wires": [
            [
                "c479e897a8cddfb9"
            ]
        ],
        "l": false
    },
    {
        "id": "3ec2fb8b7af0b335",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "t.Level to p.Speed map",
        "func": "// Function to scale tank level to pump speed\nfunction scaleLevelToSpeed(tankLevel, minIn, maxIn, minOut, maxOut) {\n    const level = Math.max(Math.min(tankLevel, maxIn), minIn);\n    const scale = (maxOut - minOut) / (maxIn - minIn);\n    return Math.round(minOut + scale * (level - minIn));\n}\n\n// Update pump speed based on tank level\nfunction updatePumpSpeed(pumpId, tankLevel) {\n    const pump = global.get(pumpId) || {};\n    const speed = scaleLevelToSpeed(tankLevel, 0, 25, 38, 62);\n    global.set(pumpId + \".speed\", speed);\n    return speed;\n}\n\nlet t1 = global.get(\"tank1\") || {};\nlet t2 = global.get(\"tank2\") || {};\nlet p1 = global.get(\"pump1\") || {};\nlet p2 = global.get(\"pump2\") || {};\n\nif (p1.runInd) {\n    msg.payload = updatePumpSpeed(\"pump1\", t1.Level);\n    // msg.topic = \"scadaBytes/tanksite/\" + global.get(\"SITE\") + \"/main/pump1/vfd_speed\";\n   node.send(msg)\n} else {\n    global.set(\"pump1.speed\", 0);\n}\n\n\nif (p2.runInd) {\n    msg.payload = updatePumpSpeed(\"pump2\", t2.Level);\n    // msg.topic = \"scadaBytes/tanksite/\" + global.get(\"SITE\") + \"/main/pump2/vfd_speed\";\n    node.send(msg)\n} else {\n    global.set(\"pump2.speed\", 0);\n \n}\n\nreturn ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "dea591fa126002b4",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "map suct / discPSI - Hz range",
        "func": "// Function to scale pump speed to suction and discharge PSI\nfunction scaleSpeedToPSI(speed, minIn, maxIn, minOut, maxOut) {\n    const scaledSpeed = Math.max(Math.min(speed, maxIn), minIn);\n    const scale = (maxOut - minOut) / (maxIn - minIn);\n    return Math.round(minOut + scale * (scaledSpeed - minIn));\n}\n\n// Update pump suction and discharge PSI based on pump speed\nfunction updatePumpPSI(pumpId, speed) {\n    const suctPSI = scaleSpeedToPSI(speed, 38, 62, 75, 30);\n    const discPSI = scaleSpeedToPSI(speed, 38, 62, 85, 160);\n    global.set(pumpId + '.suctPSI.val', suctPSI);\n    global.set(pumpId + '.discPSI.val', discPSI);\n}\n\nlet p1 = global.get('pump1') || {};\nlet p2 = global.get('pump2') || {};\n\nif (p1.runInd) {\n    updatePumpPSI('pump1', p1.speed);\n} else {\n    global.set('pump1.suctPSI.val', 0);\n    global.set('pump1.discPSI.val', 0);\n}\n\nif (p2.runInd) {\n    updatePumpPSI('pump2', p2.speed);\n} else {\n    global.set('pump2.suctPSI.val', 0);\n    global.set('pump2.discPSI.val', 0);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "6e234048a3fe814d",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 34",
        "links": [
            "6242a77fe70b73cb"
        ],
        "x": 245,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "7e0b085b7201f21e",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "p1 flowmeter",
        "func": "const FLOW_RATE_AT_72HZ = 48320;\nconst MIN_FREQ = 54;\nconst MAX_FREQ = 72;\nconst MS_IN_A_DAY = 86400000;\n\nconst now = Date.now();\nconst lastUpdate = global.get('pump1.meter.lastUpdate') || now;\nconst elapsedTime = now - lastUpdate;\nglobal.set('pump1.meter.lastUpdate', now);\n\nconst p1 = global.get('pump1') || {};\n\nif (p1.runInd) {\n    const speed = p1.speed || 0;\n    const freq = (speed / (MAX_FREQ - MIN_FREQ)) * (MAX_FREQ - MIN_FREQ) + MIN_FREQ;\n    const flowRate = (speed / MAX_FREQ) * FLOW_RATE_AT_72HZ;\n    const flowForElapsedTime = flowRate * (elapsedTime / MS_IN_A_DAY);\n\n    const todayTotal = global.get('pump1.meter.todayTotal') || 0;\n    global.set('pump1.meter.todayTotal', todayTotal + flowForElapsedTime);\n    \n    const lifetimeTotal = global.get('pump1.meter.lifetimeTotal') || 208430;\n    global.set('pump1.meter.lifetimeTotal', lifetimeTotal + flowForElapsedTime);\n\n    msg.payload = {\n        instantFlowRate: flowRate,\n        todayTotal: global.get('pump1.meter.todayTotal'),\n        yesterdayTotal: global.get('pump1.meter.yesterdayTotal'),\n        lifetimeTotal: global.get('pump1.meter.lifetimeTotal')\n    };\n    node.send(msg)\n    global.set('pump1.meter.currRate', flowRate)\n} else {\n    msg.payload = {\n        instantFlowRate: 0,\n        todayTotal: global.get('pump1.meter.todayTotal'),\n        yesterdayTotal: global.get('pump1.meter.yesterdayTotal'),\n        lifetimeTotal: global.get('pump1.meter.lifetimeTotal')\n    };\nglobal.set('pump1.meter.currRate', 0)\nnode.send(msg)\n}\n\n\nif (msg.rollover) {\n    const todayTotal = global.get('pump1.meter.todayTotal') || 0;\n    global.set('pump1.meter.yesterdayTotal', todayTotal);\n    global.set('pump1.meter.todayTotal', 0);\n} \nreturn ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "9d39612f66507e23",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 35",
        "links": [
            "6242a77fe70b73cb",
            "127d884417b0670f"
        ],
        "x": 245,
        "y": 400,
        "wires": [
            [
                "7e0b085b7201f21e"
            ]
        ]
    },
    {
        "id": "dbf27704329ab4e9",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "p2 flowmeter",
        "func": "const FLOW_RATE_AT_70HZ = 44671;\nconst MIN_FREQ = 54;\nconst MAX_FREQ = 70;\nconst MS_IN_A_DAY = 86400000;\n\nconst now = Date.now();\nconst lastUpdate = global.get('pump2.meter.lastUpdate') || now;\nconst elapsedTime = now - lastUpdate;\nglobal.set('pump2.meter.lastUpdate', now);\n\nconst p2 = global.get('pump2') || {};\n\nif (p2.runInd) {\n    const speed = p2.speed || 0;\n    const freq = (speed / (MAX_FREQ - MIN_FREQ)) * (MAX_FREQ - MIN_FREQ) + MIN_FREQ;\n    const flowRate = (freq / MAX_FREQ) * FLOW_RATE_AT_70HZ;\n    const flowForElapsedTime = flowRate * (elapsedTime / MS_IN_A_DAY);\n    const todayTotal = global.get('pump2.meter.todayTotal') || 0;\n    global.set('pump2.meter.todayTotal', todayTotal + flowForElapsedTime);\n    \n    const lifetimeTotal = global.get('pump2.meter.lifetimeTotal') || 663;\n    global.set('pump2.meter.lifetimeTotal', lifetimeTotal + flowForElapsedTime);\n\n    msg.payload = {\n        instantFlowRate: flowRate,\n        todayTotal: global.get('pump2.meter.todayTotal'),\n        yesterdayTotal: global.get('pump2.meter.yesterdayTotal'),\n        lifetimeTotal: global.get('pump2.meter.lifetimeTotal')\n    };\n\n    global.set('pump2.meter.currRate',flowRate );\n    node.send(msg)\n} else {\n    msg.payload = {\n        instantFlowRate: 0,\n        todayTotal: global.get('pump2.meter.todayTotal'),\n        yesterdayTotal: global.get('pump2.meter.yesterdayTotal'),\n        lifetimeTotal: global.get('pump2.meter.lifetimeTotal')\n    };\n    global.set('pump2.meter.currRate', 0);\n    node.send(msg)\n}\n\nif (msg.rollover) {\n    const todayTotal = global.get('pump2.meter.todayTotal') || 0;\n    global.set('pump2.meter.yesterdayTotal', todayTotal);\n    global.set('pump2.meter.todayTotal', 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "f2f140e4fbff9554",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 36",
        "links": [
            "6242a77fe70b73cb",
            "127d884417b0670f"
        ],
        "x": 245,
        "y": 440,
        "wires": [
            [
                "dbf27704329ab4e9"
            ]
        ]
    },
    {
        "id": "76778d91cfde20c9",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "inlet flowmeter",
        "func": "const FLOW_RATE_AT_210PSI = 30000;\nconst MIN_PRESSURE = 200;\nconst MAX_PRESSURE = 210;\nconst MS_IN_A_DAY = 86400000;\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst now = Date.now();\nconst lastUpdate = global.get('inlet.inletmeter.lastUpdate') || now;\nconst elapsedTime = now - lastUpdate;\nglobal.set('inlet.inletmeter.lastUpdate', now);\n\nconst valveOpen = global.get('inlet.valve')\nlet flowRate = 0;\n\nif (valveOpen === \"open\") {\n  const pressure = getRandomInt(MIN_PRESSURE, MAX_PRESSURE);\n    flowRate = (pressure / MAX_PRESSURE) * FLOW_RATE_AT_210PSI;\n    const flowForElapsedTime = flowRate * (elapsedTime / MS_IN_A_DAY);\n\n    \n    const todayTotal = global.get('inlet.inletmeter.todayTotal') || 12740;        \n    global.set('inlet.inletmeter.todayTotal', todayTotal + flowForElapsedTime);\n    \n\n    const lifetimeTotal = global.get('inlet.inletmeter.lifetimeTotal') || 997004.25;\n    global.set('inlet.inletmeter.lifetimeTotal', lifetimeTotal + flowForElapsedTime);\n    global.set('inlet.inletmeter.curflowrate', flowRate)\n}else{\n    global.set('inlet.inletmeter.curflowrate', 0)\n}\nif (msg.rollover) {\n        const todayTotal = global.get('inlet.inletmeter.todayTotal') || 0;\n        global.set('inlet.inletmeter.yesterdayTotal', todayTotal);\n        global.set('inlet.inletmeter.todayTotal', 0);\n    }\n// msg.payload = {\n//     valveOpen: valveOpen,\n//     instantFlowRate: flowRate,\n//     todayTotal: global.get('inlet.inletmeter.todayTotal'),\n//     yesterdayTotal: global.get('inlet.inletmeter.yesterdayTotal'),\n//     lifetimeTotal: global.get('inlet.inletmeter.lifetimeTotal')\n// };\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b4b5312b3dd10365",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 37",
        "links": [
            "6242a77fe70b73cb",
            "127d884417b0670f"
        ],
        "x": 245,
        "y": 480,
        "wires": [
            [
                "76778d91cfde20c9"
            ]
        ]
    },
    {
        "id": "d0ea04aaa5720d12",
        "type": "cron",
        "z": "3eb826abb193de97",
        "name": "",
        "crontab": "0 4 * * *",
        "x": 90,
        "y": 600,
        "wires": [
            [
                "c1fe0209e4c331bf"
            ]
        ]
    },
    {
        "id": "c1fe0209e4c331bf",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "rollover",
        "func": "msg.rollover = true\nmsg.topic = \"cron alms\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 600,
        "wires": [
            [
                "127d884417b0670f"
            ]
        ]
    },
    {
        "id": "127d884417b0670f",
        "type": "link out",
        "z": "3eb826abb193de97",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "9d39612f66507e23",
            "f2f140e4fbff9554",
            "b4b5312b3dd10365",
            "f380f9d05f44ac67"
        ],
        "x": 355,
        "y": 600,
        "wires": []
    },
    {
        "id": "35d1d088e6b997c3",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "function 21",
        "func": "function setIncomingPressure() {\n    const minPressure = 8;\n    const maxPressure = 210;\n    const maxChange = 35;\n\n    let inlet = global.get(\"inlet\") || {\n        valve: \"open\",\n        plPSI: minPressure,\n        inletmeter: {\n            curflowrate: 12,\n            todaytotal: 0,\n            yesttotal: 0,\n            lifetime: 0\n        }\n    };\n\n    const previousPressure = inlet.plPSI;\n    const pressureChange = Math.floor(Math.random() * (maxChange * 2 + 1)) - maxChange;\n    inlet.plPSI = Math.max(Math.min(previousPressure + pressureChange, maxPressure), minPressure);\n\n    global.set(\"inlet.plPSI\", inlet.plPSI);\n}\n\nsetIncomingPressure();\n\nmsg.payload = {\n    inlet: global.get(\"inlet\")\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"inlet.plPSI\", 8)",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "f380f9d05f44ac67",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 38",
        "links": [
            "6242a77fe70b73cb",
            "127d884417b0670f"
        ],
        "x": 245,
        "y": 520,
        "wires": [
            [
                "35d1d088e6b997c3"
            ]
        ]
    },
    {
        "id": "65084cf19bc7f48f",
        "type": "link in",
        "z": "3eb826abb193de97",
        "name": "link in 40",
        "links": [
            "6242a77fe70b73cb"
        ],
        "x": 245,
        "y": 240,
        "wires": [
            [
                "3228cc79f5041434"
            ]
        ]
    },
    {
        "id": "fb960a46e72a888a",
        "type": "debug",
        "z": "3eb826abb193de97",
        "name": "debug 141",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 200,
        "wires": []
    },
    {
        "id": "825dd1ae6d07ec69",
        "type": "inject",
        "z": "3eb826abb193de97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 660,
        "wires": [
            [
                "73060421d1c82467"
            ]
        ]
    },
    {
        "id": "73060421d1c82467",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "toggle anomaly",
        "func": "let anomaly = flow.get('anomaly') || false; // Get current anomaly value\nanomaly = !anomaly; // Toggle anomaly value\nflow.set('anomaly', anomaly); // Save the new value\n\nreturn { payload: anomaly }; // Return the new value\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "4ac30f1cb4e76623",
        "type": "function",
        "z": "3eb826abb193de97",
        "d": true,
        "name": "PID Sim Attempt",
        "func": "function scaleSpeedAndTempToPSI(speed, outTemp, minSpeed, maxSpeed, minTemp, maxTemp, minOut, maxOut) {\n    // Scale speed and outTemp between 0 and 1\n    const scaledSpeed = (speed - minSpeed) / (maxSpeed - minSpeed);\n    const scaledTemp = (outTemp - minTemp) / (maxTemp - minTemp);\n\n    // Calculate weight based on speed and outTemp (higher speed and lower temp increases PSI)\n    const weight = 0.7 * scaledSpeed + 0.3 * (1 - scaledTemp);\n\n    // Scale weight to output PSI\n    return minOut + weight * (maxOut - minOut);\n}\n\nfunction scaleSpeedToPSI(speed, minIn, maxIn, minOut, maxOut) {\n    console.log(`scaleSpeedToPSI called with speed: ${speed}, minIn: ${minIn}, maxIn: ${maxIn}, minOut: ${minOut}, maxOut: ${maxOut}`);\n    const scaledSpeed = Math.max(Math.min(speed, maxIn), minIn);\n    const scale = (maxOut - minOut) / (maxIn - minIn);\n\n    let PSI = Math.round(minOut + scale * (scaledSpeed - minIn));\n    console.log(`scaleSpeedToPSI returns: ${PSI}`);\n    return PSI;\n}\n\nfunction updatePumpPSI(pumpId, speed, outTemp, valvePosition) {\n    if (typeof speed !== 'number' || typeof outTemp.val !== 'number' || typeof valvePosition !== 'number') {\n        console.log(`Invalid inputs: speed = ${speed}, outTemp.val = ${outTemp.val}, valvePosition = ${valvePosition}`);\n        return;\n    }\n\n    const suctPSI = scaleSpeedToPSI(speed, 38, 62, 75, 30);\n\n    // Simulated discharge PSI calculation\n    let simDiscPSI = 0;\n    if (valvePosition === 100) {\n        simDiscPSI = 57;  // Fully open valve position\n    } else if (valvePosition === 8) {\n        simDiscPSI = 600; // 8% open valve position\n    } else {\n        // Interpolate the discharge PSI based on valve position between 8 and 100\n        const minValvePos = 8;\n        const maxValvePos = 100;\n        const minDischargePSI = 600;\n        const maxDischargePSI = 57;\n\n        const slope = (maxDischargePSI - minDischargePSI) / (maxValvePos - minValvePos);\n        simDiscPSI = slope * (valvePosition - minValvePos) + minDischargePSI;\n    }\n\n    global.set(pumpId + '.suctPSI.val', suctPSI);\n    global.set(pumpId + '.discPSI.val', simDiscPSI);\n}\n\nfunction PIDControl(pump, pumpId) {\n    if (pump.runInd) {\n        const error = pump.controlValve.pid.setpoint - pump.discPSI.val;\n        let integralError = pump.controlValve.pid.integralError || 0;\n        const derivativeError = error - (pump.controlValve.pid.lastError || 0);\n\n        integralError += error;\n\n        let output = pump.controlValve.pid.kp * error + pump.controlValve.pid.ki * integralError + pump.controlValve.pid.kd * derivativeError;\n\n        // Save raw output for debugging\n        // Save raw output for debugging\n        const rawOutput = output;\n\n        // Invert output for correct direction\n        output = 100 - output;\n\n        // Apply physical constraints to output\n        output = Math.max(0, Math.min(100, output));\n        if (pump.runInd && output < 8) output = 8;\n\n        pump.controlValve.position = output;\n\n        pump.controlValve.pid.integralError = integralError;\n        pump.controlValve.pid.lastError = error;\n\n        // Debugging\n        console.log(`PID raw output for ${pumpId}: ${rawOutput}`);\n    } else {\n        pump.controlValve.position = 0;  // fully close the valve when the pump is not running\n        pump.controlValve.pid.integralError = 0;  // reset integral error\n    }\n\n    global.set(pumpId + '.controlValve.position', pump.controlValve.position);\n}\n\nfunction simulatePump(pumpId, speed, outTemp, valvePosition) {\n    const pump = global.get(pumpId) || {};\n    pump.speed = speed;\n    pump.outTemp.val = outTemp;\n    pump.controlValve.position = valvePosition;\n\n    updatePumpPSI(pumpId, pump.speed, pump.outTemp, pump.controlValve.position);\n    PIDControl(pump, pumpId);\n\n    global.set(pumpId, pump);\n}\n\n// Simulation data\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "133af9fcb364cc00",
        "type": "function",
        "z": "3eb826abb193de97",
        "name": "suction and discharge psi mapping",
        "func": "function simulatePressures(pumpId, tankId, maxTankLevel, minTankLevel, maxSuctionPressure, minSuctionPressure, maxDischargePressure, minDischargePressure) {\n    // Fetch pump and tank data from the global context\n    let pump = global.get(pumpId) || {};\n    let tank = global.get(tankId) || {};\n\n    if (!pump.runInd) {\n        // If pump is not running, set suction and discharge pressures to 0\n        pump.suctPSI.val = 0;\n        pump.discPSI.val = 0;\n    } else {\n        // If pump is running, calculate suction pressure based on tank level\n        let levelRange = maxTankLevel - minTankLevel;\n        let pressureRange = maxSuctionPressure - minSuctionPressure;\n        let normalizedLevel = (tank.Level - minTankLevel) / levelRange;\n        pump.suctPSI.val = (minSuctionPressure + normalizedLevel * pressureRange).toFixed(2);\n\n        // Calculate discharge pressure based on control valve position\n        let valveRange = 100; // Control valve ranges from 0 (closed) to 100 (open)\n        pressureRange = maxDischargePressure - minDischargePressure;\n        let normalizedValvePos = (100 - pump.controlValve.position) / valveRange;\n        pump.discPSI.val = (minDischargePressure + normalizedValvePos * pressureRange).toFixed(2);\n    }\n\n    // Update the global context\n    global.set(pumpId, pump);\n}\n\n// Simulate pressures for both pumps\nsimulatePressures('pump1', 'tank1', 31, 1, 90, 8, 620, 14);\nsimulatePressures('pump2', 'tank2', 24, 1, 78, 8, 620, 16);\n\nreturn msg;\n\n\n\n// // Function to simulate suction and discharge pressures\n// function simulatePressures(pumpId, tankId, maxTankLevel, minTankLevel, maxSuctionPressure, minSuctionPressure, maxDischargePressure, minDischargePressure) {\n//     // Fetch pump and tank data from the global context\n//     let pump = global.get(pumpId) || {};\n//     let tank = global.get(tankId) || {};\n\n//     if (!pump.runInd) {\n//         // If pump is not running, set suction and discharge pressures to 0\n//         pump.suctPSI.val = 0;\n//         pump.discPSI.val = 0;\n//     } else {\n//         // If pump is running, calculate suction pressure based on tank level\n//         let levelRange = maxTankLevel - minTankLevel;\n//         let pressureRange = maxSuctionPressure - minSuctionPressure;\n//         let normalizedLevel = (tank.Level - minTankLevel) / levelRange;\n//         pump.suctPSI.val = minSuctionPressure + normalizedLevel * pressureRange;\n\n//         // Calculate discharge pressure based on control valve position\n//         let valveRange = 100; // Control valve ranges from 0 (closed) to 100 (open)\n//         pressureRange = maxDischargePressure - minDischargePressure;\n//         let normalizedValvePos = (100 - pump.controlValve.position) / valveRange;\n//         pump.discPSI.val = minDischargePressure + normalizedValvePos * pressureRange;\n//     }\n\n//     // Update the global context\n//     global.set(pumpId, pump);\n// }\n\n// // Simulate pressures for both pumps\n// simulatePressures('pump1', 'tank1', 31, 1, 90, 8, 620, 14);\n// simulatePressures('pump2', 'tank2', 24, 1, 78, 8, 620, 16);\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "5518b5b99b21f376",
        "type": "inject",
        "z": "3eb826abb193de97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "133af9fcb364cc00"
            ]
        ]
    },
    {
        "id": "bf3928f1c1cf14f6",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "f2aceacafb3777a2"
        ],
        "x": 615,
        "y": 440,
        "wires": []
    },
    {
        "id": "68c0a337793d04b9",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "0a6fd1f43e87049a"
        ],
        "x": 615,
        "y": 460,
        "wires": []
    },
    {
        "id": "5383910989fc96df",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "5816d7ca4124487c"
        ],
        "x": 615,
        "y": 480,
        "wires": []
    },
    {
        "id": "702d6b887a5f9e8e",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "fbc3da0d80a74c32"
        ],
        "x": 615,
        "y": 500,
        "wires": []
    },
    {
        "id": "cf3567de0ed474d7",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "format plot data",
        "func": "let t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\nlet p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\nlet t = Math.round(Date.now() / 1000)\nlet data = flow.get('plotData')||[]\nlet a = [t, t1.Level, t2.Level]\n\n\ndata.length>=50?data = [...data, a].slice(1, 50): data= [...data, a] \n\n\nmsg.unit = \"Ft\"\nmsg.payload = data;\nmsg.title = 'Tanks'\nmsg.labels = [\"tank 1\", \"tank2\"]\nmsg.points = [true, true]\nnode.send([msg, null, null])\nflow.set('plotData', data)\n\nmsg.payload = t1.Level\nmsg.topic = \"t1\"\nmsg.title = 'Tank 1'\nmsg.unit = \"Ft\"\nnode.send([null, msg, null]);\n\nmsg.payload = t2.Level\nmsg.topic = \"t2\"\nmsg.title = 'Tank 2'\nmsg.unit = \"Ft\"\nmsg.color = \"green\"\nnode.send([null, null, msg])\n\n// if(p1.runInd){\n//     msg.payload = \"Running\"\n//     msg.color = \"green-accent-3\"\n//     msg.title = \"Pump 1\"\n//     node.send([null, null, null, msg])\n// }\n// if(!p1.runInd){\n//     msg.payload = \"Stop\"\n//     msg.color = \"pink-accent-3\"\n//     msg.title = \"Pump 1\"\n//     node.send([null, null, null, msg])\n// }\n// if (p2.runInd) {\n//     msg.payload = \"Running\"\n//     msg.color = \"green-accent-3\"\n//     msg.title = \"Pump 2\"\n//     node.send([null, null, null, null, msg])\n// }\n// if (!p2.runInd) {\n//     msg.payload = \"Stop\"\n//     msg.color = \"pink-accent-3\"\n//     msg.title = \"Pump 2\"\n//     node.send([null, null, null, null, msg])\n// }\n\n// msg.payload = p1.suctPSI.val\n// msg.color = 'green-accent-3'\n// msg.low_color = 'blue-accent-3'\n// msg.hi_color = 'pink-accent-3'\n// msg.low_threshold = 150\n// msg.high_threshold = 170\n// msg.title = 'P1 Suct PSI'\n// msg.unit = \"psi\"\n// node.send([null, null, null, null, null, msg])\n\n// msg.payload = p1.discPSI.val\n// msg.title = 'P1 Discharge PSI'\n// msg.color = 'green-accent-3'\n// msg.low_color = 'blue-accent-3'\n// msg.hi_color = 'pink-accent-3'\n// msg.low_threshold = 420\n// msg.high_threshold = 430\n// msg.unit = \"psi\"\n// node.send([null, null, null, null, null, null, msg])\n\n// msg.payload = p2.suctPSI.val\n// msg.color = 'green-accent-3'\n// msg.low_color = 'blue-accent-3'\n// msg.hi_color = 'pink-accent-3'\n// msg.low_threshold = 150\n// msg.high_threshold = 170\n// msg.title = 'P2 Suct PSI'\n// msg.unit = \"psi\"\n// node.send([null, null, null, null, \n//            null, null, null, msg])\n\n// msg.payload = p2.discPSI.val\n// msg.title = 'P2 Discharge PSI'\n// msg.color = 'green-accent-3'\n// msg.low_color = 'blue-accent-3'\n// msg.hi_color = 'pink-accent-3'\n// msg.low_threshold = 420\n// msg.high_threshold = 430\n// msg.unit = \"psi\"\n// node.send([null, null, null, null, \n//            null, null, null, null, \n//            msg])\n// return;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "b52b75adc1d1ae63"
            ],
            [
                "a1a9a0ccbe7f5358"
            ],
            [
                "e1bf9a9d5e68c697"
            ]
        ]
    },
    {
        "id": "2f6610498e8813ac",
        "type": "inject",
        "z": "493d2f30c5ead3e9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "f8e158f05e225708"
            ]
        ]
    },
    {
        "id": "b49152bc426fd9d4",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "DashButton parse",
        "func": "// if (msg.topic === \"p1.opSP.start\"){\n//     global.set('pump1.opSP.start', msg.payload) \n//  }\n// if (msg.topic === \"p1.opSP.stop\") {\n//     global.set('pump1.opSP.stop', msg.payload)\n// } \n// if (msg.topic === \"p2.opSP.start\") {\n//     global.set('pump2.opSP.start', msg.payload)\n// }\n// if (msg.topic === \"p2.opSP.stop\") {\n//     global.set('pump2.opSP.stop', msg.payload)\n// }\n\n\n//  if (msg.topic === 'alarmReset') {\n//     global.set('reset', msg.payload)\n//  }\n\nglobal.set(msg.topic, msg.payload)\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6d7042900e6b389d",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "P1-P2 Run conditions",
        "func": "let p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\n\nif (p1.runInd) {\n    msg.payload = \"Running\"\n//    msg.value = \"shit\"\n    msg.color = \"green-accent-3\"\n    msg.title = \"Status\"\n    node.send([msg])\n}\nif (!p1.runInd) {\n    msg.payload = \"Stop\"\n    msg.color = \"pink-accent-3\"\n    msg.title = \"Status\"\n    node.send([msg])\n}\nif (p2.runInd) {\n    msg.payload = \"Running\"\n    msg.color = \"green-accent-3\"\n    msg.title = \"Status\"\n    node.send([null, msg])\n}\nif (!p2.runInd) {\n    msg.payload = \"Stop\"\n    msg.color = \"pink-accent-3\"\n    msg.title = \"Status\"\n    node.send([null, msg])\n}\n\nmsg.payload = p1.suctPSI.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = 150\nmsg.high_threshold = 170\nmsg.title = 'Suction PSI'\nmsg.unit = \"psi\"\nnode.send([null, null, msg])\n\nmsg.payload = p1.discPSI.val\nmsg.title = 'Discharge PSI'\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = 420\nmsg.high_threshold = 430\nmsg.unit = \"psi\"\nnode.send([null, null, null, msg])\n\nmsg.payload = p2.suctPSI.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = 150\nmsg.high_threshold = 170\nmsg.title = 'Suction PSI'\nmsg.unit = \"psi\"\nnode.send([null, null, null, null,\n    msg])\n\nmsg.payload = p2.discPSI.val\nmsg.title = 'Discharge PSI'\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = 420\nmsg.high_threshold = 430\nmsg.unit = \"psi\"\nnode.send([null, null, null, null,\n           null, msg])\n\nmsg.payload = p1.speed\nmsg.title = 'Pump Speed'\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = 55\nmsg.high_threshold = 60\nmsg.unit = \"hz\"\nnode.send([null, null, null, null,\n    null, null, msg])\n\n\nmsg.payload = p2.speed\nmsg.title = 'Pump Speed'\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = 55\nmsg.high_threshold = 60\nmsg.unit = \"hz\"\nnode.send([null, null, null, null,\n    null, null, null, msg])\n\nreturn;\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 520,
        "wires": [
            [
                "bf3928f1c1cf14f6"
            ],
            [
                "68c0a337793d04b9"
            ],
            [
                "5383910989fc96df"
            ],
            [
                "702d6b887a5f9e8e"
            ],
            [
                "2958d741a3838476"
            ],
            [
                "5f2ac4ce9c793c98"
            ],
            [
                "8b728b8f8bda683d"
            ],
            [
                "0bd848786f479f4e"
            ]
        ]
    },
    {
        "id": "7eb8ad78e98ed3fa",
        "type": "inject",
        "z": "493d2f30c5ead3e9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://nodered.ot-bytes.xyz/ui/#!/0?socketid=LvvEKaE7S2Nnv8SIAAAP",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "cf3567de0ed474d7"
            ]
        ]
    },
    {
        "id": "e496bb85b269d7b4",
        "type": "debug",
        "z": "493d2f30c5ead3e9",
        "name": "debug 136",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "8d7694b744aa851e",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "txtbox val fill",
        "func": "let p1 = global.get('pump1')||{}\nlet p2 = global.get('pump2')||{}\n\n\nmsg.payload = p1.opSP.start\nnode.send ([msg, null, null, null]);\n\nmsg.payload = p1.opSP.stop\nnode.send ([null, msg, null, null])\n\nmsg.payload = p2.opSP.start\nnode.send ([null, null, msg, null]);\n\nmsg.payload = p2.opSP.stop\nnode.send([null, null, null, msg])\n\nreturn ;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "bd6cd674cc9a05c6"
            ],
            [
                "1426d0bb3b43ca1d"
            ],
            [
                "ed81b2c984fe008c"
            ],
            [
                "f21df0b6090b1ecb"
            ]
        ]
    },
    {
        "id": "396ebb7bbde0767f",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "Tank1 Props",
        "func": "const t1 = global.get('tank1')\n\nconst {Level, LvlAlmSP, LvlAlms} = t1\nlet a, b\na = {\n    \"Hi SD SP\":LvlAlmSP[0],\n    \"Hi Alarm SP\": LvlAlmSP[1],\n    \"Lo Alarm SP\": LvlAlmSP[2],\n    \"Lo SD SP\"   : LvlAlmSP[3],   \n    }\nlet c = {...a}//, ...b}\n\nmsg.data = {...a}\nmsg.fields = [...Object.keys(a)] //, ...Object.keys(b)] \nmsg.editable = true\nmsg.send_all = true\n\nnode.send([msg]),\n\n\nb= {\n    \"Hi SD\": LvlAlms[0],\n    \"Hi Alarm\": LvlAlms[1],\n    \"Lo Alarm\": LvlAlms[2],\n    \"Lo SD\": LvlAlms[3],\n}\n\nmsg.data = { ...b }\nmsg.fields = [...Object.keys(b)] //, ...Object.keys(b)] \nmsg.editable = false\nmsg.sendAll = false\n//msg.textColor: \"black\",\nmsg.bgColor = []\nfor (const key in msg.data) {\n    if (msg.data.hasOwnProperty(key)) {\n        msg.bgColor.push(msg.data[key] ? '#EF9A9A' : '');\n    }\n}\n\nnode.send([null, msg]),\n\n\n\n\n\n\n\n\nmsg.payload = Level\nmsg.unit = \"Feet\"\n\n\nif (Level >= LvlAlmSP[0] ) {\n    msg.color = \"pink\"\n} else if (Level >= LvlAlmSP[1]){\n    msg.color = \"orange\"\n} else {\n    msg.color = \"text\"\n}\n\nnode.send([null,null,msg])\n\n\n\n\n\n\nreturn ;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 820,
        "wires": [
            [
                "217caed5e9cee597"
            ],
            [
                "0f7e034cdb57b753"
            ],
            []
        ]
    },
    {
        "id": "826a24e81c15a009",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "map current vals",
        "func": "let a=Object.values(msg.payload)\nlet b= a.map(Number);\n\nglobal.set('tank1.LvlAlmSP', b)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "3076f70451a97744",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "map current vals",
        "func": "let a=Object.values(msg.payload)\nlet b= a.map(Number);\n\nglobal.set('tank2.LvlAlmSP', b)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "b293435c32ac21f7",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "rst btn handler",
        "func": "if (global.get('reset') || msg.topic === 'reset'){\n    msg.color = 'grey-lighten-3'\n}else {\n    msg.color = 'light-blue-lighten-3'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 420,
        "wires": [
            [
                "40d6a7c5836eba11"
            ]
        ]
    },
    {
        "id": "3f77f65827533421",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 13",
        "links": [
            "f8e158f05e225708"
        ],
        "x": 305,
        "y": 420,
        "wires": [
            [
                "b293435c32ac21f7"
            ]
        ]
    },
    {
        "id": "f8e158f05e225708",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "969a6eafbc6e4c2c",
            "3f77f65827533421",
            "5c905616c03af72c",
            "fa15bdac5fa8dffd",
            "596f2a8a59a61cb7",
            "d5fd2829e8f04436",
            "a7d0c9f879632c10"
        ],
        "x": 85,
        "y": 240,
        "wires": []
    },
    {
        "id": "969a6eafbc6e4c2c",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 14",
        "links": [
            "f8e158f05e225708"
        ],
        "x": 195,
        "y": 340,
        "wires": [
            [
                "8d7694b744aa851e"
            ]
        ]
    },
    {
        "id": "5c905616c03af72c",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 15",
        "links": [
            "f8e158f05e225708"
        ],
        "x": 175,
        "y": 240,
        "wires": [
            [
                "e57b170711d4cd0d",
                "60c3223dc144daf7"
            ]
        ]
    },
    {
        "id": "fa15bdac5fa8dffd",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 16",
        "links": [
            "f8e158f05e225708"
        ],
        "x": 225,
        "y": 820,
        "wires": [
            [
                "396ebb7bbde0767f"
            ]
        ]
    },
    {
        "id": "596f2a8a59a61cb7",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 17",
        "links": [
            "f8e158f05e225708"
        ],
        "x": 195,
        "y": 520,
        "wires": [
            [
                "6d7042900e6b389d"
            ]
        ]
    },
    {
        "id": "d5fd2829e8f04436",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 18",
        "links": [
            "f8e158f05e225708"
        ],
        "x": 225,
        "y": 880,
        "wires": [
            [
                "e9693c4b11240b0d"
            ]
        ]
    },
    {
        "id": "e94e96c90ba4927c",
        "type": "flexdash custom",
        "z": "493d2f30c5ead3e9",
        "name": "HOA",
        "title": "HOA",
        "sfc_source": "<template>\n  <v-btn variant=\"elevated\" class=\"ma-auto\" @click=\"clicked()\">\n    <span class=\"label\">{{ label }}</span>\n  </v-btn>\n</template>\n\n<style scoped>\n  .label { color: black; }\n</style>\n\n<script>\nexport default {\n  // Props are the inputs to the widget.\n  // They can be set dynamically using Node-RED messages using `msg.<prop>`.\n  // In a \"custom widget\" like this one they cannot be set via the Node-RED flow editor:\n  // use the default values in the lines below instead.\n  props: {\n    label: { default: \"HOA\" }, // text to show inside button\n    output: { default: \"label\" }, // value to output when clicked\n  },\n\n  emits: ['send'], // declare to Vue that this component emits a 'send' event\n\n  // simple methods within the component\n  methods: {\n    clicked() { // handle the clicking of the button, i.e., the handler for the '@click'\n      this.$emit('send', this.output) // emit an event (Vue concept), a 'send' event goes to NR\n    },\n  },\n}\n</script>\n",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 730,
        "y": 940,
        "wires": [
            [
                "27a4c2c927c5a06b"
            ]
        ]
    },
    {
        "id": "27a4c2c927c5a06b",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "state map hoa1",
        "func": "// let state = ['Hand', 'Off', \"Auto\"]\n// let color = [\"orange\", 'grey', 'green']\n// if (msg.payload[1] === state[0]){\n//     msg.label = state[1]\n//     msg.output = [1, state[1]]\n//     msg.color = color[1]\n//     global.set('pump1.HOA', 2)\n//     return msg;\n// }\n// if (msg.payload[1] === state[1]) {    \n//     msg.label = state[2]\n//     msg.output = [1, state[2]]\n//     msg.color = color[2]\n//     global.set('pump1.HOA', 3)\n//     return msg;\n// }\n// if (msg.payload[1] === state[2] || msg.payload === 'default') {\n//     msg.label = state[0]\n//     msg.output = [1, state[0]]\n//     msg.color = color[0]\n//     global.set('pump1.HOA', 1)\n//     return msg;\n// }\nconst stateMap = {\n    'Hand': { next: 'Off', color: 'grey', hoa: 2 },\n    'Off': { next: 'Auto', color: 'green', hoa: 3 },\n    'Auto': { next: 'Hand', color: 'orange', hoa: 1 },\n};\n\nconst currentState = msg.payload[1] || 'default';\nconst nextState = stateMap[currentState] || stateMap['Auto'];\n\nmsg.label = nextState.next;\nmsg.output = [1, nextState.next];\nmsg.color = nextState.color;\nglobal.set('pump1.HOA', nextState.hoa);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (context.get('currState') === undefined){\n    context.set('currState', 0)\n}\n",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 940,
        "wires": [
            [
                "e94e96c90ba4927c"
            ]
        ]
    },
    {
        "id": "b3b4c86d4635e85f",
        "type": "inject",
        "z": "493d2f30c5ead3e9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "default",
        "payloadType": "str",
        "x": 300,
        "y": 940,
        "wires": [
            [
                "27a4c2c927c5a06b",
                "6e3c9f050e890464"
            ]
        ]
    },
    {
        "id": "a90d41cadcb31fa9",
        "type": "flexdash custom",
        "z": "493d2f30c5ead3e9",
        "name": "HOA",
        "title": "HOA",
        "sfc_source": "<template>\n  <v-btn variant=\"elevated\" class=\"ma-auto\" @click=\"clicked()\">\n    <span class=\"label\">{{ label }}</span>\n  </v-btn>\n</template>\n\n<style scoped>\n  .label { color: black; }\n</style>\n\n<script>\nexport default {\n  // Props are the inputs to the widget.\n  // They can be set dynamically using Node-RED messages using `msg.<prop>`.\n  // In a \"custom widget\" like this one they cannot be set via the Node-RED flow editor:\n  // use the default values in the lines below instead.\n  props: {\n    label: { default: \"HOA\" }, // text to show inside button\n    output: { default: \"label\" }, // value to output when clicked\n  },\n\n  emits: ['send'], // declare to Vue that this component emits a 'send' event\n\n  // simple methods within the component\n  methods: {\n    clicked() { // handle the clicking of the button, i.e., the handler for the '@click'\n      this.$emit('send', this.output) // emit an event (Vue concept), a 'send' event goes to NR\n    },\n  },\n}\n</script>\n",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 730,
        "y": 980,
        "wires": [
            [
                "6e3c9f050e890464"
            ]
        ]
    },
    {
        "id": "6e3c9f050e890464",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "state map hoa2",
        "func": "const stateMap = {\n    'Hand': { next: 'Off', color: 'grey', hoa: 2 },\n    'Off': { next: 'Auto', color: 'green', hoa: 3 },\n    'Auto': { next: 'Hand', color: 'orange', hoa: 1 },\n};\n\nconst currentState = msg.payload[1] || 'default';\nconst nextState = stateMap[currentState] || stateMap['Auto'];\n\nmsg.label = nextState.next;\nmsg.output = [2, nextState.next];\nmsg.color = nextState.color;\nglobal.set('pump2.HOA', nextState.hoa);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (context.get('currState') === undefined){\n    context.set('currState', 0)\n}\n",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 980,
        "wires": [
            [
                "a90d41cadcb31fa9"
            ]
        ]
    },
    {
        "id": "e9693c4b11240b0d",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "tank2 props",
        "func": "const t2 = global.get('tank2')\n\nconst {Level, LvlAlmSP, LvlAlms} = t2\nlet a, b\na = {\n    \"Hi SD SP\": LvlAlmSP[0],\n    \"Hi Alarm SP\": LvlAlmSP[1],\n    \"Lo Alarm SP\": LvlAlmSP[2],\n    \"Lo SD SP\"   : LvlAlmSP[3],   \n    }\nlet c = {...a}//, ...b}\n\nmsg.data = {...a}\nmsg.fields = [...Object.keys(a)] //, ...Object.keys(b)] \nmsg.editable = true\nmsg.send_all = true\n\n\nnode.send(msg),\n\n\nb= {\n    \"Hi SD\": LvlAlms[0],\n    \"Hi Alarm\": LvlAlms[1],\n    \"Lo Alarm\": LvlAlms[2],\n    \"Lo SD\": LvlAlms[3],\n}\n\nmsg.data = {...b}\nmsg.fields = [...Object.keys(b)] //, ...Object.keys(b)] \nmsg.editable = false\nmsg.sendAll = false\n//msg.textColor: \"black\",\nmsg.bgColor= []\nfor (const key in msg.data) {\n    if (msg.data.hasOwnProperty(key)) {\n        msg.bgColor.push(msg.data[key] ? '#EF9A9A' : '');\n    }\n}\n\nnode.send([null, msg]),\n\n\n\n// msg.payload = Level\n// msg.unit = \"Feet\"\n\n\n// if (Level >= LvlAlmSP[0] ) {\n//     msg.color = \"pink\"\n// } else if (Level >= LvlAlmSP[1]){\n//     msg.color = \"orange\"\n// } else {\n//     msg.color = \"black\"\n// }\n\nnode.send([null,null,msg])\n\n\n\n\n\n\nreturn ;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 880,
        "wires": [
            [
                "3d1daed2a6c539ca"
            ],
            [
                "41c82168eff9f224"
            ],
            []
        ]
    },
    {
        "id": "3d1daed2a6c539ca",
        "type": "flexdash custom",
        "z": "493d2f30c5ead3e9",
        "name": "custom props",
        "sfc_source": "<!-- Props-table -- Display a simple table of key-value properties\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <!-- title -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span v-if=\"title\" class=\"ml-auto mr-1 mb-1 text-no-wrap\">{{title}}</span>\n    <span class=\"mr-auto\"></span>\n  </v-card-text>\n\n  <!-- table of properties -->\n  <v-table height=\"auto\" style=\"overflow-y:scroll\" v-bind=\"$attrs\">\n    <tbody>\n      <tr v-for=\"(key, ix) in keys\" :key=\"ix\">\n        <td align=\"right\" class=\"px-1\"><b>{{key}}:</b></td>\n        <!-- non-editing -->\n        <td v-if=\"!editing\" class=\"px-2\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\">{{value[key]}}\n        </td>\n        <!-- edit string -->\n        <td v-else-if=\"kind[key]==='string'\" class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit number -->\n        <td v-else-if=\"kind[key]==='number'\" class=\"px-2\">\n          <input type=\"number\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit boolean -->\n        <td v-else-if=\"kind[key]==='boolean'\" class=\"px-2\">\n          <input type=\"checkbox\" :checked=\"value[key]\" :tada=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- other types: not sure.... -->\n        <td v-else class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n      </tr>\n    </tbody>\n  </v-table>\n\n  <v-spacer></v-spacer>\n\n  <!-- edit, save, and cancel buttons at the bottom -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span class=\"mr-auto\"></span>\n    <!-- edit button (when not editing) -->\n    <v-btn icon class=\"title-btn mr-auto ml-0\" v-if=\"editable && !editing\" @click=\"handleEdit\">\n      <v-icon size=\"small\" icon=\"mdi-pencil\" />\n    </v-btn>\n    <!-- save/cancel buttons (when editing) -->\n    <v-btn icon class=\"title-btn mr-1 ml-0\" v-if=\"editing\" @click=\"handleCancel\">\n      <v-icon size=\"small\" icon=\"mdi-close-thick\" />\n    </v-btn>\n    <v-btn small icon class=\"title-btn mr-auto ml-1\" v-if=\"editing\" @click=\"handleSave\">\n      <v-icon size=\"small\" icon=\"mdi-check-bold\" />\n    </v-btn>\n  </v-card-text>\n</template>\n\n\n<style scoped>\n  .unit {\n    vertical-align: 15%;\n    margin-left: 0.1em;\n  }\n\n  .title-btn {\n    position: relative;\n    top: -4px;\n  }\n\n  /* FIXME: .theme--xxx is no longer present in vuetify 3 */\n  .theme--light .v-btn--icon {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n\n  .theme--dark .v-btn--icon {\n    background-color: rgba(30, 30, 30, 0.6);\n  }\n\n  .theme--light .v-card__text {\n    color: rgba(0, 0, 0, 0.6);\n  }\n\n  .theme--dark .v-card__text {\n    color: rgba(255, 255, 255, 0.7);\n  }\n\n  td input:not([type=checkbox]) {\n    width: 100%;\n    padding: 0px 1px;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background: none;\n    border: 1px solid #888;\n    border-radius: 2px;\n  }\n\n  .v-table {\n    height: 100%;\n    width: 100%\n  }\n</style>\n\n<script scoped>\n  // Map an object to another one through a function that transforms the values\nvar ObjectMap = (o, fn) => Object.fromEntries(Object.entries(o).map(([k, v]) => [k, fn(k, v)]))\n\nexport default {\n    name: 'PropsTable',\n    // help displayed in the UI: the first line is used in the widgets menu and is always shown in\n    // the edit card. Successive lines can be expanded in the card and are markdown-formatted.\n    help: `Display key-value pairs in tabular form.\nIf the \\`fields\\` property is empty the table shows all data field in alphanumeric order.\nIf the \\`fields\\` property is set, the table shows only the listed fields in the order specified.\n\nThe table can be set as editable which allows the user to change the property values.\n\\`send_all\\` controls whether only the edited fields or all fields are sent to the\n\\`output\\` topic.`,\n\n    // properties are inputs to the widget, these can be set to static values or bound to dynamic\n    // data by topic in the FlexDash UI. The type is used to display the appropriate kind of input\n    // field and also to convert data (ex: string to number). Dynamic is used to bind an input\n    // to a data topic right when the widget is created so it animates tight off the bat.\n    props: {\n        title: { type: String, default: '' },\n        data: { type: Object, default: () => ({ \"key1\": \"value1\", \"key2\": \"value2\" }),\n            tip: \"simple key-value pairs to show in table\"},\n        editable: { type: Boolean, default: false, tip: \"allow editing of the table\"},\n        fields: { type: Array, default: () => ['key1', 'key2'],\n            tip: \"fields to show in table in order, show all in sorted order if empty\"},\n        send_all: { type: Boolean, default: false,\n            tip: \"send all fields to topic, not just changed ones\"},\n        textColor: { type: String, default: '', tip: \"text color of the values\" },\n        bgColor: { type: String, default: '', tip: \"background color of the values\" },\n    },\n\n    output: { default: null },\n    emits: ['send'],\n\n    data() { return {\n        editing: false,\n        new_values: {},\n    }},\n\n    computed: {\n        // sort property keys alphabetically\n        keys() {  return this.fields && this.fields.length ? this.fields : Object.keys(this.data).sort() },\n        kind() { return ObjectMap(this.data, (k,v) => typeof v) },\n        value() { return ObjectMap(this.data, (k,v) => {\n            if (typeof v == 'string') return v\n            else return JSON.stringify(v)\n        })},\n    },\n\n    methods: {\n        handleEdit() { this.editing = true },\n        handleCancel() { this.editing = false; this.new_values = {} },\n        handleSave() {\n            this.editing = false;\n            this.$emit('send', this.send_all ? {...this.data, ...this.new_values} : this.new_values)\n            this.new_values = {}\n        },\n        handleInput(key, ev) { this.new_values[key] = ev.target.value },\n        getBgColor(index) {\n            if (Array.isArray(this.bgColor) && this.bgColor[index]) {\n                return this.bgColor[index];\n            }\n            return this.bgColor || '';\n        }\n    }\n\n}\n</script>",
        "fd_container": "378776577a63304a",
        "fd_cols": 4,
        "fd_rows": 2,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 600,
        "y": 860,
        "wires": [
            [
                "3076f70451a97744"
            ]
        ]
    },
    {
        "id": "41c82168eff9f224",
        "type": "flexdash custom",
        "z": "493d2f30c5ead3e9",
        "name": "custom props",
        "sfc_source": "<!-- Props-table -- Display a simple table of key-value properties\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <!-- title -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span v-if=\"title\" class=\"ml-auto mr-1 mb-1 text-no-wrap\">{{title}}</span>\n    <span class=\"mr-auto\"></span>\n  </v-card-text>\n\n  <!-- table of properties -->\n  <v-table height=\"auto\" style=\"overflow-y:scroll\" v-bind=\"$attrs\">\n    <tbody>\n      <tr v-for=\"(key, ix) in keys\" :key=\"ix\">\n        <td align=\"right\" class=\"px-1\"><b>{{key}}:</b></td>\n        <!-- non-editing -->\n        <td v-if=\"!editing\" class=\"px-2\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\">{{value[key]}}\n        </td>\n        <!-- edit string -->\n        <td v-else-if=\"kind[key]==='string'\" class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit number -->\n        <td v-else-if=\"kind[key]==='number'\" class=\"px-2\">\n          <input type=\"number\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit boolean -->\n        <td v-else-if=\"kind[key]==='boolean'\" class=\"px-2\">\n          <input type=\"checkbox\" :checked=\"value[key]\" :tada=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- other types: not sure.... -->\n        <td v-else class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n      </tr>\n    </tbody>\n  </v-table>\n\n  <v-spacer></v-spacer>\n\n  <!-- edit, save, and cancel buttons at the bottom -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span class=\"mr-auto\"></span>\n    <!-- edit button (when not editing) -->\n    <v-btn icon class=\"title-btn mr-auto ml-0\" v-if=\"editable && !editing\" @click=\"handleEdit\">\n      <v-icon size=\"small\" icon=\"mdi-pencil\" />\n    </v-btn>\n    <!-- save/cancel buttons (when editing) -->\n    <v-btn icon class=\"title-btn mr-1 ml-0\" v-if=\"editing\" @click=\"handleCancel\">\n      <v-icon size=\"small\" icon=\"mdi-close-thick\" />\n    </v-btn>\n    <v-btn small icon class=\"title-btn mr-auto ml-1\" v-if=\"editing\" @click=\"handleSave\">\n      <v-icon size=\"small\" icon=\"mdi-check-bold\" />\n    </v-btn>\n  </v-card-text>\n</template>\n\n\n<style scoped>\n  .unit {\n    vertical-align: 15%;\n    margin-left: 0.1em;\n  }\n\n  .title-btn {\n    position: relative;\n    top: -4px;\n  }\n\n  /* FIXME: .theme--xxx is no longer present in vuetify 3 */\n  .theme--light .v-btn--icon {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n\n  .theme--dark .v-btn--icon {\n    background-color: rgba(30, 30, 30, 0.6);\n  }\n\n  .theme--light .v-card__text {\n    color: rgba(0, 0, 0, 0.6);\n  }\n\n  .theme--dark .v-card__text {\n    color: rgba(255, 255, 255, 0.7);\n  }\n\n  td input:not([type=checkbox]) {\n    width: 100%;\n    padding: 0px 1px;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background: none;\n    border: 1px solid #888;\n    border-radius: 2px;\n  }\n\n  .v-table {\n    height: 100%;\n    width: 100%\n  }\n</style>\n\n<script scoped>\n  // Map an object to another one through a function that transforms the values\nvar ObjectMap = (o, fn) => Object.fromEntries(Object.entries(o).map(([k, v]) => [k, fn(k, v)]))\n\nexport default {\n    name: 'PropsTable',\n    // help displayed in the UI: the first line is used in the widgets menu and is always shown in\n    // the edit card. Successive lines can be expanded in the card and are markdown-formatted.\n    help: `Display key-value pairs in tabular form.\nIf the \\`fields\\` property is empty the table shows all data field in alphanumeric order.\nIf the \\`fields\\` property is set, the table shows only the listed fields in the order specified.\n\nThe table can be set as editable which allows the user to change the property values.\n\\`send_all\\` controls whether only the edited fields or all fields are sent to the\n\\`output\\` topic.`,\n\n    // properties are inputs to the widget, these can be set to static values or bound to dynamic\n    // data by topic in the FlexDash UI. The type is used to display the appropriate kind of input\n    // field and also to convert data (ex: string to number). Dynamic is used to bind an input\n    // to a data topic right when the widget is created so it animates tight off the bat.\n    props: {\n        title: { type: String, default: '' },\n        data: { type: Object, default: () => ({ \"key1\": \"value1\", \"key2\": \"value2\" }),\n            tip: \"simple key-value pairs to show in table\"},\n        editable: { type: Boolean, default: false, tip: \"allow editing of the table\"},\n        fields: { type: Array, default: () => ['key1', 'key2'],\n            tip: \"fields to show in table in order, show all in sorted order if empty\"},\n        send_all: { type: Boolean, default: false,\n            tip: \"send all fields to topic, not just changed ones\"},\n        textColor: { type: String, default: '', tip: \"text color of the values\" },\n        bgColor: { type: String, default: '', tip: \"background color of the values\" },\n    },\n\n    output: { default: null },\n    emits: ['send'],\n\n    data() { return {\n        editing: false,\n        new_values: {},\n    }},\n\n    computed: {\n        // sort property keys alphabetically\n        keys() {  return this.fields && this.fields.length ? this.fields : Object.keys(this.data).sort() },\n        kind() { return ObjectMap(this.data, (k,v) => typeof v) },\n        value() { return ObjectMap(this.data, (k,v) => {\n            if (typeof v == 'string') return v\n            else return JSON.stringify(v)\n        })},\n    },\n\n    methods: {\n        handleEdit() { this.editing = true },\n        handleCancel() { this.editing = false; this.new_values = {} },\n        handleSave() {\n            this.editing = false;\n            this.$emit('send', this.send_all ? {...this.data, ...this.new_values} : this.new_values)\n            this.new_values = {}\n        },\n        handleInput(key, ev) { this.new_values[key] = ev.target.value },\n        getBgColor(index) {\n            if (Array.isArray(this.bgColor) && this.bgColor[index]) {\n                return this.bgColor[index];\n            }\n            return this.bgColor || '';\n        }\n    }\n\n}\n</script>",
        "fd_container": "378776577a63304a",
        "fd_cols": 4,
        "fd_rows": 2,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 600,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "217caed5e9cee597",
        "type": "flexdash custom",
        "z": "493d2f30c5ead3e9",
        "name": "custom props",
        "sfc_source": "<!-- Props-table -- Display a simple table of key-value properties\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <!-- title -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span v-if=\"title\" class=\"ml-auto mr-1 mb-1 text-no-wrap\">{{title}}</span>\n    <span class=\"mr-auto\"></span>\n  </v-card-text>\n\n  <!-- table of properties -->\n  <v-table height=\"auto\" style=\"overflow-y:scroll\" v-bind=\"$attrs\">\n    <tbody>\n      <tr v-for=\"(key, ix) in keys\" :key=\"ix\">\n        <td align=\"right\" class=\"px-1\"><b>{{key}}:</b></td>\n        <!-- non-editing -->\n        <td v-if=\"!editing\" class=\"px-2\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\">{{value[key]}}\n        </td>\n        <!-- edit string -->\n        <td v-else-if=\"kind[key]==='string'\" class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit number -->\n        <td v-else-if=\"kind[key]==='number'\" class=\"px-2\">\n          <input type=\"number\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit boolean -->\n        <td v-else-if=\"kind[key]==='boolean'\" class=\"px-2\">\n          <input type=\"checkbox\" :checked=\"value[key]\" :tada=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- other types: not sure.... -->\n        <td v-else class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n      </tr>\n    </tbody>\n  </v-table>\n\n  <v-spacer></v-spacer>\n\n  <!-- edit, save, and cancel buttons at the bottom -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span class=\"mr-auto\"></span>\n    <!-- edit button (when not editing) -->\n    <v-btn icon class=\"title-btn mr-auto ml-0\" v-if=\"editable && !editing\" @click=\"handleEdit\">\n      <v-icon size=\"small\" icon=\"mdi-pencil\" />\n    </v-btn>\n    <!-- save/cancel buttons (when editing) -->\n    <v-btn icon class=\"title-btn mr-1 ml-0\" v-if=\"editing\" @click=\"handleCancel\">\n      <v-icon size=\"small\" icon=\"mdi-close-thick\" />\n    </v-btn>\n    <v-btn small icon class=\"title-btn mr-auto ml-1\" v-if=\"editing\" @click=\"handleSave\">\n      <v-icon size=\"small\" icon=\"mdi-check-bold\" />\n    </v-btn>\n  </v-card-text>\n</template>\n\n\n<style scoped>\n  .unit {\n    vertical-align: 15%;\n    margin-left: 0.1em;\n  }\n\n  .title-btn {\n    position: relative;\n    top: -4px;\n  }\n\n  /* FIXME: .theme--xxx is no longer present in vuetify 3 */\n  .theme--light .v-btn--icon {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n\n  .theme--dark .v-btn--icon {\n    background-color: rgba(30, 30, 30, 0.6);\n  }\n\n  .theme--light .v-card__text {\n    color: rgba(0, 0, 0, 0.6);\n  }\n\n  .theme--dark .v-card__text {\n    color: rgba(255, 255, 255, 0.7);\n  }\n\n  td input:not([type=checkbox]) {\n    width: 100%;\n    padding: 0px 1px;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background: none;\n    border: 1px solid #888;\n    border-radius: 2px;\n  }\n\n  .v-table {\n    height: 100%;\n    width: 100%\n  }\n</style>\n\n<script scoped>\n  // Map an object to another one through a function that transforms the values\nvar ObjectMap = (o, fn) => Object.fromEntries(Object.entries(o).map(([k, v]) => [k, fn(k, v)]))\n\nexport default {\n    name: 'PropsTable',\n    // help displayed in the UI: the first line is used in the widgets menu and is always shown in\n    // the edit card. Successive lines can be expanded in the card and are markdown-formatted.\n    help: `Display key-value pairs in tabular form.\nIf the \\`fields\\` property is empty the table shows all data field in alphanumeric order.\nIf the \\`fields\\` property is set, the table shows only the listed fields in the order specified.\n\nThe table can be set as editable which allows the user to change the property values.\n\\`send_all\\` controls whether only the edited fields or all fields are sent to the\n\\`output\\` topic.`,\n\n    // properties are inputs to the widget, these can be set to static values or bound to dynamic\n    // data by topic in the FlexDash UI. The type is used to display the appropriate kind of input\n    // field and also to convert data (ex: string to number). Dynamic is used to bind an input\n    // to a data topic right when the widget is created so it animates tight off the bat.\n    props: {\n        title: { type: String, default: '' },\n        data: { type: Object, default: () => ({ \"key1\": \"value1\", \"key2\": \"value2\" }),\n            tip: \"simple key-value pairs to show in table\"},\n        editable: { type: Boolean, default: false, tip: \"allow editing of the table\"},\n        fields: { type: Array, default: () => ['key1', 'key2'],\n            tip: \"fields to show in table in order, show all in sorted order if empty\"},\n        send_all: { type: Boolean, default: false,\n            tip: \"send all fields to topic, not just changed ones\"},\n        textColor: { type: String, default: '', tip: \"text color of the values\" },\n        bgColor: { type: String, default: '', tip: \"background color of the values\" },\n    },\n\n    output: { default: null },\n    emits: ['send'],\n\n    data() { return {\n        editing: false,\n        new_values: {},\n    }},\n\n    computed: {\n        // sort property keys alphabetically\n        keys() {  return this.fields && this.fields.length ? this.fields : Object.keys(this.data).sort() },\n        kind() { return ObjectMap(this.data, (k,v) => typeof v) },\n        value() { return ObjectMap(this.data, (k,v) => {\n            if (typeof v == 'string') return v\n            else return JSON.stringify(v)\n        })},\n    },\n\n    methods: {\n        handleEdit() { this.editing = true },\n        handleCancel() { this.editing = false; this.new_values = {} },\n        handleSave() {\n            this.editing = false;\n            this.$emit('send', this.send_all ? {...this.data, ...this.new_values} : this.new_values)\n            this.new_values = {}\n        },\n        handleInput(key, ev) { this.new_values[key] = ev.target.value },\n        getBgColor(index) {\n            if (Array.isArray(this.bgColor) && this.bgColor[index]) {\n                return this.bgColor[index];\n            }\n            return this.bgColor || '';\n        }\n    }\n\n}\n</script>",
        "fd_container": "26ee4be0b705b085",
        "fd_cols": 4,
        "fd_rows": 2,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 600,
        "y": 800,
        "wires": [
            [
                "826a24e81c15a009"
            ]
        ]
    },
    {
        "id": "0f7e034cdb57b753",
        "type": "flexdash custom",
        "z": "493d2f30c5ead3e9",
        "name": "custom props",
        "sfc_source": "<!-- Props-table -- Display a simple table of key-value properties\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <!-- title -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span v-if=\"title\" class=\"ml-auto mr-1 mb-1 text-no-wrap\">{{title}}</span>\n    <span class=\"mr-auto\"></span>\n  </v-card-text>\n\n  <!-- table of properties -->\n  <v-table height=\"auto\" style=\"overflow-y:scroll\" v-bind=\"$attrs\">\n    <tbody>\n      <tr v-for=\"(key, ix) in keys\" :key=\"ix\">\n        <td align=\"right\" class=\"px-1\"><b>{{key}}:</b></td>\n        <!-- non-editing -->\n        <td v-if=\"!editing\" class=\"px-2\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\">{{value[key]}}\n        </td>\n        <!-- edit string -->\n        <td v-else-if=\"kind[key]==='string'\" class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit number -->\n        <td v-else-if=\"kind[key]==='number'\" class=\"px-2\">\n          <input type=\"number\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- edit boolean -->\n        <td v-else-if=\"kind[key]==='boolean'\" class=\"px-2\">\n          <input type=\"checkbox\" :checked=\"value[key]\" :tada=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n        <!-- other types: not sure.... -->\n        <td v-else class=\"px-2\">\n          <input type=\"text\" :value=\"value[key]\" @input=\"handleInput(key, $event)\" :style=\"{ color: textColor, backgroundColor: getBgColor(ix) }\"/>\n        </td>\n      </tr>\n    </tbody>\n  </v-table>\n\n  <v-spacer></v-spacer>\n\n  <!-- edit, save, and cancel buttons at the bottom -->\n  <v-card-text class=\"d-flex pa-0 pt-1\">\n    <span class=\"mr-auto\"></span>\n    <!-- edit button (when not editing) -->\n    <v-btn icon class=\"title-btn mr-auto ml-0\" v-if=\"editable && !editing\" @click=\"handleEdit\">\n      <v-icon size=\"small\" icon=\"mdi-pencil\" />\n    </v-btn>\n    <!-- save/cancel buttons (when editing) -->\n    <v-btn icon class=\"title-btn mr-1 ml-0\" v-if=\"editing\" @click=\"handleCancel\">\n      <v-icon size=\"small\" icon=\"mdi-close-thick\" />\n    </v-btn>\n    <v-btn small icon class=\"title-btn mr-auto ml-1\" v-if=\"editing\" @click=\"handleSave\">\n      <v-icon size=\"small\" icon=\"mdi-check-bold\" />\n    </v-btn>\n  </v-card-text>\n</template>\n\n\n<style scoped>\n  .unit {\n    vertical-align: 15%;\n    margin-left: 0.1em;\n  }\n\n  .title-btn {\n    position: relative;\n    top: -4px;\n  }\n\n  /* FIXME: .theme--xxx is no longer present in vuetify 3 */\n  .theme--light .v-btn--icon {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n\n  .theme--dark .v-btn--icon {\n    background-color: rgba(30, 30, 30, 0.6);\n  }\n\n  .theme--light .v-card__text {\n    color: rgba(0, 0, 0, 0.6);\n  }\n\n  .theme--dark .v-card__text {\n    color: rgba(255, 255, 255, 0.7);\n  }\n\n  td input:not([type=checkbox]) {\n    width: 100%;\n    padding: 0px 1px;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background: none;\n    border: 1px solid #888;\n    border-radius: 2px;\n  }\n\n  .v-table {\n    height: 100%;\n    width: 100%\n  }\n</style>\n\n<script scoped>\n  // Map an object to another one through a function that transforms the values\nvar ObjectMap = (o, fn) => Object.fromEntries(Object.entries(o).map(([k, v]) => [k, fn(k, v)]))\n\nexport default {\n    name: 'PropsTable',\n    // help displayed in the UI: the first line is used in the widgets menu and is always shown in\n    // the edit card. Successive lines can be expanded in the card and are markdown-formatted.\n    help: `Display key-value pairs in tabular form.\nIf the \\`fields\\` property is empty the table shows all data field in alphanumeric order.\nIf the \\`fields\\` property is set, the table shows only the listed fields in the order specified.\n\nThe table can be set as editable which allows the user to change the property values.\n\\`send_all\\` controls whether only the edited fields or all fields are sent to the\n\\`output\\` topic.`,\n\n    // properties are inputs to the widget, these can be set to static values or bound to dynamic\n    // data by topic in the FlexDash UI. The type is used to display the appropriate kind of input\n    // field and also to convert data (ex: string to number). Dynamic is used to bind an input\n    // to a data topic right when the widget is created so it animates tight off the bat.\n    props: {\n        title: { type: String, default: '' },\n        data: { type: Object, default: () => ({ \"key1\": \"value1\", \"key2\": \"value2\" }),\n            tip: \"simple key-value pairs to show in table\"},\n        editable: { type: Boolean, default: false, tip: \"allow editing of the table\"},\n        fields: { type: Array, default: () => ['key1', 'key2'],\n            tip: \"fields to show in table in order, show all in sorted order if empty\"},\n        send_all: { type: Boolean, default: false,\n            tip: \"send all fields to topic, not just changed ones\"},\n        textColor: { type: String, default: '', tip: \"text color of the values\" },\n        bgColor: { type: String, default: '', tip: \"background color of the values\" },\n    },\n\n    output: { default: null },\n    emits: ['send'],\n\n    data() { return {\n        editing: false,\n        new_values: {},\n    }},\n\n    computed: {\n        // sort property keys alphabetically\n        keys() {  return this.fields && this.fields.length ? this.fields : Object.keys(this.data).sort() },\n        kind() { return ObjectMap(this.data, (k,v) => typeof v) },\n        value() { return ObjectMap(this.data, (k,v) => {\n            if (typeof v == 'string') return v\n            else return JSON.stringify(v)\n        })},\n    },\n\n    methods: {\n        handleEdit() { this.editing = true },\n        handleCancel() { this.editing = false; this.new_values = {} },\n        handleSave() {\n            this.editing = false;\n            this.$emit('send', this.send_all ? {...this.data, ...this.new_values} : this.new_values)\n            this.new_values = {}\n        },\n        handleInput(key, ev) { this.new_values[key] = ev.target.value },\n        getBgColor(index) {\n            if (Array.isArray(this.bgColor) && this.bgColor[index]) {\n                return this.bgColor[index];\n            }\n            return this.bgColor || '';\n        }\n    }\n\n}\n</script>",
        "fd_container": "26ee4be0b705b085",
        "fd_cols": 4,
        "fd_rows": 2,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 600,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "aba2feebc17ad117",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "pump1 runtimeline fmt",
        "func": "const pump1 = global.get(\"pump1\");\nconst currentTime = msg.payload;\n\n// Status: 0 for stopped, 1 for running\nconst status = pump1.runInd ? 1 : 0;\n\nconst storedTimes = flow.get(\"times\") || [];\nconst storedValues = flow.get(\"values\") || [];\n\n// Check if the pump running status has changed\nconst lastStatus = storedValues[storedValues.length - 1];\nif (status !== lastStatus) {\n    // Add new data point\n    storedTimes.push(currentTime / 1000);\n    storedValues.push(status);\n\n    // Limit the storage to 150 elements and remove the oldest values if necessary\n    if (storedTimes.length > 40) {\n        storedTimes.shift();\n        storedValues.shift();\n    }\n\n    // Update flow variables\n    flow.set(\"times\", storedTimes);\n    flow.set(\"values\", storedValues);\n\n    return { payload: [storedTimes, storedValues] };\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1040,
        "wires": [
            [
                "9948a20e60eaac14"
            ]
        ]
    },
    {
        "id": "0ca435a662521a40",
        "type": "inject",
        "z": "493d2f30c5ead3e9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1060,
        "wires": [
            [
                "aba2feebc17ad117",
                "9e88ba652e1cd1b4",
                "e64caccc98e30a90"
            ]
        ]
    },
    {
        "id": "2958d741a3838476",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "70f95eace6aeb325"
        ],
        "x": 615,
        "y": 520,
        "wires": []
    },
    {
        "id": "5f2ac4ce9c793c98",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "594362fb2ccfb9b4"
        ],
        "x": 615,
        "y": 540,
        "wires": []
    },
    {
        "id": "0a6fd1f43e87049a",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 19",
        "links": [
            "68c0a337793d04b9"
        ],
        "x": 925,
        "y": 480,
        "wires": [
            [
                "cb4a58a854d28b7c"
            ]
        ]
    },
    {
        "id": "70f95eace6aeb325",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 20",
        "links": [
            "2958d741a3838476"
        ],
        "x": 925,
        "y": 500,
        "wires": [
            [
                "1e9c1c3f62556dfb"
            ]
        ]
    },
    {
        "id": "c89ab7ce9c6d04e9",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 21",
        "links": [
            "0bd848786f479f4e"
        ],
        "x": 925,
        "y": 520,
        "wires": [
            [
                "9a49b02bf96cafcf"
            ]
        ]
    },
    {
        "id": "594362fb2ccfb9b4",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 22",
        "links": [
            "5f2ac4ce9c793c98"
        ],
        "x": 925,
        "y": 540,
        "wires": [
            [
                "7cd8ca49e1aff9f3"
            ]
        ]
    },
    {
        "id": "8b728b8f8bda683d",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "7b08c01c91d25341"
        ],
        "x": 615,
        "y": 560,
        "wires": []
    },
    {
        "id": "f2aceacafb3777a2",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 23",
        "links": [
            "bf3928f1c1cf14f6"
        ],
        "x": 925,
        "y": 400,
        "wires": [
            [
                "f452a54dcc172f1e"
            ]
        ]
    },
    {
        "id": "5816d7ca4124487c",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 24",
        "links": [
            "5383910989fc96df"
        ],
        "x": 925,
        "y": 420,
        "wires": [
            [
                "ccc8eed15f2a9179"
            ]
        ]
    },
    {
        "id": "fbc3da0d80a74c32",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 25",
        "links": [
            "702d6b887a5f9e8e"
        ],
        "x": 925,
        "y": 460,
        "wires": [
            [
                "ce1496755502efd8"
            ]
        ]
    },
    {
        "id": "7b08c01c91d25341",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 26",
        "links": [
            "8b728b8f8bda683d"
        ],
        "x": 925,
        "y": 440,
        "wires": [
            [
                "15090298114a7455"
            ]
        ]
    },
    {
        "id": "0bd848786f479f4e",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "c89ab7ce9c6d04e9"
        ],
        "x": 615,
        "y": 580,
        "wires": []
    },
    {
        "id": "e57b170711d4cd0d",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "watching tanks",
        "func": "// Get tank data objects\nlet t1 = global.get('tank1') || {};\nlet t2 = global.get('tank2') || {};\nconst lt1 = context.get(\"t1PrevAlms\")||[] // || \"\";\nconst lt2 = context.get(\"t2PrevAlms\")||[]\n//\"lt1\", lt1)\n\nlet aalm, balm\nlet alarmMap = [\"HiLvlSD\", 'HiLvlAlm', 'LowLvlAlm', 'LowLvlSD']\nfunction getCurrentTimestamp() {\n    let now = new Date();\n    let formattedDate = now.toLocaleString(\"en-US\", {\n        timeZone: \"America/Chicago\",\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\"\n    });\n    return formattedDate + \" CDT\";\n}\n\naalm= t1.LvlAlms.some(value => value === true);\nbalm= t2.LvlAlms.some(value => value === true);\n\n\nlet txt\n\n\n\n\nfor (let i = 0; i < t1.LvlAlms.length; i++) {\n\n    if (t1.LvlAlms[i] === true && lt1[i] === false) {\n\n        txt = \"tank 1 \" + alarmMap[i] + ' active. Tank Level is '+ t1.Level+'ft. '+ t1.LvlAlmSP[i] + `ft is alarm setpoint`\n        msg.topic = 't1 alm';\n        msg.payload = txt;\n        msg.timeStamp = getCurrentTimestamp();\n        node.send(msg);   \n    }\n    if (lt1[i] === true && t1.LvlAlms[i] === false){\n\n        txt = \"tank 1 \" + alarmMap[i] + ' cleared. Tank Level is ' + t1.Level + 'ft. ' + t1.LvlAlmSP[i] + `ft is alarm setpoint`\n        msg.topic = 't1 alm';\n        msg.payload = txt;\n        msg.timeStamp = getCurrentTimestamp();\n        node.send(msg);\n    }\n    \n    lt1[i] = t1.LvlAlms[i]\n}\ncontext.set(\"t1PrevAlms\", lt1)\n\nfor (let i = 0; i < t2.LvlAlms.length; i++) {\n    if (t2.LvlAlms[i] === true && !lt2[i]) {\n        txt = \"tank 2 \" + alarmMap[i] + ' active. Tank Level is ' + t2.Level + 'ft. ' + t2.LvlAlmSP[i] + `ft is alarm setpoint`\n        msg.topic = 't2 alm';\n        msg.payload = txt;\n        msg.timeStamp = getCurrentTimestamp();\n        node.send(msg);\n        //        context.set(\"lt1\", t1.LvlAlms);} \n    }\n    if (lt2[i] === true && !t2.LvlAlms[i]) {\n        txt = \"tank 2 \" + alarmMap[i] + ' cleared. Tank Level is ' + t2.Level + 'ft. ' + t2.LvlAlmSP[i] + `ft is alarm setpoint`\n        msg.topic = 't2 alm';\n        msg.payload = txt;\n        msg.timeStamp = getCurrentTimestamp();\n        node.send(msg);\n        \n    }\n    \n    lt2[i] = t2.LvlAlms[i]\n}\ncontext.set(\"t2PrevAlms\", lt2)\n\n\nreturn; \n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"t1PrevAlms\", [false, false, false, false ])\ncontext.set(\"t2PrevAlms\", [false, false, false, false ])",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 220,
        "wires": [
            [
                "1b41ae6a62afb50a"
            ]
        ]
    },
    {
        "id": "1b41ae6a62afb50a",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "event and alarm log functions",
        "func": "// // Get existing message log array from the flow variable\n// let msgLog = flow.get('msgLog') || [];\n// let logEntry\n// // Format the log entry\n// if (msg.topic === \"t1 alm\" || msg.topic=== \"t2 alm\"){\n\n//     logEntry = '\\n'+ msg.timeStamp +' - '+ msg.payload;\n// } else {\n//     logEntry = '\\n' + msg.payload;\n// }\n// // Add the log entry to the message log array\n// msgLog.push(logEntry);\n\n// // If the message log array exceeds 80 entries, remove the oldest entry\n// if (msgLog.length > 80) {\n//     msgLog.shift();\n// }\n\n// // Save the updated message log array to the flow variable\n// flow.set('msgLog', msgLog);\n\n// // Convert the message log array to a string and send it as the payload\n// msg.payload = msgLog.join('');\n// return msg;\n// Get existing message log array from the flow variable\nlet msgLog = flow.get('msgLog') || [];\nlet logEntry;\n\n// Format the log entry based on the topic\nif (msg.topic === \"t1 alm\" || msg.topic === \"t2 alm\") {\n    logEntry = '\\n' + msg.timeStamp + ' - ' + msg.payload;\n} else {\n    logEntry = '\\n' + msg.payload;\n}\nmsgLog.push(logEntry);\n\n// Add the log entry to the message log array\n// let d = \"04/21/2023\"\n// let ct = 0\n// for (let i = 0; i < msgLog.length;  i++){\n//       msgLog[i].indexOf(d)>-1 ? ct = i : ' '\n// }\n// msgLog = msgLog.slice(0, ct)\n\nflow.set('msgLog', msgLog);\n\n\n\n\n\n// Send the latest 50 log entries to the dashboard\nmsg.payload = msgLog.slice(-50).join('');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 220,
        "wires": [
            [
                "765c8ec72d128839",
                "20913fe1354e821a"
            ]
        ]
    },
    {
        "id": "9e88ba652e1cd1b4",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "pump2 runtimeline fmt",
        "func": "const pump2 = global.get(\"pump2\");\nconst currentTime = msg.payload;\n\n// Status: 0 for stopped, 1 for running\nconst status = pump2.runInd ? 1 : 0;\n\nconst storedTimes = flow.get(\"p2times\") || [];\nconst storedValues = flow.get(\"p2values\") || [];\n\n// Check if the pump running status has changed\nconst lastStatus = storedValues[storedValues.length - 1];\nif (status !== lastStatus) {\n    // Add new data point\n    storedTimes.push(currentTime / 1000);\n    storedValues.push(status);\n\n    // Limit the storage to 150 elements and remove the oldest values if necessary\n    if (storedTimes.length > 40) {\n        storedTimes.shift();\n        storedValues.shift();\n    }\n\n    // Update flow variables\n    flow.set(\"p2times\", storedTimes);\n    flow.set(\"p2values\", storedValues);\n\n    return { payload: [storedTimes, storedValues] };\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1080,
        "wires": [
            [
                "63097abca0a9c1a0"
            ]
        ]
    },
    {
        "id": "3da1c0b1c3c9aa73",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "9f3e4c3beb6acffe"
        ],
        "x": 685,
        "y": 580,
        "wires": []
    },
    {
        "id": "b5415edd3b9d6bea",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "9da4ff8d05a4ab6c"
        ],
        "x": 685,
        "y": 600,
        "wires": []
    },
    {
        "id": "394759546711e956",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "034993ae905f40d2"
        ],
        "x": 685,
        "y": 620,
        "wires": []
    },
    {
        "id": "838211b7cffdb4e0",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "2e7c7a8c7b1485e1"
        ],
        "x": 685,
        "y": 640,
        "wires": []
    },
    {
        "id": "8681ba2047eb35fd",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "P1-P2 thermal conditions",
        "func": "let p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\nlet i1 = global.get('inlet') || {}\n\nmsg.payload = p1.inTemp.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = p1.inTemp.HiAlmSP\nmsg.high_threshold = p1.inTemp.hiSDsp\nmsg.title = ' P1 Suction Temp'\nmsg.unit = \"\\u00B0C\";\nmsg.popup_info = ` HiAlarmSP : ${p1.inTemp.HiAlmSP} , hiSDsp : ${p1.inTemp.hiSDsp} `\nnode.send([msg])\n\n\nmsg.payload = p1.outTemp.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = p1.outTemp.HiAlmSP\nmsg.high_threshold = p1.outTemp.hiSDsp\nmsg.title = ' P1 Outflow Temp'\nmsg.unit = \"\\u00B0C\"; //+\"C\"\nmsg.popup_info = ` HiAlarmSP : ${p1.outTemp.HiAlmSP} , hiSDsp : ${p1.outTemp.hiSDsp} `\nnode.send([null,msg])\n\nmsg.payload = p1.oilTemp.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = p1.oilTemp.HiAlmSP\nmsg.high_threshold = p1.oilTemp.hiSDsp\nmsg.title = 'P1 Oil Temp'\nmsg.unit = \"\\u00B0C\";\nmsg.popup_info = ` HiAlarmSP : ${p1.oilTemp.HiAlmSP} , hiSDsp : ${p1.oilTemp.hiSDsp} `\nnode.send([null, null, msg])\n\nmsg.payload = p2.inTemp.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'green-accent-3'//'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = p2.inTemp.HiAlmSP\nmsg.high_threshold = p2.inTemp.hiSDsp\nmsg.title = 'P2 Suction Temp'\nmsg.unit = \"\\u00B0C\";\nmsg.popup_info = ` HiAlarmSP : ${p2.inTemp.HiAlmSP} , hiSDsp : ${p2.inTemp.hiSDsp} `\nnode.send([null, null, null, msg])\n\nmsg.payload = p2.outTemp.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'green-accent-3'//'blue-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = p2.outTemp.HiAlmSP\nmsg.high_threshold = p2.outTemp.hiSDsp\nmsg.title = 'P2 Outflow Temp'\nmsg.unit = \"\\u00B0C\";\nmsg.popup_info = ` HiAlarmSP : ${p2.outTemp.HiAlmSP} , hiSDsp : ${p2.outTemp.hiSDsp} `\nnode.send([null, null, null, null, msg])\n\nmsg.payload = p2.oilTemp.val\nmsg.color = 'green-accent-3'\nmsg.low_color = 'green-accent-3'\nmsg.hi_color = 'pink-accent-3'\nmsg.low_threshold = p2.oilTemp.HiAlmSP\nmsg.high_threshold = p2.oilTemp.hiSDsp\nmsg.title = 'P2 Oil Temp'\nmsg.unit = \"\\u00B0C\";\nmsg.popup_info = ` HiAlarmSP : ${p2.oilTemp.HiAlmSP} , hiSDsp : ${p2.oilTemp.hiSDsp} `\nnode.send([null, null, null, null, null, msg])\n\n\n\nmsg.payload = i1.valve\nmsg.title = 'Inlet Valve'\nnode.send([null, null, null, null, null, null, msg])\n\nmsg.payload = i1.plPSI\nmsg.title = 'Pipeline Pressure'\nmsg.unit= \"psi\"\nnode.send([null, null, null, null, null, null, null, msg])\n\n\n\n\nreturn;\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 660,
        "wires": [
            [
                "3da1c0b1c3c9aa73"
            ],
            [
                "b5415edd3b9d6bea"
            ],
            [
                "394759546711e956"
            ],
            [
                "838211b7cffdb4e0"
            ],
            [
                "99fc3262620074cb"
            ],
            [
                "8bf8356490086537"
            ],
            [
                "1ffac796655e4a38"
            ],
            [
                "3b47969bb8b3ecb6"
            ]
        ]
    },
    {
        "id": "a7d0c9f879632c10",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 27",
        "links": [
            "f8e158f05e225708"
        ],
        "x": 275,
        "y": 660,
        "wires": [
            [
                "8681ba2047eb35fd"
            ]
        ]
    },
    {
        "id": "99fc3262620074cb",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "a6f6d1ecb8e63a51"
        ],
        "x": 685,
        "y": 660,
        "wires": []
    },
    {
        "id": "8bf8356490086537",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "44bb2e94d22e679a"
        ],
        "x": 685,
        "y": 680,
        "wires": []
    },
    {
        "id": "1ffac796655e4a38",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 18",
        "mode": "link",
        "links": [],
        "x": 685,
        "y": 700,
        "wires": []
    },
    {
        "id": "3b47969bb8b3ecb6",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 19",
        "mode": "link",
        "links": [],
        "x": 685,
        "y": 720,
        "wires": []
    },
    {
        "id": "9f3e4c3beb6acffe",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 28",
        "links": [
            "3da1c0b1c3c9aa73"
        ],
        "x": 925,
        "y": 580,
        "wires": [
            [
                "685d937a93327d76"
            ]
        ]
    },
    {
        "id": "9da4ff8d05a4ab6c",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 29",
        "links": [
            "b5415edd3b9d6bea"
        ],
        "x": 925,
        "y": 600,
        "wires": [
            [
                "9f86a61717bb6c31"
            ]
        ]
    },
    {
        "id": "034993ae905f40d2",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 30",
        "links": [
            "394759546711e956"
        ],
        "x": 925,
        "y": 620,
        "wires": [
            [
                "2bb5f95fbe2972ec"
            ]
        ]
    },
    {
        "id": "2e7c7a8c7b1485e1",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 31",
        "links": [
            "838211b7cffdb4e0"
        ],
        "x": 925,
        "y": 640,
        "wires": [
            [
                "3781d1e6a702107d"
            ]
        ]
    },
    {
        "id": "a6f6d1ecb8e63a51",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 32",
        "links": [
            "99fc3262620074cb"
        ],
        "x": 925,
        "y": 660,
        "wires": [
            [
                "222e3ff24a1e6618"
            ]
        ]
    },
    {
        "id": "44bb2e94d22e679a",
        "type": "link in",
        "z": "493d2f30c5ead3e9",
        "name": "link in 33",
        "links": [
            "8bf8356490086537"
        ],
        "x": 925,
        "y": 680,
        "wires": [
            [
                "8bf0103d47f9063c"
            ]
        ]
    },
    {
        "id": "60c3223dc144daf7",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "watching pumps",
        "func": "// Get pump data objects\nlet p1 = global.get('pump1') || {};\nlet p2 = global.get('pump2') || {};\n\n// Define the previous alarm states and runInd status\nlet prevP1Alarms = context.get('prevP1Alarms') || Array(2).fill(false);\nlet prevP2Alarms = context.get('prevP2Alarms') || Array(2).fill(false);\nlet prevP1RunInd = context.get('prevP1RunInd') || false;\nlet prevP2RunInd = context.get('prevP2RunInd') || false;\n\nfunction getCurrentTimestamp() {\n    let now = new Date();\n    let formattedDate = now.toLocaleString(\"en-US\", {\n        timeZone: \"America/Chicago\",\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n    });\n    return formattedDate + \" CDT\";\n}\n\n    function sendAlarmMessage(pumpId, alarmIndex, alarmState, pumpData) {\n        const alarmLabel = [\n            \"Suction PSI Hi SD\", \"Suction PSI Hi Alarm\",\n            \"Discharge PSI Hi SD\", \"Discharge PSI Hi Alarm\",\n            \"Suction Temperature Hi SD\", \"Suction Temperature Hi Alarm\",\n            \"Discharge Temperature Hi SD\", \"Discharge Temperature Hi Alarm\",\n            \"Oil Temperature Hi SD\", \"Oil Temperature Hi Alarm\"\n        ][alarmIndex];\n        const alarm1SP = [\n            p1.suctPSI.hiSDsp, p1.suctPSI.HiAlmSP,\n            p1.discPSI.hiSDsp, p1.discPSI.HiAlmSP,\n            p1.inTemp.hiSDsp, p1.inTemp.HiAlmSP,\n            p1.outTemp.hiSDsp, p1.outTemp.HiAlmSP,\n            p1.oilTemp.hiSDsp, p1.oilTemp.HiAlmSP,\n        ][alarmIndex];\n        const alarm2SP = [\n            p2.suctPSI.hiSDsp, p2.suctPSI.HiAlmSP,\n            p2.discPSI.hiSDsp, p2.discPSI.HiAlmSP,\n            p2.inTemp.hiSDsp,  p2.inTemp.HiAlmSP,\n            p2.outTemp.hiSDsp, p2.outTemp.HiAlmSP,\n            p2.oilTemp.hiSDsp, p2.oilTemp.HiAlmSP,\n            ][alarmIndex];\n        const pumpValIndexMapping = {\n            0: 0, 1: 0,\n            2: 1, 3: 1,\n            4: 2, 5: 2,\n            6: 3, 7: 3,\n            8: 4, 9: 4\n        };\n\n        const pumpValIndex = pumpValIndexMapping[alarmIndex];\n        const pumpVal = pumpValues[pumpValIndex];\n\n            //const logEvent = `${getCurrentTimestamp()} - Pump ${pumpId} ${alarmLabel}: ${alarmState ? `triggered. Current value is ${pumpVal}, Alarm setpoint is ${pumpId === 1 ? alarm1SP[alarmIndex] : alarm2SP[alarmIndex]}` : `cleared. Current value is ${pumpVal}. Alarm setpoint is ${pumpId === 1 ? alarm1SP[alarmIndex] : alarm2SP[alarmIndex]}`}`;\n            const logEvent = `${getCurrentTimestamp()} - Pump ${pumpId} ${alarmLabel}: ${alarmState ? `triggered. Current value is ${pumpVal}, Alarm setpoint is ${pumpId === 1 ? alarm1SP : alarm2SP}` : `cleared. Current value is ${pumpVal}. Alarm setpoint is ${pumpId === 1 ? alarm1SP : alarm2SP}`}`;\n\n        const newMsg = {\n            topic: `p${pumpId}Alm_${alarmIndex}`,\n            payload: logEvent\n        };\n        node.send(newMsg);\n    }\n  \n\nfunction sendRunStatusMessage(pumpId, runStatus) {\n    const tankId = pumpId === '1' ? 'tank1' : 'tank2';\n    const tank = global.get(tankId);\n    const logEvent = `${getCurrentTimestamp()} - Pump ${pumpId}: ${runStatus ? ` Started Running with Tank Level at ${tank.Level} ft.  SetPoint:  ${pumpId === 1 ? p1.opSP.stop : p2.opSP.stop} ft` : `Stopped with Tank Level at ${tank.Level.toFixed(2)} ft. SetPoint: ${pumpId === 1 ? p1.opSP.stop : p2.opSP.stop} ft`}`;\n\n    const newMsg = {\n        topic: `p${pumpId}RunStatus`,\n        payload: logEvent\n    };\n    node.send(newMsg);\n}\nlet pumpValues\n\nfunction checkAlarmsAndRunStatus(pumpId, prevAlarms, pumpData, prevRunInd) {\n    let alarms = [\n        pumpData.suctPSI.hiSD, pumpData.suctPSI.HiAlm,\n        pumpData.discPSI.hiSD, pumpData.discPSI.HiAlm,\n        pumpData.inTemp.hiSD, pumpData.inTemp.HiAlm,\n        pumpData.outTemp.hiSD, pumpData.outTemp.HiAlm,\n        pumpData.oilTemp.hiSD, pumpData.oilTemp.HiAlm,\n    ];\n    pumpValues = [\n        pumpData.suctPSI.val,\n        pumpData.discPSI.val,\n        pumpData.inTemp.val,\n        pumpData.outTemp.val,\n        pumpData.oilTemp.val,\n    ]\n    for (let i = 0; i < alarms.length; i++) {\n        if (prevAlarms[i] !== alarms[i]) {\n            sendAlarmMessage(pumpId, i, alarms[i], pumpData);\n        }\n    }\n    context.set(`prevP${pumpId}Alarms`, alarms);\n   // node.warn(`prevRunInd: ${prevRunInd}, pumpData.runInd: ${pumpData.runInd}`);\n    if (prevRunInd !== pumpData.runInd) {\n      //  node.warn(`Status changed! Prev: ${prevRunInd}, New: ${pumpData.runInd}`);\n        sendRunStatusMessage(pumpId, pumpData.runInd);\n    }\n    context.set(`prevP${pumpId}RunInd`, pumpData.runInd);\n  //  node.warn(`After set, prevRunInd: ${context.get(`prevP${pumpId}RunInd`)}`);\n\n}\n\ncheckAlarmsAndRunStatus(\"1\", prevP1Alarms, p1, prevP1RunInd);\ncheckAlarmsAndRunStatus(\"2\", prevP2Alarms, p2, prevP2RunInd);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "1b41ae6a62afb50a",
                "e496bb85b269d7b4"
            ]
        ]
    },
    {
        "id": "8a58ead75eb38b6f",
        "type": "flexdash custom",
        "z": "493d2f30c5ead3e9",
        "title": "Inlet Valve",
        "import_map": {},
        "sfc_source": "<template>\n  <div>\n    <svg :fill=\"color\" height=\"65px\" width=\"70px\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 491.52 491.52\" xml:space=\"preserve\">\n      <g>\n        <g>\n          <path d=\"M471.04,286.72h-40.96v-20.48c0-11.325-9.155-20.48-20.48-20.48h-61.44c-11.325,0-20.48,9.155-20.48,20.48v20.48H307.2\n          V204.8c0-11.325-9.155-20.48-20.48-20.48h-20.48v-40.96h81.92c11.325,0,20.48-9.155,20.48-20.48V20.48\n          C368.64,9.155,359.485,0,348.16,0h-81.92v122.88c0-11.325-9.155-20.48-20.48-20.48c-11.325,0-20.48,9.155-20.48,20.48V0h-81.92\n          c-11.325,0-20.48,9.155-20.48,20.48v102.4c0,11.325,9.155,20.48,20.48,20.48h81.92v40.96H204.8c-11.325,0-20.48,9.155-20.48,20.48\n          v81.92h-20.48v-20.48c0-11.325-9.155-20.48-20.48-20.48H81.92c-11.325,0-20.48,9.155-20.48,20.48v20.48H20.48\n          C9.155,286.72,0,295.875,0,307.2v122.88c0,11.325,9.155,20.48,20.48,20.48h40.96v20.48c0,11.325,9.155,20.48,20.48,20.48h61.44\n          c11.325,0,20.48-9.155,20.48-20.48v-20.48h163.84v20.48c0,11.325,9.155,20.48,20.48,20.48h61.44c11.325,0,20.48-9.155,20.48-20.48\n          v-20.48h40.96c11.325,0,20.48-9.155,20.48-20.48V307.2C491.52,295.875,482.365,286.72,471.04,286.72z M122.88,307.2v122.88v20.48\n          H102.4v-20.48V307.2v-20.48h20.48V307.2z M389.12,307.2v122.88v20.48h-20.48v-20.48V307.2v-20.48h20.48V307.2z\" />   \n        </g>\n      </g>\n    </svg>\n  </div>\n</template>\n<script>\nexport default {\n  name: \" SimpleShape\", props: { color: { type: String, default: \"#00000\" , }, }, }; </script>\n\n            <style scoped>\n              .animated-shape {\n                animation: scale 2s infinite alternate;\n              }\n\n              @keyframes scale {\n                from {\n                  transform: scale(1);\n                }\n\n                to {\n                  transform: scale(1.2);\n                }\n              }\n            </style>",
        "fd_container": "05e23e721857bba2",
        "fd_cols": 2,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 740,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "e64caccc98e30a90",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "function 19",
        "func": "let i1= global.get('inlet')\nif (i1.valve === 'open'){\n    msg.color = \"#13D691\"\n}else {\n    msg.color = \"#D3136C\"\n}\n\nmsg.topic = ''\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1120,
        "wires": [
            [
                "8a58ead75eb38b6f"
            ]
        ]
    },
    {
        "id": "866652ed297020bb",
        "type": "inject",
        "z": "493d2f30c5ead3e9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "color",
                "v": "#D3136C",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "8a58ead75eb38b6f"
            ]
        ]
    },
    {
        "id": "20913fe1354e821a",
        "type": "link out",
        "z": "493d2f30c5ead3e9",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "f4f998912732e90d"
        ],
        "x": 805,
        "y": 260,
        "wires": []
    },
    {
        "id": "685d937a93327d76",
        "type": "fd-gauge",
        "z": "493d2f30c5ead3e9",
        "fd_container": "d02343c5247cacbd",
        "fd_cols": "4",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "",
        "title": "Gauge",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 90,
        "min": 0,
        "max": 120,
        "color": "green",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 1030,
        "y": 580,
        "wires": []
    },
    {
        "id": "9f86a61717bb6c31",
        "type": "fd-gauge",
        "z": "493d2f30c5ead3e9",
        "fd_container": "d02343c5247cacbd",
        "fd_cols": "4",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "",
        "title": "Gauge",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 90,
        "min": 0,
        "max": 130,
        "color": "green",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 1090,
        "y": 600,
        "wires": []
    },
    {
        "id": "2bb5f95fbe2972ec",
        "type": "fd-gauge",
        "z": "493d2f30c5ead3e9",
        "fd_container": "d02343c5247cacbd",
        "fd_cols": "4",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "",
        "title": "Gauge",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 90,
        "min": 0,
        "max": 150,
        "color": "green",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 1030,
        "y": 620,
        "wires": []
    },
    {
        "id": "3781d1e6a702107d",
        "type": "fd-gauge",
        "z": "493d2f30c5ead3e9",
        "fd_container": "b6c0f44ff103965b",
        "fd_cols": "4",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "",
        "title": "Gauge",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 90,
        "min": 0,
        "max": 120,
        "color": "green",
        "low_color": "green",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 1030,
        "y": 640,
        "wires": []
    },
    {
        "id": "222e3ff24a1e6618",
        "type": "fd-gauge",
        "z": "493d2f30c5ead3e9",
        "fd_container": "b6c0f44ff103965b",
        "fd_cols": "4",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "",
        "title": "Gauge",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 90,
        "min": 0,
        "max": 130,
        "color": "green",
        "low_color": "green",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 1090,
        "y": 660,
        "wires": []
    },
    {
        "id": "8bf0103d47f9063c",
        "type": "fd-gauge",
        "z": "493d2f30c5ead3e9",
        "fd_container": "b6c0f44ff103965b",
        "fd_cols": "4",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "",
        "title": "Gauge",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 90,
        "min": 0,
        "max": 150,
        "color": "green",
        "low_color": "green-accent-3",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 1030,
        "y": 680,
        "wires": []
    },
    {
        "id": "765c8ec72d128839",
        "type": "fd-text-view",
        "z": "493d2f30c5ead3e9",
        "fd_container": "05e23e721857bba2",
        "fd_cols": "8",
        "fd_rows": "1",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "",
        "title": "Event Journal",
        "popup_info": "",
        "text": "",
        "editable": false,
        "wrap": false,
        "autoscroll": true,
        "x": 880,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ccc8eed15f2a9179",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p1 suct ",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1090,
        "y": 420,
        "wires": []
    },
    {
        "id": "ce1496755502efd8",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p1 dischg",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1030,
        "y": 460,
        "wires": []
    },
    {
        "id": "1e9c1c3f62556dfb",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p2 suct",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1090,
        "y": 500,
        "wires": []
    },
    {
        "id": "7cd8ca49e1aff9f3",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p2 dischg",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1050,
        "y": 540,
        "wires": []
    },
    {
        "id": "cb4a58a854d28b7c",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": 6,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p2 run",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1040,
        "y": 480,
        "wires": []
    },
    {
        "id": "15090298114a7455",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p1 Speed",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "9a49b02bf96cafcf",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p2 speed ",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1030,
        "y": 520,
        "wires": []
    },
    {
        "id": "f452a54dcc172f1e",
        "type": "fd-stat",
        "z": "493d2f30c5ead3e9",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 6,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "p1 run",
        "title": "Stat",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "",
        "high_regexp": "",
        "chip": false,
        "iso_prefix": true,
        "precision": 3,
        "zoom": 1,
        "x": 1020,
        "y": 400,
        "wires": []
    },
    {
        "id": "b52b75adc1d1ae63",
        "type": "fd-time-plot",
        "z": "493d2f30c5ead3e9",
        "fd_container": "172dcff0e361032b",
        "fd_cols": "12",
        "fd_rows": "5",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Tank Time Plot",
        "title": "Tank Time Plot",
        "popup_info": "",
        "data": null,
        "labels": [],
        "colors": [],
        "axes": [],
        "widths": [],
        "points": [
            true
        ],
        "span_gaps": [
            true,
            true
        ],
        "left_unit": "",
        "left_min": null,
        "left_max": null,
        "left_decimals": 1,
        "left_isoprefix": false,
        "left_log": false,
        "right_unit": "",
        "right_min": null,
        "right_max": null,
        "right_decimals": 1,
        "right_isoprefix": false,
        "right_log": false,
        "reverse_legend": false,
        "max_points": null,
        "x": 740,
        "y": 140,
        "wires": []
    },
    {
        "id": "e1bf9a9d5e68c697",
        "type": "fd-spark-line",
        "z": "493d2f30c5ead3e9",
        "fd_container": "378776577a63304a",
        "fd_cols": "4",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "tank2",
        "title": "Spark Line",
        "popup_info": "",
        "value": 0,
        "color": "green-darken-3",
        "fill_color": "",
        "text_color": "",
        "show_value": false,
        "unit": "Ft",
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "a1a9a0ccbe7f5358",
        "type": "fd-spark-line",
        "z": "493d2f30c5ead3e9",
        "fd_container": "26ee4be0b705b085",
        "fd_cols": "4",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "tank1",
        "title": "Spark Line",
        "popup_info": "",
        "value": 0,
        "color": "blue",
        "fill_color": "",
        "text_color": "",
        "show_value": false,
        "unit": "Ft",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "bd6cd674cc9a05c6",
        "type": "fd-number-field",
        "z": "493d2f30c5ead3e9",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "pump1.opSP.start",
        "fd_loopback": true,
        "name": "P1 start SP",
        "title": "Start Level",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "value": null,
        "align": "center",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "b49152bc426fd9d4"
            ]
        ]
    },
    {
        "id": "1426d0bb3b43ca1d",
        "type": "fd-number-field",
        "z": "493d2f30c5ead3e9",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "pump1.opSP.stop",
        "fd_loopback": true,
        "name": "P1 stop SP",
        "title": "Stop Level",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "value": null,
        "align": "center",
        "x": 610,
        "y": 340,
        "wires": [
            [
                "b49152bc426fd9d4"
            ]
        ]
    },
    {
        "id": "ed81b2c984fe008c",
        "type": "fd-number-field",
        "z": "493d2f30c5ead3e9",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "pump2.opSP.start",
        "fd_loopback": true,
        "name": "P2 start SP",
        "title": "Start Level",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "value": null,
        "align": "center",
        "x": 610,
        "y": 360,
        "wires": [
            [
                "b49152bc426fd9d4"
            ]
        ]
    },
    {
        "id": "f21df0b6090b1ecb",
        "type": "fd-number-field",
        "z": "493d2f30c5ead3e9",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "pump2.opSP.stop",
        "fd_loopback": true,
        "name": "P2 stop SP",
        "title": "Stop Level",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "value": null,
        "align": "center",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "b49152bc426fd9d4"
            ]
        ]
    },
    {
        "id": "40d6a7c5836eba11",
        "type": "fd-push-button",
        "z": "493d2f30c5ead3e9",
        "fd_container": "05e23e721857bba2",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "reset",
        "fd_loopback": true,
        "name": "reset",
        "title": "Alarm Reset",
        "popup_info": "",
        "enabled": true,
        "color": "light-blue-lighten-1",
        "output_value": true,
        "icon": null,
        "x": 630,
        "y": 420,
        "wires": [
            [
                "b49152bc426fd9d4",
                "b293435c32ac21f7"
            ]
        ]
    },
    {
        "id": "9948a20e60eaac14",
        "type": "fd-timeline-plot",
        "z": "493d2f30c5ead3e9",
        "fd_container": "8683b3e527fd6e62",
        "fd_cols": 6,
        "fd_rows": 2,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "",
        "title": "Pump1 Energy Timeline",
        "popup_info": "",
        "options": {},
        "data": null,
        "colors": {
            "0": "black",
            "1": "blue"
        },
        "labels": [
            "run indication"
        ],
        "gradient": null,
        "show_values": true,
        "click": true,
        "x": 750,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "63097abca0a9c1a0",
        "type": "fd-timeline-plot",
        "z": "493d2f30c5ead3e9",
        "fd_container": "66ad283dd0e0aaa3",
        "fd_cols": "6",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "",
        "title": "Pump2 Energy Timeline",
        "popup_info": "",
        "options": {},
        "data": null,
        "colors": {
            "0": "black",
            "1": "green"
        },
        "labels": [
            "run indicator"
        ],
        "gradient": null,
        "show_values": true,
        "click": true,
        "x": 750,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "afc0a544f230e75e",
        "type": "function",
        "z": "493d2f30c5ead3e9",
        "name": "function 45",
        "func": "let today = new Date();\nlet yesterday = new Date(today);\nyesterday.setDate(today.getDate() - 1);\n\n// Handle cases where the current date is the first day of the month\nif (today.getDate() === 1) {\n    yesterday.setMonth(today.getMonth());\n    yesterday.setDate(0);\n}\n\nfunction formatDate(date) {\n    let month = (date.getMonth() + 1).toString().padStart(2, '0');\n    let day = date.getDate().toString().padStart(2, '0');\n    let year = date.getFullYear().toString();\n    return month + '/' + day + '/' + year;\n}\n\n\nlet specifiedDate = formatDate(today); // Call a function to format the date\n\n// Rest of the code to filter the log entries\nlet msgLog = flow.get('msgLog');\nmsgLog = msgLog.filter(entry => entry.indexOf(specifiedDate) > -1);\n\nflow.set('msgLog', msgLog);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ee6d3a7f59445b11",
        "type": "inject",
        "z": "493d2f30c5ead3e9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 60,
        "wires": [
            [
                "afc0a544f230e75e"
            ]
        ]
    },
    {
        "id": "4d1558734db9242a",
        "type": "fd-gauge",
        "z": "493d2f30c5ead3e9",
        "fd_container": "",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "",
        "title": "Gauge",
        "popup_info": null,
        "value": null,
        "unit": "",
        "arc": 90,
        "min": 0,
        "max": 100,
        "color": "green",
        "low_color": "blue",
        "high_color": "pink",
        "low_threshold": null,
        "high_threshold": null,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 1290,
        "y": 840,
        "wires": []
    },
    {
        "id": "525be129d7d9528e",
        "type": "ui_button",
        "z": "1f913ab9df6ea05a",
        "name": "reset",
        "group": "7b451183ad23e7c4",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "{{label}}",
        "tooltip": "",
        "color": "{{txt_color}}",
        "bgcolor": "{{bg_color}}",
        "className": "",
        "icon": "fa-alarm-exclamation",
        "payload": "reset",
        "payloadType": "str",
        "topic": "payload",
        "topicType": "msg",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "c00b1e1e61a6d3eb"
            ]
        ]
    },
    {
        "id": "85f603ebd9ba9e87",
        "type": "inject",
        "z": "1f913ab9df6ea05a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "check",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 80,
        "wires": [
            [
                "c00b1e1e61a6d3eb"
            ]
        ]
    },
    {
        "id": "c00b1e1e61a6d3eb",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 22",
        "func": "const reset = global.get('reset')\nif (msg.topic === 'reset' || reset){\n    global.set('reset', true)\n    msg.topic = ''\n    \n    msg.bg_color = \"grey\"\n    msg.txt_color = \"red\"    \n    msg.payload = ''\n    node.send(msg)\n}\nif (msg.topic === 'check' && !reset) {\n    msg.topic = ''\n    msg.label= \"Alarm Reset\"\n    msg.bg_color = \"#0BEDDA\"\n    msg.txt_color = \"black\"\n    msg.payload = ''\n    node.send(msg)\n}\n\n\nreturn ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            [
                "525be129d7d9528e"
            ]
        ]
    },
    {
        "id": "740c025bf16d4f1f",
        "type": "debug",
        "z": "1f913ab9df6ea05a",
        "name": "debug 139",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 280,
        "wires": []
    },
    {
        "id": "591ff5e3a0a0d89f",
        "type": "ui_chart",
        "z": "1f913ab9df6ea05a",
        "name": "TANK CHART",
        "group": "7b451183ad23e7c4",
        "order": 5,
        "width": 12,
        "height": 9,
        "label": "{{label}}",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Data Processing",
        "dot": false,
        "ymin": "{{ymin}}",
        "ymax": "{{ymax}}",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#31bfc9",
            "#19d416",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 720,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "470b1e33673ac641",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 23",
        "func": "let t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\nlet sim = global.get('simRun') || true\n\nmsg.topic = \"tank1\"\nmsg.payload = t1.Level\nmsg.ymax = 35\nmsg.ymin = 0\nmsg.label = \"Tank Levels\" \nnode.send(msg)\n\nmsg.topic = \"tank2\"\nmsg.payload = t2.Level\nmsg.ymax = 35\nmsg.ymin = 0\nmsg.label = \"Tank Levels\" \nnode.send(msg)\n\n\n\n\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 180,
        "wires": [
            [
                "591ff5e3a0a0d89f"
            ]
        ]
    },
    {
        "id": "8d9ff1951fb7ca90",
        "type": "inject",
        "z": "1f913ab9df6ea05a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "470b1e33673ac641",
                "259f0f5117967ea0",
                "eeee42ad81cb0d62",
                "594b42fe855c2fb2",
                "f2f4db6022981ef8"
            ]
        ]
    },
    {
        "id": "ad2968e41d240ac5",
        "type": "ui_level",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 3,
        "width": 1,
        "height": 3,
        "name": "tank 2 level",
        "label": "",
        "colorHi": "#e60000",
        "colorWarn": "#ff9900",
        "colorNormal": "#00b33c",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Ft",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "soft",
        "shape": "1",
        "colorschema": "rainbow",
        "textoptions": "default",
        "colorText": "#eeeeee",
        "fontLabel": "",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": true,
        "tickmode": "auto",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "1c19e3a46f9bdcfa",
        "type": "ui_level",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 1,
        "width": 1,
        "height": 3,
        "name": "tank 1 level",
        "label": "",
        "colorHi": "#e60000",
        "colorWarn": "#ff9900",
        "colorNormal": "#00b33c",
        "colorOff": "#595959",
        "min": 0,
        "max": "33",
        "segWarn": "",
        "segHigh": "",
        "unit": "",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "soft",
        "shape": "1",
        "colorschema": "rainbow",
        "textoptions": "default",
        "colorText": "#eeeeee",
        "fontLabel": "",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": true,
        "tickmode": "auto",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 710,
        "y": 220,
        "wires": []
    },
    {
        "id": "7f9b76ab737ee508",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 4,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "",
        "unit": "ft",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#8000ff",
        "colorFromTheme": false,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "b74904d7ea801ad4",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "",
        "unit": " ft",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#ff9900",
        "colorFromTheme": false,
        "stroke": 2,
        "property": "payload",
        "pointcount": "12",
        "x": 900,
        "y": 220,
        "wires": []
    },
    {
        "id": "259f0f5117967ea0",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 24",
        "func": "let t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\nlet sim = global.get('simRun') || true\n\nmsg.payload = t1.Level\nmsg.control = { \n    label: \"Tank 1\",\n    min: 0, \n    max: 32,\n    seg1: t1.LvlAlmSP[3], \n    seg2: t1.LvlAlmSP[2],\n    seg3: t1.LvlAlmSP[1],\n    seg4: t1.LvlAlmSP[0],\n    }\nnode.send([msg, null])\n\n\nmsg.payload = t2.Level\nmsg.control = {\n    label: \"Tank 2\",\n    min: 0,\n    max: 24,\n    seg1: t2.LvlAlmSP[3],\n    seg2: t2.LvlAlmSP[2],\n    seg3: t2.LvlAlmSP[1],\n    seg4: t2.LvlAlmSP[0],\n}\nnode.send([null, msg])\n\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "1c19e3a46f9bdcfa",
                "b74904d7ea801ad4"
            ],
            [
                "ad2968e41d240ac5",
                "7f9b76ab737ee508"
            ]
        ]
    },
    {
        "id": "d92eeba2cdfcfe66",
        "type": "ui_etable",
        "z": "1f913ab9df6ea05a",
        "payload": "[{\"field\":\"keys\",\"width\":\"70%\",\"editor\":false},{\"field\":\"vals\",\"width\":\"30%\",\"editor\":true}]",
        "payloadType": "json",
        "options": "{\"title\":\"tank1\",\"headerVisible\":false,\"movableColumns\":false,\"layout\":\"fitColumns\",\"height\":\"100px\"}",
        "group": "ee3971e504d867b1",
        "name": "t1 sp etable ",
        "order": 11,
        "width": 5,
        "height": 2,
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 990,
        "y": 340,
        "wires": [
            [
                "270b7f391083e573"
            ]
        ]
    },
    {
        "id": "c0dd9d48042af9ae",
        "type": "inject",
        "z": "1f913ab9df6ea05a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "f2f4db6022981ef8"
            ]
        ]
    },
    {
        "id": "6746e51ec4eb75f3",
        "type": "ui_etable",
        "z": "1f913ab9df6ea05a",
        "payload": "[{\"field\":\"keys\",\"width\":\"70%\",\"editor\":false},{\"field\":\"vals\",\"width\":\"30%\",\"editor\":true}]",
        "payloadType": "json",
        "options": "{\"title\":\"tank2\",\"headerVisible\":false,\"movableColumns\":false,\"layout\":\"fitColumns\",\"height\":\"100px\"}",
        "group": "ee3971e504d867b1",
        "name": "t2 sp etable",
        "order": 12,
        "width": 5,
        "height": 2,
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 990,
        "y": 360,
        "wires": [
            [
                "270b7f391083e573"
            ]
        ]
    },
    {
        "id": "270b7f391083e573",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 25",
        "func": "let cb = msg.callback\nlet title = msg.options.title\nlet data = msg.options.data || []\nvar r = data.map(row => parseFloat(row.vals));\n\nif (cb === \"cellEdited\"){\nglobal.set(title +\".LvlAlmSP\", r)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a9d1e952632016d0",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 9,
        "width": 5,
        "height": 1,
        "name": "t1  sp lbl",
        "label": "{{label}}",
        "format": "",
        "layout": "col-center",
        "className": "",
        "x": 820,
        "y": 340,
        "wires": []
    },
    {
        "id": "d353e080051b82b3",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 10,
        "width": 5,
        "height": 1,
        "name": "t2  sp lbl",
        "label": "{{label}}",
        "format": "",
        "layout": "col-center",
        "className": "",
        "x": 820,
        "y": 360,
        "wires": []
    },
    {
        "id": "b4d6c389ab15a332",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 5,
        "width": 5,
        "height": 1,
        "name": "t1 lbl",
        "label": "{{label}}",
        "format": "",
        "layout": "col-center",
        "className": "",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "596f73f239a31aee",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "order": 6,
        "width": 5,
        "height": 1,
        "name": "t2 lbl",
        "label": "{{label}}",
        "format": "",
        "layout": "col-center",
        "className": "",
        "x": 830,
        "y": 400,
        "wires": []
    },
    {
        "id": "319d0c5ea99ba628",
        "type": "ui_table",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "name": "t1 alm tbl",
        "order": 7,
        "width": 5,
        "height": 2,
        "columns": [
            {
                "field": "keys",
                "title": "",
                "width": "70%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "vals",
                "title": "",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1000,
        "y": 380,
        "wires": []
    },
    {
        "id": "ab8db6e45ccafa7d",
        "type": "inject",
        "z": "1f913ab9df6ea05a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "35e6e3160e83fc6b"
            ]
        ]
    },
    {
        "id": "35e6e3160e83fc6b",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 26",
        "func": "// msg.ui_control = { tabulator: { \"headerVisible\": false } };\n// msg.payload= null\n// node.send(msg)\n\n// //msg.ui_control = {}\n\n\n// msg.ui_control = {\n//     tabulator: {\n//         columns: [\n//             {\n//                 \"field\": \"vals\",\n//                 \"width\": \"30%\",\n//                 \"editor\": false,\n//             }\n//         ]\n//     }\n// }\n// node.send(msg)\n// return;\nmsg.ui_control = {\n    tabulator: {\n        headerVisible: false,\n        rowFormatter: (function (row) {\n            const data = row.getData();\n            if (data.vals) {\n                row.getElement().style.backgroundColor = 'red';\n            } else {\n                row.getElement().style.backgroundColor = '';\n            }\n        }).toString(),\n        columns: [\n            {\n                field: \"vals\",\n                width: \"30%\",\n                editor: false,\n            }\n        ]\n    }\n};\n\nmsg.payload = null;\nnode.send(msg);\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "319d0c5ea99ba628",
                "d5114737d5461f7d"
            ]
        ]
    },
    {
        "id": "d5114737d5461f7d",
        "type": "ui_table",
        "z": "1f913ab9df6ea05a",
        "group": "ee3971e504d867b1",
        "name": "t2 alm tbl",
        "order": 8,
        "width": 5,
        "height": 2,
        "columns": [
            {
                "field": "keys",
                "title": "",
                "width": "70%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "vals",
                "title": "",
                "width": "30%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1000,
        "y": 400,
        "wires": []
    },
    {
        "id": "b719331d21955fbd",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "text p1",
        "label": "",
        "format": "<b><font color= {{msg.color}} > {{msg.payload}} </font></b>",
        "layout": "col-center",
        "className": "f30",
        "x": 820,
        "y": 500,
        "wires": []
    },
    {
        "id": "eeee42ad81cb0d62",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 27",
        "func": "let p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\nlet t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\nlet sim = global.get('simRun') || true\n\n\nmsg.payload = p1.runInd ? \"RUNNING\" : \"STOPPED\"\nmsg.color = p1.runInd ? \"lime\" : \"light-blue\"\nnode.send([msg])\n\n\nmsg.payload = p2.runInd ? \"RUNNING\" : \"STOPPED\"\nmsg.color = p2.runInd ? \"orange\" : \"purple\"\nnode.send([null, msg])\n\nmsg = {}\n\nmsg.payload = p1.opSP.start\nnode.send([null, null, msg])\n\nmsg.payload = p1.opSP.stop\nnode.send([null, null, null, msg])\n\nmsg.payload = p2.opSP.start\nnode.send([null, null, null, null, msg])\n\nmsg.payload = p2.opSP.stop\nnode.send([null, null, null, null, null, msg])\n\nmsg.payload = p1.suctPSI.val\nnode.send([null, null, null, null, null, null, msg])\n\nmsg.payload = p1.discPSI.val\nnode.send([null, null, null, null, null, null, null, msg])\n\nmsg.payload = p1.speed\nnode.send([null,null, null, null, null, null, null, null, msg])\n\nmsg.payload = p2.suctPSI.val\nnode.send([null, null, null, null, null, null,null,null,null, msg])\n\nmsg.payload = p2.discPSI.val\nnode.send([null, null, null, null, null, null, null, null, null, null, msg])\n\nmsg.payload = p2.speed\nnode.send([null, null, null, null, null, null, null, null, null, null, null, msg])\n\nmsg.payload = p1.runInd\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\nmsg.payload = p2.runInd\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\n\nmsg.value = p1.inTemp.val\nmsg.label = ' P1 Suction Temp'\nmsg.units = \"\\u00B0C\";\nmsg.low = p1.inTemp.HiAlmSP\nmsg.hi = p1.inTemp.hiSDsp\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\nmsg.value = p1.outTemp.val\nmsg.label = ' P1 Discharge Temp'\nmsg.units = \"\\u00B0C\";\nmsg.low = p1.outTemp.HiAlmSP\nmsg.hi = p1.outTemp.hiSDsp\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\nmsg.value = p1.oilTemp.val\nmsg.label = ' P1 Oil Temp'\nmsg.units = \"\\u00B0C\";\nmsg.low = p1.oilTemp.HiAlmSP\nmsg.hi = p1.oilTemp.hiSDsp\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\n\nmsg.value = p2.inTemp.val\nmsg.label = ' P2 Suction Temp'\nmsg.units = \"\\u00B0C\";\nmsg.low = p2.inTemp.HiAlmSP\nmsg.hi = p2.inTemp.hiSDsp\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\nmsg.value = p2.outTemp.val\nmsg.label = ' P2 Discharge Temp'\nmsg.units = \"\\u00B0C\";\nmsg.low = p2.outTemp.HiAlmSP\nmsg.hi = p2.outTemp.hiSDsp\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\nmsg.value = p2.oilTemp.val\nmsg.label = ' P2 Oil Temp'\nmsg.units = \"\\u00B0C\";\nmsg.low = p2.oilTemp.HiAlmSP\nmsg.hi = p2.oilTemp.hiSDsp\nnode.send([null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg])\n\n\n\n\n\n\n\n\n\nreturn ;",
        "outputs": 20,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "b719331d21955fbd"
            ],
            [
                "b0a7f13bb54e1739"
            ],
            [
                "2189f10c5d0db2b3"
            ],
            [
                "c92743170ce45535"
            ],
            [
                "f73364784e4b170b"
            ],
            [
                "bb295fcb19ed9e53"
            ],
            [
                "c9566ea3ad39593c"
            ],
            [
                "9385a9a8f6edad49"
            ],
            [
                "9896660a8e33e96c"
            ],
            [
                "673c17bf199cbd15"
            ],
            [
                "f80912debe12c3d0"
            ],
            [
                "438803bfeac72689"
            ],
            [
                "dea73b95c6d9e48f"
            ],
            [
                "60a95aba0859b3ee"
            ],
            [
                "e61ba76d02c3f731"
            ],
            [
                "3c4bf0152b02c50b"
            ],
            [
                "b03ef10803f94ae6"
            ],
            [
                "39819d9f3309248a"
            ],
            [
                "f030ad390626b426"
            ],
            [
                "eb7408d796d0d7e7"
            ]
        ]
    },
    {
        "id": "3e725c6d74fb1aa0",
        "type": "ui_template",
        "z": "1f913ab9df6ea05a",
        "group": "",
        "name": "font",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n\n .f10 p {font-size:10px;}\n .f20 p {font-size:20px;}\n .f30 p {font-size:30px;}\n .f40 p {font-size:40px;}\n .f50 p {font-size:50px;}\n .f60 p {font-size:60px;}\n .f70 p {font-size:70px;}\n .f80 p {font-size:80px;}\n .f90 p {font-size:90px;}\n .f100 p {font-size:100px;}\n .f110 p {font-size:110px;}\n .f120 p {font-size:120px;}\n .f130 p {font-size:130px;}\n \n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 370,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "5e4212f0f7ec4e93",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Pump 1 Controls",
        "format": "",
        "layout": "col-center",
        "className": "",
        "x": 990,
        "y": 500,
        "wires": []
    },
    {
        "id": "b0a7f13bb54e1739",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "text p2",
        "label": "",
        "format": "<b><font color= {{msg.color}} > {{msg.payload}} </font></b>",
        "layout": "col-center",
        "className": "f30",
        "x": 820,
        "y": 520,
        "wires": []
    },
    {
        "id": "e786a89fde504d01",
        "type": "ui_text",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Pump 2 Controls",
        "format": "",
        "layout": "col-center",
        "className": "",
        "x": 990,
        "y": 520,
        "wires": []
    },
    {
        "id": "2189f10c5d0db2b3",
        "type": "ui_text_input",
        "z": "1f913ab9df6ea05a",
        "name": "p1 start",
        "label": "P1 Start SP",
        "tooltip": "",
        "group": "c27250b2120331ca",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "pump1.opSP.start",
        "sendOnBlur": true,
        "className": "f20",
        "topicType": "str",
        "x": 820,
        "y": 540,
        "wires": [
            [
                "edbc56835a6d3d5e"
            ]
        ]
    },
    {
        "id": "c92743170ce45535",
        "type": "ui_text_input",
        "z": "1f913ab9df6ea05a",
        "name": "p1 stop ",
        "label": "P1 Stop SP",
        "tooltip": "",
        "group": "c27250b2120331ca",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "pump1.opSP.stop",
        "sendOnBlur": true,
        "className": "f20",
        "topicType": "str",
        "x": 820,
        "y": 560,
        "wires": [
            [
                "edbc56835a6d3d5e"
            ]
        ]
    },
    {
        "id": "f73364784e4b170b",
        "type": "ui_text_input",
        "z": "1f913ab9df6ea05a",
        "name": "p2 start",
        "label": "P2 Start SP",
        "tooltip": "",
        "group": "c27250b2120331ca",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "pump2.opSP.start",
        "sendOnBlur": true,
        "className": "f20",
        "topicType": "str",
        "x": 820,
        "y": 580,
        "wires": [
            [
                "edbc56835a6d3d5e"
            ]
        ]
    },
    {
        "id": "bb295fcb19ed9e53",
        "type": "ui_text_input",
        "z": "1f913ab9df6ea05a",
        "name": "p2 stop ",
        "label": "P2 Stop SP",
        "tooltip": "",
        "group": "c27250b2120331ca",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "pump2.opSP.stop",
        "sendOnBlur": true,
        "className": "f20",
        "topicType": "str",
        "x": 820,
        "y": 600,
        "wires": [
            [
                "edbc56835a6d3d5e"
            ]
        ]
    },
    {
        "id": "edbc56835a6d3d5e",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 28",
        "func": "let a = parseFloat(msg.payload)\nglobal.set(msg.topic, a)\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "c9566ea3ad39593c",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 9,
        "width": 3,
        "height": 2,
        "name": "p1 Suct",
        "label": "",
        "unit": "psi",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 820,
        "y": 620,
        "wires": []
    },
    {
        "id": "9385a9a8f6edad49",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 10,
        "width": 3,
        "height": 2,
        "name": "p1 disc",
        "label": "",
        "unit": "psi",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 820,
        "y": 640,
        "wires": []
    },
    {
        "id": "9896660a8e33e96c",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 13,
        "width": 3,
        "height": 2,
        "name": "p1 speed",
        "label": "",
        "unit": "hz",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 820,
        "y": 660,
        "wires": []
    },
    {
        "id": "673c17bf199cbd15",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 11,
        "width": 3,
        "height": 2,
        "name": "p2 Suct",
        "label": "",
        "unit": "psi",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 820,
        "y": 680,
        "wires": []
    },
    {
        "id": "438803bfeac72689",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 15,
        "width": 3,
        "height": 2,
        "name": "p2 speed",
        "label": "",
        "unit": "hz",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 820,
        "y": 720,
        "wires": []
    },
    {
        "id": "f80912debe12c3d0",
        "type": "ui_valuetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 12,
        "width": 3,
        "height": 2,
        "name": "p2 disc",
        "label": "",
        "unit": "psi",
        "blur": true,
        "minmax": false,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": "1",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 820,
        "y": 700,
        "wires": []
    },
    {
        "id": "9e9d179a8a894748",
        "type": "ui_template",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "name": "hoa1",
        "order": 14,
        "width": 3,
        "height": 2,
        "format": "<div>{{msg.title}}</div>\n<div> </div>\n<md-button ng-click=\"send({payload: msg.label})\" ng-style=\"{backgroundColor: msg.color}\">\n    {{msg.label}}\n</md-button>\n\n<div flex layout=\"row\" layout-align=\"space-around center\">\n</div>\n\n<script>\n    scope.$watch('msg.label', function(newLabel) {\n        if (newLabel) {\n            scope.msg.label = newLabel;\n        }\n    });\n\n    scope.$watch('msg.color', function(newColor) {\n        if (newColor) {\n            scope.msg.color = newColor;\n        }\n    });\n\n    scope.click = function(b) {\n        if (!this.msg) this.msg = {};\n        if (!this.msg.payload) this.msg.payload = {};\n        this.msg.payload[b.payload] = !this.msg.payload[b.payload];\n        this.send(this.msg);\n    }.bind(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 750,
        "y": 960,
        "wires": [
            [
                "5d1fdd0c2a54a637"
            ]
        ]
    },
    {
        "id": "c10e29e9452dcaf7",
        "type": "debug",
        "z": "1f913ab9df6ea05a",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1220,
        "wires": []
    },
    {
        "id": "7c293d53ba9d4b7b",
        "type": "inject",
        "z": "1f913ab9df6ea05a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "title",
                "v": "P1 HOA",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 960,
        "wires": [
            [
                "9e9d179a8a894748",
                "5ee5310bb157bc6f"
            ]
        ]
    },
    {
        "id": "5d1fdd0c2a54a637",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 29",
        "func": "\n\nconst stateMap = {\n    'Hand': { next: 'Off', color: 'grey', label: 'Off', hoa: 2},\n    'Off': { next: 'Auto', color: 'green', label: 'Auto', hoa: 3 },\n    'Auto': { next: 'Hand', color: 'orange', label: 'Hand', hoa: 1},\n};\n\nconst currentState = msg.payload;\nconst nextState = stateMap[currentState] ? stateMap[currentState].next : 'Hand';\nconst nextStateDetails = stateMap[nextState];\n\nmsg.label = nextStateDetails.label;\nmsg.color = nextStateDetails.color;\nmsg.title = \"p1 HOA\"\nglobal.set('pump1.HOA', nextStateDetails.hoa);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 960,
        "wires": [
            [
                "9e9d179a8a894748"
            ]
        ]
    },
    {
        "id": "5ee5310bb157bc6f",
        "type": "ui_template",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "name": "hoa 2",
        "order": 16,
        "width": 3,
        "height": 2,
        "format": "<div>{{msg.title}}</div>\n<div> </div>\n<md-button ng-click=\"send({payload: msg.label})\" ng-style=\"{backgroundColor: msg.color}\">\n    {{msg.label}}\n</md-button>\n\n<div flex layout=\"row\" layout-align=\"space-around center\">\n</div>\n\n<script>\n    scope.$watch('msg.label', function(newLabel) {\n        if (newLabel) {\n            scope.msg.label = newLabel;\n        }\n    });\n\n    scope.$watch('msg.color', function(newColor) {\n        if (newColor) {\n            scope.msg.color = newColor;\n        }\n    });\n\n    scope.click = function(b) {\n        if (!this.msg) this.msg = {};\n        if (!this.msg.payload) this.msg.payload = {};\n        this.msg.payload[b.payload] = !this.msg.payload[b.payload];\n        this.send(this.msg);\n    }.bind(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 750,
        "y": 1000,
        "wires": [
            [
                "ea2e13d7fcd5f99b"
            ]
        ]
    },
    {
        "id": "ea2e13d7fcd5f99b",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 30",
        "func": "\n\nconst stateMap = {\n    'Hand': { next: 'Off', color: 'grey', label: 'Off', hoa: 2},\n    'Off': { next: 'Auto', color: 'green', label: 'Auto', hoa: 3 },\n    'Auto': { next: 'Hand', color: 'orange', label: 'Hand', hoa: 1},\n};\n\nconst currentState = msg.payload;\nconst nextState = stateMap[currentState] ? stateMap[currentState].next : 'Hand';\nconst nextStateDetails = stateMap[nextState];\n\nmsg.label = nextStateDetails.label;\nmsg.color = nextStateDetails.color;\nmsg.title = \"p2 HOA\"\nglobal.set('pump2.HOA', nextStateDetails.hoa);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1000,
        "wires": [
            [
                "5ee5310bb157bc6f"
            ]
        ]
    },
    {
        "id": "dea73b95c6d9e48f",
        "type": "ui_statetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 17,
        "width": 6,
        "height": 2,
        "name": "P1 State chart",
        "label": "Pump 1 Run State",
        "states": [
            {
                "state": true,
                "col": "#009933",
                "t": "bool",
                "label": "Running "
            },
            {
                "state": false,
                "col": "#999999",
                "t": "bool",
                "label": "Stopped"
            }
        ],
        "periodLimit": "10",
        "periodLimitUnit": "3600",
        "timeformat": "HH:mm:ss",
        "tickmarks": "5",
        "persist": true,
        "legend": 1,
        "combine": true,
        "blanklabel": "Data In Progress",
        "x": 840,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "60a95aba0859b3ee",
        "type": "ui_statetrail",
        "z": "1f913ab9df6ea05a",
        "group": "c27250b2120331ca",
        "order": 18,
        "width": 6,
        "height": 2,
        "name": "P2 State chart",
        "label": "Pump 2 Run State",
        "states": [
            {
                "state": true,
                "col": "#0a72c2",
                "t": "bool",
                "label": "Running "
            },
            {
                "state": false,
                "col": "#999999",
                "t": "bool",
                "label": "Stopped"
            }
        ],
        "periodLimit": "10",
        "periodLimitUnit": "3600",
        "timeformat": "HH:mm:ss",
        "tickmarks": "5",
        "persist": true,
        "legend": 1,
        "combine": true,
        "blanklabel": "Data In Progress",
        "x": 840,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e61ba76d02c3f731",
        "type": "ui_gauge",
        "z": "1f913ab9df6ea05a",
        "name": "P1 intemp",
        "group": "c27250b2120331ca",
        "order": 19,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "{{msg.label}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#419f59",
            "#cbdc4c",
            "#d34a4a"
        ],
        "seg1": "{{msg.low}}",
        "seg2": "{{msg.hi}}",
        "className": "",
        "x": 830,
        "y": 780,
        "wires": []
    },
    {
        "id": "3c4bf0152b02c50b",
        "type": "ui_gauge",
        "z": "1f913ab9df6ea05a",
        "name": "P1 outTemp",
        "group": "c27250b2120331ca",
        "order": 20,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "{{msg.label}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#419f59",
            "#cbdc4c",
            "#d34a4a"
        ],
        "seg1": "{{msg.low}}",
        "seg2": "{{msg.hi}}",
        "className": "",
        "x": 830,
        "y": 800,
        "wires": []
    },
    {
        "id": "b03ef10803f94ae6",
        "type": "ui_gauge",
        "z": "1f913ab9df6ea05a",
        "name": "P1 oilTemp",
        "group": "c27250b2120331ca",
        "order": 21,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "{{msg.label}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#419f59",
            "#cbdc4c",
            "#d34a4a"
        ],
        "seg1": "{{msg.low}}",
        "seg2": "{{msg.hi}}",
        "className": "",
        "x": 830,
        "y": 820,
        "wires": []
    },
    {
        "id": "39819d9f3309248a",
        "type": "ui_gauge",
        "z": "1f913ab9df6ea05a",
        "name": "P2 intemp",
        "group": "c27250b2120331ca",
        "order": 22,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "{{msg.label}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#419f59",
            "#cbdc4c",
            "#d34a4a"
        ],
        "seg1": "{{msg.low}}",
        "seg2": "{{msg.hi}}",
        "className": "",
        "x": 830,
        "y": 840,
        "wires": []
    },
    {
        "id": "f030ad390626b426",
        "type": "ui_gauge",
        "z": "1f913ab9df6ea05a",
        "name": "P2 outTemp",
        "group": "c27250b2120331ca",
        "order": 23,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "{{msg.label}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#419f59",
            "#cbdc4c",
            "#d34a4a"
        ],
        "seg1": "{{msg.low}}",
        "seg2": "{{msg.hi}}",
        "className": "",
        "x": 830,
        "y": 860,
        "wires": []
    },
    {
        "id": "eb7408d796d0d7e7",
        "type": "ui_gauge",
        "z": "1f913ab9df6ea05a",
        "name": "P2 oilTemp",
        "group": "c27250b2120331ca",
        "order": 24,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "{{msg.label}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#419f59",
            "#cbdc4c",
            "#d34a4a"
        ],
        "seg1": "{{msg.low}}",
        "seg2": "{{msg.hi}}",
        "className": "",
        "x": 830,
        "y": 880,
        "wires": []
    },
    {
        "id": "f4f998912732e90d",
        "type": "link in",
        "z": "1f913ab9df6ea05a",
        "name": "link in 41",
        "links": [
            "20913fe1354e821a"
        ],
        "x": 255,
        "y": 880,
        "wires": [
            [
                "44557da9d873b021"
            ]
        ]
    },
    {
        "id": "44557da9d873b021",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "write msgLog from FD flow",
        "func": "flow.set('msgLog', msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "d967841fe1f22cc8",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 32",
        "func": "msg.payload = flow.get('msgLog') || []\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "3fa84e8e31e568d0"
            ]
        ]
    },
    {
        "id": "594b42fe855c2fb2",
        "type": "link out",
        "z": "1f913ab9df6ea05a",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "daf34bf8794bc50d",
            "c10afb82ed21bbac"
        ],
        "x": 245,
        "y": 260,
        "wires": []
    },
    {
        "id": "daf34bf8794bc50d",
        "type": "link in",
        "z": "1f913ab9df6ea05a",
        "name": "link in 42",
        "links": [
            "594b42fe855c2fb2"
        ],
        "x": 435,
        "y": 1080,
        "wires": [
            [
                "d967841fe1f22cc8"
            ]
        ]
    },
    {
        "id": "3fa84e8e31e568d0",
        "type": "ui_template",
        "z": "1f913ab9df6ea05a",
        "group": "fa764ad7ba508d61",
        "name": "almLog",
        "order": 1,
        "width": 23,
        "height": 7,
        "format": "<h2>Alarm and Event Log</h2>\n<pre ng-bind-html=\"msg.payload\"></pre>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "7d4631e445eb0435",
        "type": "ui_template",
        "z": "1f913ab9df6ea05a",
        "group": "7b451183ad23e7c4",
        "name": "inlet vlv",
        "order": 2,
        "width": 4,
        "height": 2,
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; height: 100%;\">\n  <b> Inlet Valve </b>\n</div>\n<div style=\"display: flex; justify-content: center; align-items: center; height: 100%;\">\n  <!-- Your SVG code with the fill attribute replaced by a placeholder -->\n  <svg height=\"75px\" width=\"75px\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 512 512\" xml:space=\"preserve\">\n    <g>\n      <g>\n        <path ng-style=\"{'fill': msg.color}\" d=\"M490.667,298.667h-64c-11.782,0-21.333,9.551-21.333,21.333h-42.667v-64c0-11.782-9.551-21.333-21.333-21.333H320V192h64\n          c11.782,0,21.333-9.551,21.333-21.333V21.333C405.333,9.551,395.782,0,384,0H128c-11.782,0-21.333,9.551-21.333,21.333v149.333\n          c0,11.782,9.551,21.333,21.333,21.333h64v42.667h-21.333c-11.782,0-21.333,9.551-21.333,21.333v64h-42.667\n          c0-11.782-9.551-21.333-21.333-21.333h-64C9.551,298.667,0,308.218,0,320v170.667C0,502.449,9.551,512,21.333,512h64\n          c11.782,0,21.333-9.551,21.333-21.333h298.667c0,11.782,9.551,21.333,21.333,21.333h64c11.782,0,21.333-9.551,21.333-21.333V320\n          C512,308.218,502.449,298.667,490.667,298.667z M234.667,42.667h42.667v106.667h-42.667V42.667z M362.667,149.333H320V42.667\n          h42.667V149.333z M149.333,42.667H192v106.667h-42.667V42.667z M234.667,192h42.667v42.667h-42.667V192z M42.667,469.333v-128H64\n          v128H42.667z M106.667,448v-85.333h64c11.782,0,21.333-9.551,21.333-21.333v-64h21.333h85.333H320v64\n          c0,11.782,9.551,21.333,21.333h64V448H106.667z M469.333,469.333H448v-128h21.333V469.333z\" />\n</g>\n</g>\n</svg>\n\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "092b01804f3309c1",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 33",
        "func": "let i1 = global.get('inlet')\nif (i1.valve === 'open') {\n    msg.color = \"#0BEDDA\"\n} else {\n    msg.color = \"#D3136C\"\n}\n\nmsg.topic = ''\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1160,
        "wires": [
            [
                "7d4631e445eb0435"
            ]
        ]
    },
    {
        "id": "c10afb82ed21bbac",
        "type": "link in",
        "z": "1f913ab9df6ea05a",
        "name": "link in 43",
        "links": [
            "594b42fe855c2fb2"
        ],
        "x": 445,
        "y": 1160,
        "wires": [
            [
                "092b01804f3309c1"
            ]
        ]
    },
    {
        "id": "f2f4db6022981ef8",
        "type": "function",
        "z": "1f913ab9df6ea05a",
        "name": "function 34",
        "func": "let t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\nlet sim = global.get('simRun') || true\nlet tableKeys = [\"Level HiSD SP\", \"Level Hi SP\", \"Level Low SP\", \"Level Low SD SP\"]\nlet almKeys = [\"Level Hi ShutIn\", \"Level Hi Alarm\", \"Level Low Alarm\", \"Level Low ShutIn\"]\n\n\n\nlet p = []\nlet a = {}\n\nfor (let i = 0; i < t1.LvlAlmSP.length; i++) {\n    a = { \"keys\": tableKeys[i], \"vals\": t1.LvlAlmSP[i] }\n    p.push(a)\n}\n\nmsg.payload = p\nmsg.label = \"Tank 1 SetPoints\"\nnode.send([msg])\n\na = {}\np = []\n\nfor (let i = 0; i < t2.LvlAlmSP.length; i++) {\n    a = { \"keys\": tableKeys[i], \"vals\": t2.LvlAlmSP[i] }\n    p.push(a)\n}\nmsg.payload = p\nmsg.label = \"Tank 2 SetPoints\"\nnode.send([null, msg])\n\n\n\na = {}\np = []\nfor (let i = 0; i < t1.LvlAlms.length; i++) {\n    a = { \"keys\": almKeys[i], \"vals\": t1.LvlAlms[i] }\n    p.push(a)\n}\n\nmsg.payload = p\nmsg.label = \"Tank 1 Alarms\"\nnode.send([null, null, msg])\n\n\n\na = {}\np = []\nfor (let i = 0; i < t2.LvlAlms.length; i++) {\n    a = { \"keys\": almKeys[i], \"vals\": t2.LvlAlms[i] }\n    p.push(a)\n}\n\nmsg.payload = p\nmsg.label = \"Tank 2 Alarms\"\nnode.send([null, null, null, msg])\n\nlet c = context.get('count')\nif (c < 720) {\n    c++\n    context.set(\"count\", c)\n} else {\n    context.set(\"count\", 0)\n    msg.ui_control = {\n        tabulator: {\n            headerVisible: false,\n            rowFormatter: (function (row) {\n                const data = row.getData();\n                if (data.vals) {\n                    row.getElement().style.backgroundColor = 'red';\n                } else {\n                    row.getElement().style.backgroundColor = '';\n                }\n            }).toString(),\n            columns: [\n                {\n                    field: \"vals\",\n                    width: \"30%\",\n                    editor: false,\n                }\n            ]\n        }\n    };\n   \n}\n\nreturn ;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('count', 730)",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 340,
        "wires": [
            [
                "a9d1e952632016d0",
                "d92eeba2cdfcfe66",
                "740c025bf16d4f1f"
            ],
            [
                "d353e080051b82b3",
                "6746e51ec4eb75f3"
            ],
            [
                "b4d6c389ab15a332",
                "319d0c5ea99ba628"
            ],
            [
                "596f73f239a31aee",
                "d5114737d5461f7d"
            ]
        ]
    },
    {
        "id": "8139bd09c6827415",
        "type": "function",
        "z": "36ab6944693000d2",
        "name": "api json const",
        "func": "let p1 ={ ...global.get('pump1')} ||{}\nlet p2 ={ ...global.get('pump2')} ||{}\nlet t1 ={ ...global.get('tank1')} || {}\nlet t2 ={ ...global.get('tank2')} || {}\n\n\nif (p1.runInd){\n    p1.runInd = 1\n}else {\n    p1.runInd = 0\n}\n\nif (p2.runInd) {\n    p2.runInd = 1\n} else {\n    p2.runInd = 0\n}\n\nmsg.topic = \"nodered tags\"\nmsg.timeStamp = Date.now()\nmsg.payload = {'pump1':p1, 'pump2':p2, 'tank1':t1, 'tank2':t2}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 180,
        "wires": [
            [
                "f04801d97a19fc2f"
            ]
        ]
    },
    {
        "id": "8cccc99ba8c4419d",
        "type": "http in",
        "z": "36ab6944693000d2",
        "name": "",
        "url": "/p1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 380,
        "y": 180,
        "wires": [
            [
                "8139bd09c6827415"
            ]
        ]
    },
    {
        "id": "f04801d97a19fc2f",
        "type": "http response",
        "z": "36ab6944693000d2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 180,
        "wires": []
    },
    {
        "id": "e0aa934ec2ba9809",
        "type": "inject",
        "z": "dac686414b360668",
        "name": "Trigger DBIRTH",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "6",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "37331d9bde824b29",
                "d981eaed965d4608"
            ]
        ]
    },
    {
        "id": "37331d9bde824b29",
        "type": "function",
        "z": "dac686414b360668",
        "name": "Collect Metrics and Set MessageType",
        "func": "// function createMetric(name, value) {\n//     let type;\n\n//     if (typeof value === 'number') {\n//         if (Number.isInteger(value)) {\n//             type = 'int32';\n//         } else {\n//             type = 'float';\n//         }\n//     } else if (typeof value === 'boolean') {\n//         type = 'boolean';\n//     } else if (Array.isArray(value)) {\n//         type = 'array';\n//     } else {\n//         type = 'string';\n//     }\n\n//     if (type === 'array') {\n//         return {\n//             name: name,\n//             value: {\n//                 type: \"array\",\n//                 elements: value.map((element, index) => createMetric(name + \"[\" + index + \"]\", element)),\n//             },\n//         };\n//     }\n\n//     return {\n//         name: name,\n//         value: value,\n//         type: type\n//     };\n// }\nfunction createMetric(name, value) {\n    let type;\n\n    if (typeof value === 'number') {\n        type = 'float';\n        if (Number.isInteger(value)) {\n            value = value.toFixed(1);\n        }\n    } else if (typeof value === 'boolean') {\n        type = 'boolean';\n    } else if (Array.isArray(value)) {\n        type = 'array';\n    } else {\n        type = 'string';\n    }\n\n    if (type === 'array') {\n        return {\n            name: name,\n            value: {\n                type: \"array\",\n                elements: value.map((element, index) => createMetric(name + \"[\" + index + \"]\", element)),\n            },\n        };\n    }\n\n    return {\n        name: name,\n        value: value,\n        type: type\n    };\n}\n\nfunction getObjectProperties(obj, prefix) {\n    const metrics = [];\n\n    for (const key in obj) {\n        if (key === 'LvlAlmSP' && prefix.startsWith('tank')) {\n            const lvlAlmSpKeys = ['Level HiHi SP', 'Level Hi SP', 'Level Low SP', 'Level LowLow SP'];\n            obj[key].forEach((value, index) => {\n                metrics.push(createMetric(prefix + '_' + lvlAlmSpKeys[index], value));\n            });\n        } else if (key === 'LvlAlms' && prefix.startsWith('tank')) {\n            const lvlAlmsKeys = ['Level HiHi', 'Level Hi', 'Level Low', 'Level LowLow'];\n            obj[key].forEach((value, index) => {\n                metrics.push(createMetric(prefix + '_' + lvlAlmsKeys[index], value));\n            });\n        } else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n            metrics.push(...getObjectProperties(obj[key], prefix + '_' + key));\n        } else {\n            metrics.push(createMetric(prefix + '_' + key, obj[key]));\n        }\n    }\n\n    return metrics;\n}\n\n\nconst gatherMetrics = () => {\n    let p1 = global.get('pump1') || {};\n    let t1 = global.get('tank1') || {};\n    let p2 = global.get('pump2') || {};\n    let t2 = global.get('tank2') || {};\n    let pl = global.get('inlet') || {};\n\n    const metrics = [];\n\n    // Add metrics for Pump\n    metrics.push(...getObjectProperties(p1, 'pump1'));\n    metrics.push(...getObjectProperties(t1, 'tank1'));\n    metrics.push(...getObjectProperties(p2, 'pump2'));\n    metrics.push(...getObjectProperties(t2, 'tank2'));\n    metrics.push(...getObjectProperties(pl, 'inlet'));\n    // Add more equipment data models if needed\n\n    return metrics;\n};\n\n\nlet s= context.get('seq')\n\nif (flow.get(\"firstRun\") === undefined) {\n    flow.set(\"firstRun\", true);\n    msg.msgType = \"DBIRTH\";\n    context.set('seq', 0)\n} else {\n    msg.msgType = \"DDATA\";\n    context.set('seq', s+ 1)\n}\n\n\nmsg.payload = {\n    timestamp: Date.now(),\n    metrics: gatherMetrics(),\n};\n    //seq: context.get('seq')\n\n//msg.msgType = \"DBIRTH\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('seq', 0)",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "9e6f1c56e3681444"
            ]
        ]
    },
    {
        "id": "d505e2444e6ce629",
        "type": "switch",
        "z": "dac686414b360668",
        "name": "MessageType",
        "property": "msgType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DBIRTH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DDEATH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DDATA",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DCMD",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RBIRTH",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 720,
        "y": 160,
        "wires": [
            [
                "2a8244c2ac5b66e9"
            ],
            [],
            [
                "2a8244c2ac5b66e9"
            ],
            [],
            [
                "10aec10fc0ab3425"
            ]
        ]
    },
    {
        "id": "10aec10fc0ab3425",
        "type": "function",
        "z": "dac686414b360668",
        "name": "Respond to RBIRTH",
        "func": "msg.msgType = \"DBIRTH\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 240,
        "wires": [
            [
                "24503bf1c986095e"
            ]
        ]
    },
    {
        "id": "9e6f1c56e3681444",
        "type": "function",
        "z": "dac686414b360668",
        "name": "function 40",
        "func": "const deviceId = flow.get('deviceId') || \"myDeviceId\"; // Replace with your device ID\nconst groupId = flow.get('groupId') || \"myGroupId\"; // Replace with your group ID\nconst edgeNodeId = flow.get('edgeNodeId') || \"myEdgeNodeId\"; // Replace with your edge node ID\n\nswitch (msg.msgType) {\n    case \"DBIRTH\":\n        msg.topic=flow.get('deviceId')+\"/DBIRTH\"\n        //msg.topic = `spBv1.0/${groupId}/NBIRTH/${edgeNodeId}`;\n        break;\n    case \"DDEATH\":\n        //msg.topic = `spBv1.0/${groupId}/NDEATH/${edgeNodeId}`;\n        break;\n    case \"DDATA\":\n        msg.topic = flow.get('deviceId') + \"/DDATA\"\n        //msg.topic = `spBv1.0/${groupId}/DDATA/${edgeNodeId}/${deviceId}`;\n        break;\n    case \"DCMD\":\n        //msg.topic = `spBv1.0/${groupId}/NCMD/${edgeNodeId}/${deviceId}`;\n        break;\n    default:\n        node.error(\"Invalid message type\");\n        return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 575,
        "y": 160,
        "wires": [
            [
                "d505e2444e6ce629"
            ]
        ],
        "l": false
    },
    {
        "id": "d981eaed965d4608",
        "type": "function",
        "z": "dac686414b360668",
        "name": "function 41",
        "func": "flow.set('deviceId', 'nodered');\nflow.set('groupId', 'edgegw');\nflow.set('edgeNodeId', 'brazos-edge');\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2f40235aac47ee2b",
        "type": "debug",
        "z": "dac686414b360668",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 280,
        "wires": []
    },
    {
        "id": "24503bf1c986095e",
        "type": "function",
        "z": "dac686414b360668",
        "name": "function 42",
        "func": "flow.set('firstRun', undefined)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "73cba740c0855964",
        "type": "inject",
        "z": "dac686414b360668",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "24503bf1c986095e"
            ]
        ]
    },
    {
        "id": "bd5c4a7f92fc1b67",
        "type": "debug",
        "z": "dac686414b360668",
        "name": "debug 144",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "2a8244c2ac5b66e9",
        "type": "sparkplug",
        "z": "dac686414b360668",
        "name": "",
        "broker": "tcp://10.10.10.110",
        "port": "49166",
        "clientid": "nodered",
        "groupid": "edgegw",
        "edgenode": "brazos-edge",
        "version": "spBv1.0",
        "enablecache": "false",
        "publishdeath": "true",
        "user": "testuser",
        "password": "__PWRD__",
        "x": 1100,
        "y": 140,
        "wires": [
            [
                "2f40235aac47ee2b"
            ]
        ]
    },
    {
        "id": "3b5ba532b76e078f",
        "type": "function",
        "z": "dac686414b360668",
        "name": "function 43",
        "func": "const mapTankArrays = (tankObj) => {\n    const LvlAlmsKeys = ['LevelHiHi', 'LevelHi', 'LevelLow', 'LevelLowLow'];\n    const LvlAlmSPKeys = ['Level HiHi SP', 'Level Hi SP', 'Level Low SP', 'Level LowLow SP'];\n    return {\n        ...tankObj,\n        LvlAlms: tankObj.LvlAlms?.reduce((acc, val, index) => {\n            return { ...acc, [LvlAlmsKeys[index]]: val };\n        }, {}),\n        LvlAlmSP: tankObj.LvlAlmSP?.reduce((acc, val, index) => {\n            return { ...acc, [LvlAlmSPKeys[index]]: val };\n        }, {})\n    };\n};\n\nconst flattenObj = (obj) => {\n    const flatObj = {};\n    for (const prop in obj) {\n        if (typeof obj[prop] === 'object' && obj[prop] !== null && !Array.isArray(obj[prop])) {\n            const flattened = flattenObj(obj[prop]);\n            for (const flattenedProp in flattened) {\n                flatObj[`${prop}.${flattenedProp}`] = flattened[flattenedProp];\n            }\n        } else {\n            flatObj[prop] = obj[prop];\n        }\n    }\n    return flatObj;\n};\n\nlet p1 = global.get('pump1') || {};\nlet p2 = global.get('pump2') || {};\nlet t1 = global.get('tank1') || {};\nlet t2 = global.get('tank2') || {};\n\nt1 = mapTankArrays(t1);\nt2 = mapTankArrays(t2);\n\nmsg.payload = flattenObj(p1);\nmsg.topic = \"ot-bytes/test/pump1\";\nnode.send(msg);\n\nmsg.payload = flattenObj(p2);\nmsg.topic = \"ot-bytes/test/pump2\";\nnode.send(msg);\n\nmsg.payload = flattenObj(t1);\nmsg.topic = \"ot-bytes/test/tank1\";\nnode.send(msg);\n\nmsg.payload = flattenObj(t2);\nmsg.topic = \"ot-bytes/test/tank2\";\nnode.send(msg);\n\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            [
                "2a1d7db90a714a36"
            ]
        ]
    },
    {
        "id": "2a1d7db90a714a36",
        "type": "mqtt out",
        "z": "dac686414b360668",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ae6f683fb566469c",
        "x": 630,
        "y": 340,
        "wires": []
    },
    {
        "id": "9eed2014fe51e15d",
        "type": "inject",
        "z": "dac686414b360668",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "3b5ba532b76e078f"
            ]
        ]
    },
    {
        "id": "a15760477cc4a8d9",
        "type": "debug",
        "z": "dac686414b360668",
        "name": "debug 146",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 420,
        "wires": []
    },
    {
        "id": "8a5d15ec57a01f51",
        "type": "function",
        "z": "dac686414b360668",
        "name": "function 44",
        "func": "if (msg.topic.indexOf('pump') >-1){\n    if (msg.payload.runInd === true){\n        msg.payload.runInd = 1\n    }else{\n            msg.payload.runInd = 0\n        }\n}       \n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "2a1d7db90a714a36",
                "a15760477cc4a8d9"
            ]
        ]
    },
    {
        "id": "aecf3868.b14ef8",
        "type": "inject",
        "z": "e3742b89.114eb8",
        "name": "TestEncrypt",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "nitin",
        "payloadType": "str",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "b8493930.f0d2a8"
            ]
        ]
    },
    {
        "id": "f30663cb.0dcd9",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "d9a151cb.e539",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 530,
        "y": 280,
        "wires": []
    },
    {
        "id": "e47318e3.d9a788",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "708d14aa.4e8ddc",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Setting password to G.Variable",
        "func": "global.set('passwordhash',msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 500,
        "wires": [
            [
                "e47318e3.d9a788",
                "87583114.c557f"
            ]
        ]
    },
    {
        "id": "cc1ac80f.0f9c88",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "//verying password\nvar x = msg.payload.password;\nvar y = msg.payload[\"repeat password\"];\n\nif (x == y)\n{\n//reading and storing password as text\nglobal.set('username',msg.payload.username);\nglobal.set('password',msg.payload.password);\n\nmsg.payload = msg.payload.password;\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 500,
        "wires": [
            [
                "d8a8c10a.8dbd6"
            ]
        ]
    },
    {
        "id": "8432bbf.80f3548",
        "type": "ui_form",
        "z": "e3742b89.114eb8",
        "name": "",
        "label": "Registration",
        "group": "91e570ff.c625b",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "repeat password",
                "value": "repeat password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": "",
            "repeat password": ""
        },
        "payload": "",
        "submit": "Register",
        "cancel": "cancel",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "cc1ac80f.0f9c88",
                "dc6f633b.630b4",
                "7c971216.7c13ec"
            ]
        ]
    },
    {
        "id": "8e313a27.d019b8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Encrypting password",
        "info": "",
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "4d889084.8d8d1",
        "type": "mysql",
        "z": "e3742b89.114eb8",
        "mydb": "cba93877ca03d070",
        "name": "",
        "x": 1310,
        "y": 500,
        "wires": [
            [
                "9f71d7b3.3f76d8",
                "a1a4c1f4.63c25"
            ]
        ]
    },
    {
        "id": "87583114.c557f",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "INSERT",
        "func": "var username = global.get('username');\nvar passwordhash = global.get('passwordhash');\n\nmsg.topic = \"INSERT INTO `training`.`userdatabase`(`username`,`password`) VALUES('\"+username+\"','\"+passwordhash+\"');\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 500,
        "wires": [
            [
                "4d889084.8d8d1",
                "514f11c0.986f4"
            ]
        ]
    },
    {
        "id": "9f71d7b3.3f76d8",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 500,
        "wires": []
    },
    {
        "id": "97a7e608.51bca8",
        "type": "ui_form",
        "z": "e3742b89.114eb8",
        "name": "",
        "label": "Login",
        "group": "9e099cea.b3406",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "cancel",
        "topic": "",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "4e72902b.b32bb",
                "94c1ea06.d57c98"
            ]
        ]
    },
    {
        "id": "4e72902b.b32bb",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "SELECT",
        "func": "msg.topic = \"SELECT username, password FROM training.userdatabase where username = '\"+msg.payload.username+\"';\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 720,
        "wires": [
            [
                "e591e3e.87b1b2"
            ]
        ]
    },
    {
        "id": "e591e3e.87b1b2",
        "type": "mysql",
        "z": "e3742b89.114eb8",
        "mydb": "cba93877ca03d070",
        "name": "",
        "x": 550,
        "y": 720,
        "wires": [
            [
                "882eb2a.ba1ea5",
                "882a46a5.77e7c8",
                "2b94ce66.b63282"
            ]
        ]
    },
    {
        "id": "882eb2a.ba1ea5",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "94c1ea06.d57c98",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Global.V",
        "func": "//store the password entered by user to check later\nglobal.set('passwordcheck',msg.payload.password);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "882a46a5.77e7c8",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Check password",
        "func": "//Read the password entered by user\nvar passwordcheck = global.get('passwordcheck');\n\nglobal.set('currentuserbuffer',msg.payload[0].username);\nmsg.payload =\n{\n    \"txt\": \"\"+passwordcheck+\"\",\n    \"hash\": \"\"+msg.payload[0].password+\"\"\n}\n\nreturn msg;  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 760,
        "wires": [
            [
                "694d388.7c07ec8"
            ]
        ]
    },
    {
        "id": "5f574ed9.ab6c3",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 720,
        "wires": []
    },
    {
        "id": "1f4a6376.869d7d",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "9e099cea.b3406",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2390,
        "y": 780,
        "wires": []
    },
    {
        "id": "6fb3fac0.e0c054",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "if (msg.match === true)\n{\n    msg.payload = \"Login successful\";\n    var x = global.get('currentuserbuffer');\n    global.set('currentuser', x)\n    return msg;\n}\nelse\n{\n    msg.payload = \"Please try again!\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1220,
        "y": 760,
        "wires": [
            [
                "1f4a6376.869d7d",
                "b3b38e10.d6e6e"
            ]
        ]
    },
    {
        "id": "873f569b.ec6128",
        "type": "catch",
        "z": "e3742b89.114eb8",
        "name": "",
        "scope": [
            "4d889084.8d8d1"
        ],
        "uncaught": false,
        "x": 1770,
        "y": 660,
        "wires": [
            [
                "76bb6372.f46a3c"
            ]
        ]
    },
    {
        "id": "a53fdd24.6636e",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200,
        "y": 660,
        "wires": []
    },
    {
        "id": "2b94ce66.b63282",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "var x = msg.payload.length;\nif (x === 0)\n{\n    msg.payload = \"Please try again!\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 820,
        "wires": [
            [
                "1f4a6376.869d7d",
                "b3b38e10.d6e6e"
            ]
        ]
    },
    {
        "id": "3ea3091.da5c0f6",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Registering users",
        "info": "",
        "x": 180,
        "y": 460,
        "wires": []
    },
    {
        "id": "2421bb0e.13f404",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Verifying Login",
        "info": "",
        "x": 180,
        "y": 640,
        "wires": []
    },
    {
        "id": "dc6f633b.630b4",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 460,
        "wires": []
    },
    {
        "id": "c235a762.b41728",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "91e570ff.c625b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2390,
        "y": 560,
        "wires": []
    },
    {
        "id": "7c971216.7c13ec",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "\nvar x = msg.payload.password;\nvar y = msg.payload[\"repeat password\"];\n\nif (x == y)\n{\nmsg.payload = \" \";\nreturn msg;\n}\n\nif (x != y)\n{\nmsg.payload = \"Password does not match!\";\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 560,
        "wires": [
            [
                "c235a762.b41728",
                "7dec084a.a1d508"
            ]
        ]
    },
    {
        "id": "b3b38e10.d6e6e",
        "type": "delay",
        "z": "e3742b89.114eb8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1760,
        "y": 820,
        "wires": [
            [
                "8b9906f.ed7e0f8"
            ]
        ]
    },
    {
        "id": "8b9906f.ed7e0f8",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "msg.payload = \"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1940,
        "y": 820,
        "wires": [
            [
                "1f4a6376.869d7d"
            ]
        ]
    },
    {
        "id": "7dec084a.a1d508",
        "type": "delay",
        "z": "e3742b89.114eb8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1760,
        "y": 600,
        "wires": [
            [
                "5a5f4f51.0f8df"
            ]
        ]
    },
    {
        "id": "5a5f4f51.0f8df",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "msg.payload = \"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1960,
        "y": 600,
        "wires": [
            [
                "c235a762.b41728"
            ]
        ]
    },
    {
        "id": "ebb3f5aa.e489a8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Comparing password",
        "info": "",
        "x": 980,
        "y": 720,
        "wires": []
    },
    {
        "id": "2dc1468a.9f38aa",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Testing Encryption",
        "info": "",
        "x": 190,
        "y": 120,
        "wires": []
    },
    {
        "id": "e80987ac.a6f468",
        "type": "inject",
        "z": "e3742b89.114eb8",
        "name": "TestVerify",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"txt\":\"nitin\",\"hash\":\"$2a$10$.cE1q47IoHm1TLZ9EkFhieJ1/mZMvkqlluZOEl6qp32BzAOS0BMYe\"}",
        "payloadType": "json",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "eceb05f4.775178"
            ]
        ]
    },
    {
        "id": "ecb8306c.187b8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Testing Description",
        "info": "",
        "x": 190,
        "y": 240,
        "wires": []
    },
    {
        "id": "76bb6372.f46a3c",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "if (msg.error.source.count == 1)\n{\n    msg.payload = \"Error! Username already exist\";\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1960,
        "y": 660,
        "wires": [
            [
                "a53fdd24.6636e",
                "c235a762.b41728"
            ]
        ]
    },
    {
        "id": "a1a4c1f4.63c25",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "if (msg.payload.affectedRows == 1)\n{\n    msg.payload = \"Successfully registered\";\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 540,
        "wires": [
            [
                "c235a762.b41728",
                "7dec084a.a1d508",
                "f663ce50.abf66"
            ]
        ]
    },
    {
        "id": "b0b0ca2b.d8c348",
        "type": "ui_template",
        "z": "e3742b89.114eb8",
        "group": "cbdc940b.3c4378",
        "name": "",
        "order": 2,
        "width": 15,
        "height": 3,
        "format": "<style>\n    #history {\n      font-family: \"Arial\";\n        border-collapse: collapse;\n        width: 100%;\n        }\n        \n        #history td, #history th {\n        border: 1px solid #ddd;\n        padding: 8px;\n        }\n        #history tr:nth-child(even){background-color: #A8EEF8;}\n        \n        #history tr:hover {background-color: #40aeea;}\n        \n        #history th {\n        padding-top: 12px;\n        padding-bottom: 12px;\n        text-align: center;\n        background-color: #696969;\n        color: white;\n        }\n        </style>\n        \n        <table id=\"history\" border=\"1\">\n            <tr align=\"center\">\n\n                 <th>ID</th>\n                 <th>Username</th>\n                 <th>Password (Hash)</th>\n               \n            </tr>\n                <tbody>\n                    <tr align=\"center\" ng-repeat=\"row in msg.payload\">\n                        <td ng-repeat=\"item in row\" >{{item}}</td>\n                        </tr>\n                        </tbody>\n                        </table>\n        ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1480,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f663ce50.abf66",
        "type": "link out",
        "z": "e3742b89.114eb8",
        "name": "TriggerSelect1",
        "links": [
            "b654721e.0bfea"
        ],
        "x": 1755,
        "y": 520,
        "wires": []
    },
    {
        "id": "b654721e.0bfea",
        "type": "link in",
        "z": "e3742b89.114eb8",
        "name": "",
        "links": [
            "741617fb.78da08",
            "f663ce50.abf66"
        ],
        "x": 155,
        "y": 920,
        "wires": [
            [
                "8e7fc9ae.5a7d38"
            ]
        ]
    },
    {
        "id": "4f7fec01.3d6fc4",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "User table",
        "info": "",
        "x": 160,
        "y": 880,
        "wires": []
    },
    {
        "id": "8e7fc9ae.5a7d38",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Select",
        "func": "msg.topic = \"Select * from `training`.`userdatabase`;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 920,
        "wires": [
            [
                "88245281.6f1d8"
            ]
        ]
    },
    {
        "id": "88245281.6f1d8",
        "type": "mysql",
        "z": "e3742b89.114eb8",
        "mydb": "cba93877ca03d070",
        "name": "",
        "x": 1290,
        "y": 920,
        "wires": [
            [
                "b0b0ca2b.d8c348"
            ]
        ]
    },
    {
        "id": "eb1e9966.c035a8",
        "type": "ui_button",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "cbdc940b.3c4378",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "orange",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 960,
        "wires": [
            [
                "8e7fc9ae.5a7d38"
            ]
        ]
    },
    {
        "id": "f272c225.8ea0a",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "msg.topic = \"ALTER TABLE training.userdatabase AUTO_INCREMENT = 2;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 1040,
        "wires": [
            [
                "88245281.6f1d8",
                "c97f7d9f.17098"
            ]
        ]
    },
    {
        "id": "7083899c.204f38",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "msg.topic = \"Delete from training.userdatabase where username != 'admin';\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 1000,
        "wires": [
            [
                "88245281.6f1d8"
            ]
        ]
    },
    {
        "id": "d9a65729.5ee288",
        "type": "ui_button",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "cbdc940b.3c4378",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete all",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 1000,
        "wires": [
            [
                "7083899c.204f38",
                "a6430ac9.8d80c8"
            ]
        ]
    },
    {
        "id": "a6430ac9.8d80c8",
        "type": "delay",
        "z": "e3742b89.114eb8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 360,
        "y": 1040,
        "wires": [
            [
                "f272c225.8ea0a"
            ]
        ]
    },
    {
        "id": "cab2ceec.4c6c9",
        "type": "catch",
        "z": "e3742b89.114eb8",
        "name": "",
        "scope": [
            "882a46a5.77e7c8"
        ],
        "uncaught": false,
        "x": 1310,
        "y": 880,
        "wires": [
            [
                "a1598b30.782208"
            ]
        ]
    },
    {
        "id": "a1598b30.782208",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "if (msg.error.source.count == 1)\n{\n    msg.payload = \"Error! Username or password is incorrect\";\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 880,
        "wires": [
            [
                "1f4a6376.869d7d",
                "b3b38e10.d6e6e"
            ]
        ]
    },
    {
        "id": "f3d071c7.f3ee7",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "cbdc940b.3c4378",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current logged in user",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 780,
        "y": 1140,
        "wires": []
    },
    {
        "id": "7284475d.4df378",
        "type": "inject",
        "z": "e3742b89.114eb8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 1140,
        "wires": [
            [
                "a606889c.be0628"
            ]
        ]
    },
    {
        "id": "a606889c.be0628",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "msg.payload = global.get('currentuser');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 1140,
        "wires": [
            [
                "f3d071c7.f3ee7",
                "4a6766fe.211dd8",
                "5c7e7b10.ebcb94"
            ]
        ]
    },
    {
        "id": "57eaee5b.335ae",
        "type": "ui_button",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "9e099cea.b3406",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Logout",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 190,
        "y": 780,
        "wires": [
            [
                "8481ce9a.b3a0e"
            ]
        ]
    },
    {
        "id": "8481ce9a.b3a0e",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Global.V",
        "func": "global.set('currentuser',\"Guest\");\nglobal.set('currentuserbuffer',\"\");\nglobal.set('username',\"\");\nglobal.set('password',\"\");\nglobal.set('passwordhash',\"\");\nglobal.set('passwordcheck',\"\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "8929750c.4cdb48",
        "type": "ui_form",
        "z": "e3742b89.114eb8",
        "name": "",
        "label": "Change password",
        "group": "c2cb81de.e029",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "old password",
                "value": "old password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "new password",
                "value": "new password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "repeat new password",
                "value": "repeat new password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "old password": "",
            "new password": "",
            "repeat new password": ""
        },
        "payload": "",
        "submit": "Update",
        "cancel": "cancel",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 230,
        "y": 1280,
        "wires": [
            [
                "4a57152f.3fdd2c",
                "4948f6fb.220f68",
                "7e8a033d.8e788c",
                "363770d.372f49"
            ]
        ]
    },
    {
        "id": "4948f6fb.220f68",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Set old password",
        "func": "//verying password\nvar x = msg.payload[\"old password\"];\nglobal.set('oldpassword',x)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 1320,
        "wires": [
            [
                "f78be9ee.7dc198"
            ]
        ]
    },
    {
        "id": "4a57152f.3fdd2c",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1280,
        "wires": []
    },
    {
        "id": "7e8a033d.8e788c",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Error handling new password",
        "func": "//verying password\nvar x = msg.payload[\"new password\"];\nvar y = msg.payload[\"repeat new password\"];\n\nif (x == y)\n{\nglobal.set('passwordmatch', true);\nglobal.set('newpassword',x)\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "e4ec2c90.1925c",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1360,
        "wires": []
    },
    {
        "id": "df38e927.1519f8",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Check old password",
        "func": "var oldpassword = global.get('oldpassword');\n\nmsg.payload =\n{\n    \"txt\": \"\"+oldpassword+\"\",\n    \"hash\": \"\"+msg.payload[0].password+\"\"\n}\n\nreturn msg;  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 1320,
        "wires": [
            [
                "6496b349.07146c"
            ]
        ]
    },
    {
        "id": "f78be9ee.7dc198",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "SELECT",
        "func": "var currentuser = global.get('currentuser')\nmsg.topic = \"SELECT username, password FROM training.userdatabase where username = '\"+currentuser+\"';\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 1320,
        "wires": [
            [
                "34d021f1.09a10e"
            ]
        ]
    },
    {
        "id": "34d021f1.09a10e",
        "type": "mysql",
        "z": "e3742b89.114eb8",
        "mydb": "cba93877ca03d070",
        "name": "",
        "x": 930,
        "y": 1320,
        "wires": [
            [
                "df38e927.1519f8",
                "252448df.82b088"
            ]
        ]
    },
    {
        "id": "3dd51d9c.3d7402",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Return new password",
        "func": "var newpassword = global.get('newpassword');\nvar passwordmatch = global.get('passwordmatch') || false;\nif (msg.match === true && passwordmatch === true)\n{\n   msg.payload = newpassword;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1640,
        "y": 1320,
        "wires": [
            [
                "3d83a986.bb1476"
            ]
        ]
    },
    {
        "id": "7a41289f.8212c8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Fetching old password",
        "info": "",
        "x": 740,
        "y": 1280,
        "wires": []
    },
    {
        "id": "854247fe.342ca8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Old password result",
        "info": "",
        "x": 1370,
        "y": 1280,
        "wires": []
    },
    {
        "id": "991c9418.cdd488",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Encrypt new password",
        "info": "",
        "x": 1840,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9de3d608.5251c8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Verify new password match",
        "info": "",
        "x": 530,
        "y": 1400,
        "wires": []
    },
    {
        "id": "798f81f0.51ad6",
        "type": "mysql",
        "z": "e3742b89.114eb8",
        "mydb": "cba93877ca03d070",
        "name": "",
        "x": 2250,
        "y": 1320,
        "wires": [
            [
                "5ab2823d.db103c",
                "7f94f82a.76b628"
            ]
        ]
    },
    {
        "id": "aad8c8aa.941fb8",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Update new password",
        "func": "var currentuser = global.get ('currentuser');\nmsg.topic = \"UPDATE `training`.`userdatabase` SET `password` = '\"+msg.payload+\"' WHERE `username` = '\"+currentuser+\"';\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2060,
        "y": 1320,
        "wires": [
            [
                "798f81f0.51ad6"
            ]
        ]
    },
    {
        "id": "741617fb.78da08",
        "type": "link out",
        "z": "e3742b89.114eb8",
        "name": "TriggerSelect2",
        "links": [
            "b654721e.0bfea"
        ],
        "x": 2615,
        "y": 1360,
        "wires": []
    },
    {
        "id": "5ab2823d.db103c",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "if (msg.payload.changedRows == 1 && msg.match === true)\n{\n    msg.payload = \"Password updated\"\n    return msg;\n}\n\nif (msg.payload.changedRows === 0 && msg.match === true)\n{\n    msg.payload = \"Old and new password is same\"\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2460,
        "y": 1320,
        "wires": [
            [
                "741617fb.78da08",
                "101debc8.284454",
                "33a7c1e2.d78c1e"
            ]
        ]
    },
    {
        "id": "101debc8.284454",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "c2cb81de.e029",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2990,
        "y": 1280,
        "wires": []
    },
    {
        "id": "a310e21e.7c1b4",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Update password",
        "info": "",
        "x": 220,
        "y": 1240,
        "wires": []
    },
    {
        "id": "252448df.82b088",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1280,
        "wires": []
    },
    {
        "id": "7f94f82a.76b628",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "33a7c1e2.d78c1e",
        "type": "delay",
        "z": "e3742b89.114eb8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2640,
        "y": 1320,
        "wires": [
            [
                "b9403ee4.6c657"
            ]
        ]
    },
    {
        "id": "b9403ee4.6c657",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "msg.payload = \"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2800,
        "y": 1320,
        "wires": [
            [
                "101debc8.284454"
            ]
        ]
    },
    {
        "id": "a5a7fdae.a0eb",
        "type": "link out",
        "z": "e3742b89.114eb8",
        "name": "UpdatePasswordStatus",
        "links": [
            "fae3c487.b542f8"
        ],
        "x": 635,
        "y": 1440,
        "wires": []
    },
    {
        "id": "fae3c487.b542f8",
        "type": "link in",
        "z": "e3742b89.114eb8",
        "name": "",
        "links": [
            "a5a7fdae.a0eb"
        ],
        "x": 2455,
        "y": 1260,
        "wires": [
            [
                "101debc8.284454",
                "33a7c1e2.d78c1e"
            ]
        ]
    },
    {
        "id": "13f6fdc4.f88002",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Old password feedback",
        "func": "if (msg.match === false)\n{\n   msg.payload = \"Old password is incorrect\";\n   return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "101debc8.284454"
            ]
        ]
    },
    {
        "id": "363770d.372f49",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Update Status",
        "func": "//verying password\nvar x = msg.payload[\"new password\"];\nvar y = msg.payload[\"repeat new password\"];\n\nif (x != y)\n{\nglobal.set('passwordmatch', false);\nmsg.payload = \"new password does not match\"\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 1440,
        "wires": [
            [
                "a5a7fdae.a0eb"
            ]
        ]
    },
    {
        "id": "c97f7d9f.17098",
        "type": "delay",
        "z": "e3742b89.114eb8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 700,
        "y": 1040,
        "wires": [
            [
                "c969018c.62af3"
            ]
        ]
    },
    {
        "id": "c969018c.62af3",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Select",
        "func": "msg.topic = \"Select * from `training`.`userdatabase`;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 1040,
        "wires": [
            [
                "88245281.6f1d8"
            ]
        ]
    },
    {
        "id": "12f941d0.853b8e",
        "type": "inject",
        "z": "e3742b89.114eb8",
        "name": "Delete all",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 1080,
        "wires": [
            [
                "c08ceafb.091008"
            ]
        ]
    },
    {
        "id": "c08ceafb.091008",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "msg.topic = \"Delete from training.userdatabase;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 1080,
        "wires": [
            [
                "88245281.6f1d8"
            ]
        ]
    },
    {
        "id": "2e160656.e921ba",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Control",
        "info": "",
        "x": 170,
        "y": 1540,
        "wires": []
    },
    {
        "id": "5be6e580.4e695c",
        "type": "ui_button",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "28d6b116.9db92e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start Filling",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 190,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "86fb0c78.0ea06",
        "type": "ui_button",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "28d6b116.9db92e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start Draining",
        "tooltip": "",
        "color": "",
        "bgcolor": "orange",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "935380ea.e7d09",
        "type": "ui_slider",
        "z": "e3742b89.114eb8",
        "name": "",
        "label": "Draining Valve",
        "tooltip": "",
        "group": "afe95a02.48f298",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 200,
        "y": 1880,
        "wires": [
            [
                "542598c5.527598"
            ]
        ]
    },
    {
        "id": "b879ab83.9b19a8",
        "type": "ui_slider",
        "z": "e3742b89.114eb8",
        "name": "",
        "label": "Filling Valve",
        "tooltip": "",
        "group": "afe95a02.48f298",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 190,
        "y": 1660,
        "wires": [
            [
                "24caacef.9c6c84"
            ]
        ]
    },
    {
        "id": "30f6fb54.c0de54",
        "type": "ui_button",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "28d6b116.9db92e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop Filling",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 190,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "e96c50b5.05565",
        "type": "ui_button",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "28d6b116.9db92e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop Draining",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "9248cb64.fdbc18",
        "type": "ui_gauge",
        "z": "e3742b89.114eb8",
        "name": "",
        "group": "fc48c562.accd48",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Water Level",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 890,
        "y": 1760,
        "wires": []
    },
    {
        "id": "24caacef.9c6c84",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "28d6b116.9db92e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Filling valve",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 430,
        "y": 1660,
        "wires": []
    },
    {
        "id": "542598c5.527598",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "28d6b116.9db92e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Draining valve",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 460,
        "y": 1880,
        "wires": []
    },
    {
        "id": "4c8d12aa.533cbc",
        "type": "ui_ui_control",
        "z": "e3742b89.114eb8",
        "name": "",
        "events": "all",
        "x": 680,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "ec7825f6.16bad8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "UI Control",
        "info": "",
        "x": 180,
        "y": 1940,
        "wires": []
    },
    {
        "id": "a9948f71.47707",
        "type": "inject",
        "z": "e3742b89.114eb8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2000,
        "wires": [
            [
                "e9fcb881.c69c08",
                "87c10da9.6b90f",
                "52da1e8e.3b85d"
            ]
        ]
    },
    {
        "id": "e9fcb881.c69c08",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Admin",
        "func": "var user = global.get('currentuser');\n\nif(user != \"admin\")\n{\n\nmsg.payload =\n{\n    \"tabs\": {\n        \"hide\": \"Settings\"\n        \n    },\n        \"group\": \n    {\n        \"hide\": [\"Operator_Parameters\"]\n        \n    }\n    \n \n}\n return msg;  \n}\n\nif(user == \"admin\")\n{\n\nmsg.payload =\n{\n    \"tabs\": {\n        \"show\": \"Settings\"\n        \n    },\n            \"group\": \n    {\n        \"show\": [\"Operator_Parameters\"]\n        \n    }\n \n}\n return msg;  \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1980,
        "wires": [
            [
                "4c8d12aa.533cbc",
                "c8300e8d.d18a2"
            ]
        ]
    },
    {
        "id": "c8300e8d.d18a2",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1980,
        "wires": []
    },
    {
        "id": "4a6766fe.211dd8",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "c2cb81de.e029",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current logged in user",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 780,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5c7e7b10.ebcb94",
        "type": "ui_text",
        "z": "e3742b89.114eb8",
        "group": "9e099cea.b3406",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current logged in user",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 780,
        "y": 1220,
        "wires": []
    },
    {
        "id": "87c10da9.6b90f",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Operator",
        "func": "var user = global.get('currentuser');\n\nif(user != \"admin\" || user !== \"Guest\")\n{\n\nmsg.payload =\n{\n    \"group\": \n    {\n        \"show\": [\"Operator_Control\", \"Operator_Update_password\"]\n        \n    }\n    \n}\n return msg;  \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 2040,
        "wires": [
            [
                "4c8d12aa.533cbc",
                "c8300e8d.d18a2"
            ]
        ]
    },
    {
        "id": "52da1e8e.3b85d",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "Guest user",
        "func": "var user = global.get('currentuser');\n\nif(user === \"Guest\")\n{\n\nmsg.payload =\n{\n    \"group\": \n    {\n        \"hide\": [\"Operator_Parameters\", \"Operator_Control\", \"Operator_Update_password\" ],\n        \n    }\n    \n}\n return msg;  \n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2100,
        "wires": [
            [
                "4c8d12aa.533cbc",
                "c8300e8d.d18a2"
            ]
        ]
    },
    {
        "id": "18d3787.16c0a88",
        "type": "inject",
        "z": "e3742b89.114eb8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 1760,
        "wires": [
            [
                "8e52ad70.b2e03"
            ]
        ]
    },
    {
        "id": "8e52ad70.b2e03",
        "type": "function",
        "z": "e3742b89.114eb8",
        "name": "",
        "func": "var level = context.get('level');\nvar change = context.get('change');\n\nlevel = level + change;\ncontext.set('level',level) \n\nif (level == 100)\n{\n    context.set('change',-1) \n}\n\nif (level === 0)\n{\n    context.set('change',+1) \n}\n\n\n\nmsg.payload = level;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\ncontext.set('level',0);\ncontext.set('change',1);",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1760,
        "wires": [
            [
                "9248cb64.fdbc18",
                "c874c602.e71718"
            ]
        ]
    },
    {
        "id": "c874c602.e71718",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1720,
        "wires": []
    },
    {
        "id": "cd006484.c438e8",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Level Simulation",
        "info": "",
        "x": 210,
        "y": 1740,
        "wires": []
    },
    {
        "id": "450dd169.eea9e",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Bcrypt",
        "info": "https://cs.wellesley.edu/~webdb/lectures/bcrypt/bcrypt-part.shtml",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "ccffa015.083bc",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 540,
        "wires": []
    },
    {
        "id": "514f11c0.986f4",
        "type": "debug",
        "z": "e3742b89.114eb8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 460,
        "wires": []
    },
    {
        "id": "4b62ca49.0672b4",
        "type": "comment",
        "z": "e3742b89.114eb8",
        "name": "Current User",
        "info": "",
        "x": 190,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b8493930.f0d2a8",
        "type": "bcrypt",
        "z": "e3742b89.114eb8",
        "name": "",
        "action": "encrypt",
        "field": "",
        "hash": "payload",
        "outputs": 1,
        "rounds": "10",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "f30663cb.0dcd9"
            ]
        ]
    },
    {
        "id": "eceb05f4.775178",
        "type": "bcrypt",
        "z": "e3742b89.114eb8",
        "name": "",
        "action": "verify",
        "field": "payload.txt",
        "hash": "payload.hash",
        "outputs": 1,
        "rounds": 10,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "d9a151cb.e539"
            ]
        ]
    },
    {
        "id": "d8a8c10a.8dbd6",
        "type": "bcrypt",
        "z": "e3742b89.114eb8",
        "name": "",
        "action": "encrypt",
        "field": "payload",
        "hash": "",
        "outputs": 1,
        "rounds": 10,
        "x": 590,
        "y": 500,
        "wires": [
            [
                "708d14aa.4e8ddc",
                "ccffa015.083bc"
            ]
        ]
    },
    {
        "id": "694d388.7c07ec8",
        "type": "bcrypt",
        "z": "e3742b89.114eb8",
        "name": "",
        "action": "verify",
        "field": "payload.txt",
        "hash": "payload.hash",
        "outputs": 1,
        "rounds": 10,
        "x": 990,
        "y": 760,
        "wires": [
            [
                "5f574ed9.ab6c3",
                "6fb3fac0.e0c054"
            ]
        ]
    },
    {
        "id": "6496b349.07146c",
        "type": "bcrypt",
        "z": "e3742b89.114eb8",
        "name": "",
        "action": "verify",
        "field": "payload.txt",
        "hash": "payload.hash",
        "outputs": 1,
        "rounds": 10,
        "x": 1370,
        "y": 1320,
        "wires": [
            [
                "e4ec2c90.1925c",
                "3dd51d9c.3d7402",
                "13f6fdc4.f88002"
            ]
        ]
    },
    {
        "id": "3d83a986.bb1476",
        "type": "bcrypt",
        "z": "e3742b89.114eb8",
        "name": "",
        "action": "encrypt",
        "field": "payload",
        "hash": "",
        "outputs": 1,
        "rounds": 10,
        "x": 1850,
        "y": 1320,
        "wires": [
            [
                "aad8c8aa.941fb8"
            ]
        ]
    },
    {
        "id": "ba270af6826b21f8",
        "type": "inject",
        "z": "322f47aac7111cf3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 300,
        "wires": [
            [
                "8bda80c5d11d1f34"
            ]
        ]
    },
    {
        "id": "8bda80c5d11d1f34",
        "type": "function",
        "z": "322f47aac7111cf3",
        "name": "function 46",
        "func": "node.warn(global.get('pump1.runInd'))\n\nreturn ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5c2e99f880744bd1",
        "type": "function",
        "z": "322f47aac7111cf3",
        "name": "function 47",
        "func": "let p1 = global.get('pump1') || {}\nlet p2 = global.get('pump2') || {}\nlet t1 = global.get('tank1') || {}\nlet t2 = global.get('tank2') || {}\n\nif (p1.runInd) {\n    p1.runInd = 1\n} else {\n    p1.runInd = 0\n}\n\nif (p2.runInd) {\n    p2.runInd = 1\n} else {\n    p2.runInd = 0\n}\n\nmsg.topic = \"nodered tags\"\nmsg.timeStamp = Date.now()\nmsg.payload = { 'pump1': p1, 'pump2': p2, 'tank1': t1, 'tank2': t2 }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 580,
        "wires": [
            []
        ]
    }
]