[
    {
        "id": "d2c6df88ed86b5d6",
        "type": "tab",
        "label": "DAPT LSA",
        "disabled": true,
        "info": ""
    },
    {
        "id": "0cf6a08aac35df8c",
        "type": "group",
        "z": "d2c6df88ed86b5d6",
        "name": "Testing Program",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "3537b7aa99adf2d2",
            "662cf8cb58c6cf62",
            "78c1f39e3fd71196",
            "0d8c4c0b52b0e4fb",
            "331b915efcc96d9b",
            "ae4850d6436a133c",
            "b2372d64e8a725f0",
            "574d179930b20b5c",
            "992fd3647ca2adf5",
            "c9b3616ecea245df",
            "13a58b298d70be8b",
            "cfe0de30100b6ac2",
            "9de0cd5e2952bbb7",
            "eb230e16d06444c3",
            "42e823695f5e855c",
            "798e3a98f0277f0b",
            "52483ea6df875ce2",
            "c1304c50c3333c22",
            "1ed4de640ae198c5",
            "ea96aafd9e4a3f60",
            "cc39918a84befcf6",
            "dc30f94ee627038e",
            "02db076f541cf23b",
            "7c5d7a37d36b3bfe",
            "8396766f96baef45",
            "cc9040b25a7ca1cf",
            "c595d5da347864e0",
            "28123d6d468e3acf",
            "1793baf78c3a9a5b",
            "1491d805d8a84f31",
            "032970f154bf206f"
        ],
        "x": 54,
        "y": 1999,
        "w": 822,
        "h": 650
    },
    {
        "id": "a0e99e192636d080",
        "type": "group",
        "z": "d2c6df88ed86b5d6",
        "name": "Get Values from IO",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "9d227c93fdb40480",
            "8c958004a004a5e1",
            "9798d899cf56cec9",
            "458c37f4bdeaf101",
            "efeecfa73cc9d294",
            "cc66f9ec12dbab30",
            "2a8a8e2ee74936bf",
            "9895888690958003",
            "c2431e7a4395d87d",
            "79df7e21895f8801",
            "61c9329b4c34a9c1",
            "12fb909f2bc31e0a",
            "c8bcb46674b3ba7d",
            "3c0f55a908d8da39",
            "475a0e7c77383550",
            "0fe824de26cab234",
            "740aab45c6102197",
            "ada0a57cec4086ea",
            "ce89d9135feedfe6",
            "2073f869d1e631b3"
        ],
        "x": 48,
        "y": 1233,
        "w": 948,
        "h": 396
    },
    {
        "id": "44b095c87ee56d5a",
        "type": "group",
        "z": "d2c6df88ed86b5d6",
        "name": "api calls",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "52f1676021d538b1",
            "d3ccc24efe7fd01d",
            "e152448fb64124b0",
            "ae7474a950bb68ff",
            "59625dc20addbc1e",
            "4943ecde9b25f3f8",
            "23761ff0cfd45845",
            "ad29e6f9b79bc88d",
            "da995a8124c5adba",
            "c3b94a4b2e23805f",
            "2c9d8d7d7c1eab20",
            "53ef2fe621d03939",
            "1da5ba86a4d8b788",
            "e711a2513188105f",
            "bbf0d68f2ed9f082",
            "a46b508952b6c26f",
            "9fe25812e4059fbe",
            "dfb541b16382588a",
            "3b44078d18465d86",
            "13fae89dfcbd3f45",
            "66d3a92008794a0c",
            "b60b09a826b95814",
            "c2fd37bf937ce107",
            "f87d3978e631568c",
            "5dc017168f03158f",
            "983de8ca3013edc9",
            "b7dabde0314de691",
            "4df47366f46753f1",
            "eeb4516ed95443ed",
            "c7a4bf3ca067161b",
            "ae0cde19190187f7",
            "29ebcdd4b258d6ea",
            "2b3e9adeb3123008",
            "72b2d02234e0af74",
            "822d521a224c016c",
            "d6fc136184b12392",
            "c14180ceb6eb26ae",
            "4c7f1f241c89da1c",
            "988e159534aa0c23",
            "4672c409ca9dcab8",
            "9c54bd23032325d8",
            "0ed700a609d70266",
            "38a3f1fc76e13319",
            "022c3dc6365b760f",
            "bbe2b866162c1d80",
            "304425e78e8162e7",
            "c28fbc2b3418a4e4",
            "5569364a8312ed08",
            "d41915cb782dd63f",
            "181a4965ed13f1a0",
            "33b7d64d051b3d84",
            "abd0fd3274572435",
            "85235bc6126aec7a",
            "f740d3c2b7b6bd3e",
            "e67157901a0e90bb",
            "50d1f3eb65c2940d",
            "1e0a281695b78193",
            "35f4138bbfcb4d18",
            "0590d33edf7ac415",
            "46c2c9e3690fc077",
            "5317c039d6b7bbe3",
            "39fdb5372e23fdc7",
            "fc5d1666da11678d",
            "48e6b91801a3942b",
            "91009f54c6031cb4",
            "1682a273632c696f",
            "5f1428a560b4a7bc",
            "54bda03b2be25f84",
            "4e03d6cdd197740d",
            "fe7c70c42637cb4d",
            "d20913165425c278",
            "0a318e9c525778e1",
            "95a1bafbe095118b",
            "8b1252adc97a0615",
            "70906a72500aebc1",
            "a6a4537b7fea5e1c",
            "710654a4f5236e71",
            "655723bb84b84b2d",
            "c62a7ed1f4df3ebc",
            "300648329e1676b9",
            "940ee579a69c1d75",
            "91081456c57ccf6d",
            "d7c266c816fe6ede",
            "e15701b903c2ef60",
            "4c277309833935ba",
            "2338a2c7e07f76da",
            "6177dddaa6f5da78",
            "eac116f5229de8ea",
            "80b9ce8ff5749813",
            "acca1e112cfc481f",
            "167a3b19b3672d74",
            "5cd1a29a0517a2cf",
            "dd226dadde64eedb",
            "859f8807d3478bc8",
            "347f99c10cbc9f9d",
            "dcf9e2e317275987",
            "096b282837549b50",
            "70f2fae26f6ac459",
            "1cdf7549e299e044"
        ],
        "x": 24,
        "y": 19,
        "w": 1042,
        "h": 1162
    },
    {
        "id": "7b93404230a4fcc3",
        "type": "group",
        "z": "d2c6df88ed86b5d6",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "ea97ee61f5313123",
            "62f3b1a31a63ba4b",
            "4cf77c99688452a3",
            "e02ff04f11b55e39",
            "b1861341826fe969",
            "e94129d6b1b1dbe8",
            "68ae0d91c4a92f3b",
            "4856032cfd5247d8",
            "628272e9a05f5f89"
        ],
        "x": 114,
        "y": 2659,
        "w": 692,
        "h": 202
    },
    {
        "id": "cfe0de30100b6ac2",
        "type": "group",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "16ad852f5ecba737",
            "d31a4314a460d91e",
            "8e34d0b08b4d4736",
            "2b1cc975057d6fdb",
            "c26c9cef441e4061",
            "9e1b19482f57e226",
            "c816f399687816cc",
            "d5b529e5fd57dd3f",
            "58f4cd4659588e85",
            "0fbca09c501fdd64",
            "7830b49e21c669b8",
            "19cc2146732c2065"
        ],
        "x": 94,
        "y": 2139,
        "w": 462,
        "h": 302
    },
    {
        "id": "c2431e7a4395d87d",
        "type": "group",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "e8cc0e4be7ae782a",
            "6696ebd9e0ede564",
            "8064ef691e870463",
            "aaaa99ddd018c484",
            "cf5d223c8ac70410",
            "b691cc6ec9e5527e",
            "373d3e5b6d71063e"
        ],
        "x": 74,
        "y": 1259,
        "w": 432,
        "h": 242
    },
    {
        "id": "e8cc0e4be7ae782a",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "c2431e7a4395d87d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "ts",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 170,
        "y": 1300,
        "wires": [
            [
                "6696ebd9e0ede564"
            ]
        ]
    },
    {
        "id": "8c958004a004a5e1",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "add ch Idx to msg {loop}",
        "func": "var i \nfor(i = 1; i < 2; i++){\n    msg.channelIndex = i;\n    node.send(msg);\n}\n\n// return;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1340,
        "wires": [
            [
                "9d227c93fdb40480"
            ]
        ]
    },
    {
        "id": "9798d899cf56cec9",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "context store ch array",
        "func": "var i = msg.channelIndex\nvar ts = flow.get('chTS'+ i) || []\nvar ch = flow.get('ch' + i) || []\nvar val = msg.payload \n\nch.push(val);\nts.push(Date.now());\nflow.set('ch' + i, ch)\nflow.set('chTS' + i, ts);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1500,
        "wires": [
            [
                "9895888690958003"
            ]
        ]
    },
    {
        "id": "6696ebd9e0ede564",
        "type": "delay",
        "z": "d2c6df88ed86b5d6",
        "g": "c2431e7a4395d87d",
        "name": "interval delay",
        "pauseType": "delayv",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 1340,
        "wires": [
            [
                "8064ef691e870463",
                "8c958004a004a5e1"
            ]
        ]
    },
    {
        "id": "8064ef691e870463",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "c2431e7a4395d87d",
        "name": "var repeat interval",
        "func": "if (msg.topic === \"interval\") {\n    context.set(\"interval\", msg.payload);\n    msg = null;\n} else {\n    var interval = flow.get(\"interval\") || context.get(\"interval\");\n    if (interval) msg.delay = interval;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1420,
        "wires": [
            [
                "6696ebd9e0ede564"
            ]
        ]
    },
    {
        "id": "aaaa99ddd018c484",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "c2431e7a4395d87d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "interval",
        "payload": "200",
        "payloadType": "num",
        "x": 190,
        "y": 1420,
        "wires": [
            [
                "8064ef691e870463"
            ]
        ]
    },
    {
        "id": "458c37f4bdeaf101",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "clear cache ",
        "func": "flow.set('channelsTesting', {1: false, 2: false, 3: false, 4: false, 5: false, 6: false, 7: false, 8: false})\n\n// set flow_calc obj to emtpy\nflow.set('flow_calc0', undefined);\nflow.set('flow_calc1', undefined);\nflow.set('flow_calc2', undefined);\nflow.set('flow_calc3', undefined);\nflow.set('flow_calc4', undefined);\nflow.set('flow_calc5', undefined);\nflow.set('flow_calc6', undefined);\nflow.set('flow_calc7', undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1420,
        "wires": [
            [
                "79df7e21895f8801"
            ]
        ]
    },
    {
        "id": "cf5d223c8ac70410",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "c2431e7a4395d87d",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "stop",
        "x": 170,
        "y": 1340,
        "wires": [
            [
                "6696ebd9e0ede564"
            ]
        ]
    },
    {
        "id": "efeecfa73cc9d294",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payloadType": "date",
        "x": 630,
        "y": 1380,
        "wires": [
            [
                "458c37f4bdeaf101"
            ]
        ]
    },
    {
        "id": "a76450e9f6b3a3bc",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "clean and prep msg",
        "func": "// grabbing the raw pressure value\nlet p_in = msg.payload;\n\n// grabbing the current channel\nlet idx = msg.channelIndex;\n\nlet clear_results = msg.clear_results;\n\nif (idx === undefined) {\n    idx = flow.get('test_ch') || 0;\n}\n\nlet testingStarted = msg.testingStarted || false;\nlet testingStopped = msg.testingStopped || false;\nlet seekStarted = msg.seekStarted || false;\nlet seekStopped = msg.seekStopped || false;\nlet lp_seekStarted = msg.lp_seekStarted || false;\nlet lp_seekStopped = msg.lp_seekStopped || false;\nlet hp_seekStarted = msg.hp_seekStarted || false;\nlet hp_seekStopped = msg.hp_seekStopped || false;\n\n// set the msg object to empty to only include necessary data\nmsg = {};\n\n// check if we're testing/seeking this channel\nlet testing = flow.get('testingState' + idx) || false;\n// let contextTesting = context.get('testingState' + idx) || false;\nlet visibleLeak = flow.get('visible_leak_ch' + idx) || false;\n// \n// if (contextTesting === false && testing === true) {\n//     context.set('testing' + idx, true);\n//     msg.testingStarted = true;\n// } else if (contextTesting === true && testing === false) {\n//     context.set('testing' + idx, false);\n//     msg.testingStopped = true;\n// }\n// \nlet seeking = flow.get('seekState' + idx) || false;\n// let contextSeeking = context.get('seekState' + idx) || false;\n// \n// if (contextSeeking === false && seeking === true) {\n//     context.set('seekState' + idx, true);\n//     msg.seekStarted = true;\n// } else if (contextSeeking === true && seeking === false) {\n//     context.set('seekState' + idx, true);\n//     msg.seekStopped = true;\n// }\n// \nlet lp_seeking = flow.get('lp_seekState' + idx) || false;\n// let lp_contextSeeking = context.get('lp_seekState' + idx) || false;\n// \n// if (lp_contextSeeking === false && lp_seeking === true) {\n//     context.set('lp_seekState' + idx, true);\n//     msg.lp_seekStarted = true;\n// } else if (lp_contextSeeking === true && lp_seeking === false) {\n//     context.set('lp_seekState' + idx, true);\n//     msg.lp_seekStopped = true;\n// }\n// \nlet hp_seeking = flow.get('hp_seekState' + idx) || false;\n// let hp_contextSeeking = context.get('hp_seekState' + idx) || false;\n// \n// if (hp_contextSeeking === false && hp_seeking === true) {\n//     context.set('hp_seekState' + idx, true);\n//     msg.hp_seekStarted = true;\n// } else if (hp_contextSeeking === true && hp_seeking === false) {\n//     context.set('hp_seekState' + idx, true);\n//     msg.hp_seekStopped = true;\n// }\n\nlet planInfo = flow.get('planInfo' + idx) || {\n    apiNo: \"\",\n    block: \"\",\n    channel: NaN,\n    comments: \"\",\n    critical: \"\",\n    critID: \"\",\n    critName: \"\",\n    decayType: NaN,\n    drillingContractor: \"\",\n    enghigh: NaN,\n    englow: NaN,\n    expirationDate: \"\",\n    lp_duration: NaN,\n    lp_maxTotalDecay: NaN,\n    lp_minPressure: NaN,\n    lp_maxPressure: NaN,\n    lp_testPressure: NaN,\n    lp_trend: false,\n    hp_duration: NaN,\n    hp_maxTotalDecay: NaN,\n    hp_minPressure: NaN,\n    hp_maxPressure: NaN,\n    hp_testPressure: NaN,\n    hp_trend: false,\n    ocsgNo: \"\",\n    operator: \"\",\n    pipeSize: \"\",\n    planID: \"\",\n    planName: \"\",\n    projectID: \"\",\n    projectName: \"\",\n    reportComments: \"\",\n    rawhigh: NaN,\n    rawlow: NaN,\n    rigName: \"\",\n    rwpCFR: NaN,\n    serialNumber: \"\",\n    single: \"\",\n    stack: \"\",\n    tare: NaN,\n    transducerID: \"\",\n    transducerName: \"\",\n    wellName: \"\"\n}\n\nflow.set('planInfo' + planInfo.channelnum, planInfo);\n\nmsg.payload = p_in;\nmsg.topic = \"psi_mAvg_ch\" + idx;\nmsg.channelIndex = idx;\nmsg.testing = testing;\nmsg.seeking = seeking;\nmsg.lp_seeking = lp_seeking;\nmsg.hp_seeking = hp_seeking;\nmsg.planInfo = planInfo;\nmsg.clear_results = clear_results;\nmsg.visibleLeak = visibleLeak;\nmsg.testingStarted = testingStarted ? testingStarted : undefined;\nmsg.testingStopped = testingStopped ? testingStopped : undefined;\nmsg.seekStarted = seekStarted ? seekStarted : undefined;\nmsg.seekStopped = seekStopped ? seekStopped : undefined;\nmsg.lp_seekStarted = lp_seekStarted ? lp_seekStarted : undefined;\nmsg.lp_seekStopped = lp_seekStopped ? lp_seekStopped : undefined;\nmsg.hp_seekStarted = hp_seekStarted ? hp_seekStarted : undefined;\nmsg.hp_seekStopped = hp_seekStopped ? hp_seekStopped : undefined;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1860,
        "wires": [
            [
                "ec9654d383eec155"
            ]
        ]
    },
    {
        "id": "cc66f9ec12dbab30",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "I/O Data Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 875,
        "y": 1340,
        "wires": []
    },
    {
        "id": "675ab78a47991b8b",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "name": "Data Calc In",
        "links": [
            "c9b3616ecea245df",
            "4e03d6cdd197740d",
            "cc66f9ec12dbab30",
            "2338a2c7e07f76da",
            "9109eeb0bf81deda",
            "ac2139983ca3cb91",
            "44f47973c5b0d49e",
            "6177dddaa6f5da78",
            "5cd1a29a0517a2cf",
            "dd226dadde64eedb",
            "859f8807d3478bc8",
            "347f99c10cbc9f9d",
            "4c277309833935ba"
        ],
        "x": 85,
        "y": 1740,
        "wires": [
            [
                "6b3ca7397c469799"
            ]
        ]
    },
    {
        "id": "f4b7e1f1fd858088",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set psi obj",
        "func": "//flow.set(msg.topic, msg.payload)\n\nif (msg.payload === \"clear context\") {\n    return msg;\n}\n\nlet pAv\npsiFlowData = flow.get(msg.topic) || {}\npsiFlowData.psiAvg.push(msg.pAvg)\npsiFlowData.tStamp.push(msg.tStamp)\ncount = psiFlowData.msgCount\nn = count + 1\npAv = {'psiAvg': psiFlowData.psiAvg, \"msgCount\": n, \"tStamp\": psiFlowData.tStamp}\nflow.set(msg.topic, pAv)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1700,
        "wires": [
            [
                "65e91262f2d75414"
            ]
        ]
    },
    {
        "id": "ea97ee61f5313123",
        "type": "mysql",
        "z": "d2c6df88ed86b5d6",
        "d": true,
        "g": "7b93404230a4fcc3",
        "mydb": "3a9158adb601d14b",
        "name": "Write to dapt db",
        "x": 700,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "62f3b1a31a63ba4b",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "7b93404230a4fcc3",
        "name": "Process results",
        "func": "let resultsHeader = msg.resultsHeader;\nlet resultsData = msg.resultsData;\n\nlet contextResultsHeader = context.get('resultsHeader_ch' + msg.channelIndex) || null;\nlet contextResultsData = context.get('resultsData_ch' + msg.channelIndex) || [];\n\nlet resultsHeaderToWrite = null;\nlet resultsDataToWrite = null;\n\nlet writeResultsHeader = false;\nlet writeResultsData = false;\n\nif (contextResultsHeader && resultsHeader) {\n    if (!contextResultsHeader) {\n        writeResultsHeader = true;\n        context.set('resultsHeader_ch' + msg.channelIndex, resultsHeader);\n    } else {\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.pl_stat === resultsHeader.pl_stat ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.result === resultsHeader.result ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.start === resultsHeader.start ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.stop === resultsHeader.stop ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprvldtn_start_t === resultsHeader.lprvldtn_start_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprvldtn_stop_t === resultsHeader.lprvldtn_stop_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprvldtn_start_p === resultsHeader.lprvldtn_start_p ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprvldtn_stop_p === resultsHeader.lprvldtn_stop_p ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprdeltap_drtn === resultsHeader.lprdeltap_drtn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprend_roc === resultsHeader.lprend_roc ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprseek_start_t === resultsHeader.lprseek_start_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprseek_stop_t === resultsHeader.lprseek_stop_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lpresult === resultsHeader.lpresult ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lprfinal_trend === resultsHeader.lprfinal_trend ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprvldtn_start_t === resultsHeader.hprvldtn_start_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprvldtn_stop_t === resultsHeader.hprvldtn_stop_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprvldtn_start_p === resultsHeader.hprvldtn_start_p ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprvldtn_stop_p === resultsHeader.hprvldtn_stop_p ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprdeltap_drtn === resultsHeader.hprdeltap_drtn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprend_roc === resultsHeader.hprend_roc ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprseek_start_t === resultsHeader.hprseek_start_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprseek_stop_t === resultsHeader.hprseek_stop_t ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hprfinal_trend === resultsHeader.hprfinal_trend ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hpresult === resultsHeader.hpresult ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.tpt_start === resultsHeader.tpt_start ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.tpt_stop === resultsHeader.tpt_stop ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.pr_id === resultsHeader.pr_id ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.plan_id === resultsHeader.plan_id ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.td_ch === resultsHeader.td_ch ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.serialnumber === resultsHeader.serialnumber ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.test === resultsHeader.test ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.type === resultsHeader.type ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.crit_yn === resultsHeader.crit_yn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.well === resultsHeader.well ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.cntrct === resultsHeader.cntrct ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.op === resultsHeader.op ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.ocsg === resultsHeader.ocsg ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.blk === resultsHeader.blk ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.api === resultsHeader.api ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.stack === resultsHeader.stack ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.trans_ser === resultsHeader.trans_ser ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.trans_exp === resultsHeader.trans_exp ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lptest === resultsHeader.lptest ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lpmax_wrn === resultsHeader.lpmax_wrn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lpmin_wrn === resultsHeader.lpmin_wrn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lpmin_drtn === resultsHeader.lpmin_drtn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lpdeltap_drtn_per === resultsHeader.lpdeltap_drtn_per ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lpdeltap_drtn_psi === resultsHeader.lpdeltap_drtn_psi ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.lptrend === resultsHeader.lptrend ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hptest === resultsHeader.hptest ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hpmax_wrn === resultsHeader.hpmax_wrn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hpmin_wrn === resultsHeader.hpmin_wrn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hpmin_drtn === resultsHeader.hpmin_drtn ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hpdeltap_drtn_per === resultsHeader.hpdeltap_drtn_per ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hpdeltap_drtn_psi === resultsHeader.hpdeltap_drtn_psi ? true : false;\n        writeResultsHeader = writeResultsHeader || contextResultsHeader.hptrend === resultsHeader.hptrend ? true : false;\n        if (writeResultsHeader) {\n            context.set('resultsHeader_ch' + msg.channelIndex, resultsHeader);\n            msg.resultsHeaderToWrite = resultsHeader;\n            msg.writeResultsHeader = writeResultsHeader;\n        }\n    }\n}\n\nif (contextResultsData.length > 0 && resultsData) {\n    contextResultsData.push(resultsData);\n    \n    // pushes every 40 seconds\n    if (contextResultsData.length > 300) {\n        resultsDataToWrite = contextResultsData.slice(0, 300);\n        contextResultsData = contextResultsData.slice(300);\n        writeResultsData = true;\n        msg.resultsDataToWrite = resultsDataToWrite;\n        msg.writeResultsData = writeResultsData;\n    }\n    \n    context.set('resultsData_ch' + msg.channelIndex, contextResultsData);\n}\n\nif (msg.writeResultsData && msg.writeResultsHeader) {\n    msg.payload = {resultsData: msg.resultsDataToWrite, resultsHeader: msg.resultsHeaderToWrite};\n} else if (msg.writeResultsData) {\n    msg.payload = {resultsData: msg.resultsDataToWrite};\n} else if (msg.writeResultsHeader) {\n    msg.payload = {resultsHeader: msg.resultsHeaderToWrite};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2740,
        "wires": [
            [
                "68ae0d91c4a92f3b",
                "e94129d6b1b1dbe8",
                "e02ff04f11b55e39"
            ]
        ]
    },
    {
        "id": "b691cc6ec9e5527e",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "c2431e7a4395d87d",
        "name": "Recording In",
        "links": [
            "ae7474a950bb68ff",
            "da995a8124c5adba"
        ],
        "x": 275,
        "y": 1300,
        "wires": [
            [
                "6696ebd9e0ede564"
            ]
        ]
    },
    {
        "id": "373d3e5b6d71063e",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "c2431e7a4395d87d",
        "name": "Interval In",
        "links": [
            "e711a2513188105f"
        ],
        "x": 315,
        "y": 1460,
        "wires": [
            [
                "8064ef691e870463"
            ]
        ]
    },
    {
        "id": "2a8a8e2ee74936bf",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "Start Recording In",
        "links": [
            "ae7474a950bb68ff"
        ],
        "x": 555,
        "y": 1420,
        "wires": [
            [
                "458c37f4bdeaf101"
            ]
        ]
    },
    {
        "id": "9895888690958003",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "context store ch array debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 755,
        "y": 1500,
        "wires": [],
        "l": false
    },
    {
        "id": "77609e5329ec309b",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "set roc obj debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 865,
        "y": 1740,
        "wires": [],
        "l": false
    },
    {
        "id": "ec9654d383eec155",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "avg psi calc",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('psi_mAvg_ch' + i, undefined);\n        context.set('psi_mAvg_ch' + i + '_count', undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('psi_mAvg_ch' + msg.channelIndex, undefined);\n    context.set('psi_mAvg_ch' + msg.channelIndex + '_count', undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('psi_mAvg_ch' + msg.channelIndex, []);\n    context.set('psi_mAvg_ch' + msg.channelIndex + '_count', 0);\n    return msg;\n}\n\n// get context data stored on node for the channel's psi_mAvg\nlet data = context.get(msg.topic) || [];\n\n// get the array amount size\nlet amount = flow.get('amount') || 50;\n\n// create a new data array with the msg.payload first\n// then clone the old data array, and slice off any excess values\ndata = [msg.payload, ...data].slice(0, amount);\n\n// set the context data to the new data value\ncontext.set(msg.topic, data);\n\nmsg.rawPressure = msg.payload;\n\n// add together all the values in the data\n// let num = data.reduce((acc, cur) => {\n//     return acc + cur\n// }, 0);\n\nlet num = 0;\nfor (let i = 0; i < data.length; i++) {\n    num += data[i];\n}\n\n// send the msg along, can not send null values\nmsg.payload = \"continue\";\n// set the pAvg to averaged value of the data\nmsg.pAvg = (num / data.length);\n// have a common time stamp for all values\nmsg.tStamp = Date.now();\n// show the pAvg value on the node\nnode.status(msg.pAvg);\n\nif (msg.lp_seeking) {\n    let minWarn = msg.pAvg <= msg.planInfo.lp_minPressure + 1;\n    let maxWarn = msg.pAvg >= msg.planInfo.lp_maxPressure - 1;\n    if (minWarn || maxWarn) {\n        msg.lp_seeking = false;\n        msg.seeking = false;\n        msg.lp_seekStarted = undefined;\n        msg.lp_seekStopped = true;\n        flow.set('seekState' + msg.channelIndex, false);\n        flow.set('lp_seekState' + msg.channelIndex, false);\n    }\n}\n\nif (msg.hp_seeking) {\n    let minWarn = msg.pAvg <= msg.planInfo.hp_minPressure + 1;\n    let maxWarn = msg.pAvg >= msg.planInfo.hp_maxPressure - 1;\n    if (minWarn || maxWarn) {\n        msg.hp_seeking = false;\n        msg.seeking = false;\n        msg.hp_seekStarted = undefined;\n        msg.hp_seekStopped = true;\n        flow.set('seekState' + msg.channelIndex, false);\n        flow.set('hp_seekState' + msg.channelIndex, false);\n    }\n}\n\n// Keep track of how many pAvg have been recorded for testing purposes\nif (msg.testing && msg.seeking) {\n    let pAvg_count = context.get(msg.topic + '_count') || 0;\n    pAvg_count = pAvg_count + 1;\n    context.set(msg.topic + '_count', pAvg_count);\n    let lp_seeking = flow.get('lp_seekState' + msg.channelIndex) || false;\n    msg.pAvg_count = pAvg_count;\n} else {\n    context.set(msg.topic + '_count', 0);\n    msg.pAvg_count = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet keys = context.keys\nfor (i = 0; i < keys.length; i++){\n    keys[i] = []\n}",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1860,
        "wires": [
            [
                "2d8dec0f2865b01d"
            ]
        ]
    },
    {
        "id": "ddbafc9648b69f42",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set amount",
        "func": "flow.set('amount', msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "e0ca40f7c60bafa8",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "50",
        "payloadType": "num",
        "x": 460,
        "y": 1740,
        "wires": [
            [
                "ddbafc9648b69f42"
            ]
        ]
    },
    {
        "id": "3537b7aa99adf2d2",
        "type": "file in",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "CSV File Path",
        "filename": "/home/dev/secured/dapt_pressures_9_tf_curve.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 420,
        "y": 2040,
        "wires": [
            [
                "0d8c4c0b52b0e4fb",
                "9de0cd5e2952bbb7"
            ]
        ]
    },
    {
        "id": "662cf8cb58c6cf62",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "parse csv data into channels debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 755,
        "y": 2180,
        "wires": [],
        "l": false
    },
    {
        "id": "78c1f39e3fd71196",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "240",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 2040,
        "wires": [
            [
                "3537b7aa99adf2d2"
            ]
        ]
    },
    {
        "id": "0d8c4c0b52b0e4fb",
        "type": "csv",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "CSV Parse",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 2080,
        "wires": [
            [
                "331b915efcc96d9b",
                "eb230e16d06444c3"
            ]
        ]
    },
    {
        "id": "331b915efcc96d9b",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_pressures from csv",
        "func": "let vals = msg.payload\nlet test_vals = []\nfor (i = 0; i < vals.length; i++){\n    test_vals[i] = vals[i][\"col1\"];\n }\n\nflow.set('test_pressures', test_vals)\nmsg.payload = test_vals;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2120,
        "wires": [
            [
                "42e823695f5e855c"
            ]
        ]
    },
    {
        "id": "16ad852f5ecba737",
        "type": "delay",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "interval delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 430,
        "y": 2220,
        "wires": [
            [
                "d31a4314a460d91e",
                "ae4850d6436a133c"
            ]
        ]
    },
    {
        "id": "d31a4314a460d91e",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "var repeat interval",
        "func": "if (msg.topic === \"interval\") {\n    context.set(\"interval\", msg.payload);\n    msg = null;\n} else {\n    var interval = flow.get(\"interval\") || context.get(\"interval\");\n    if (interval) msg.delay = interval;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2300,
        "wires": [
            [
                "16ad852f5ecba737"
            ]
        ]
    },
    {
        "id": "8e34d0b08b4d4736",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "interval",
        "payload": "200",
        "payloadType": "num",
        "x": 210,
        "y": 2300,
        "wires": [
            [
                "d31a4314a460d91e"
            ]
        ]
    },
    {
        "id": "2b1cc975057d6fdb",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "CSV Testing In",
        "links": [
            "4df47366f46753f1",
            "b7dabde0314de691"
        ],
        "x": 415,
        "y": 2180,
        "wires": [
            [
                "16ad852f5ecba737"
            ]
        ]
    },
    {
        "id": "c26c9cef441e4061",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "CSV Interval In",
        "links": [
            "eeb4516ed95443ed"
        ],
        "x": 295,
        "y": 2340,
        "wires": [
            [
                "d31a4314a460d91e"
            ]
        ]
    },
    {
        "id": "ae4850d6436a133c",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "parse csv data into channels",
        "func": "idx = flow.get('tstIdx')\nvals = flow.get('test_pressures')\npress = vals[idx]\ntCh = flow.get('test_ch')\nflow.set('tstIdx', idx + 1)\nmsg.payload = press\nmsg.channelIndex = tCh\nnode.status(press)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2220,
        "wires": [
            [
                "b2372d64e8a725f0",
                "662cf8cb58c6cf62",
                "c9b3616ecea245df"
            ]
        ]
    },
    {
        "id": "b2372d64e8a725f0",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "context store ch array",
        "func": "var i = msg.channelIndex;\nvar ts = flow.get('chTS'+ i) || [];\nvar ch = flow.get('ch' + i) || [];\nvar val = msg.payload;\n\nch.push(val);\nts.push(Date.now());\nflow.set('ch' + i, ch);\nflow.set('chTS' + i, ts);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "574d179930b20b5c",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set testingState",
        "func": "let channelIndex = flow.get('test_ch')\nif (msg.reset === 1) {\n    flow.set('testingState' + channelIndex, false);\n} else if (msg.payload = \"startTesting\") {\n    flow.set('testingState' + channelIndex, true);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2220,
        "wires": [
            [
                "58f4cd4659588e85"
            ]
        ]
    },
    {
        "id": "992fd3647ca2adf5",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "CSV Testing In",
        "links": [
            "b7dabde0314de691"
        ],
        "x": 95,
        "y": 2220,
        "wires": [
            [
                "574d179930b20b5c"
            ]
        ]
    },
    {
        "id": "c9b3616ecea245df",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "CSV Data Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 835,
        "y": 2220,
        "wires": []
    },
    {
        "id": "13a58b298d70be8b",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "Set CSV Data for Testing In",
        "links": [
            "b7dabde0314de691"
        ],
        "x": 255,
        "y": 2080,
        "wires": [
            [
                "3537b7aa99adf2d2"
            ]
        ]
    },
    {
        "id": "2d8dec0f2865b01d",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "avg roc calc",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('ch' + i, undefined);\n        context.set('ch' + i + \"_midex\", undefined);\n        context.set('ch' + i + \"_roc\", undefined);\n        context.set('ch' + i + \"_roca\", undefined);\n        context.set('ch' + i + \"_rocb\", undefined);\n        context.set('ch' + i + \"_time\", undefined);\n        context.set('ch' + i + '_a', undefined);\n        context.set('ch' + i + '_b', undefined);\n        context.set('ch' + i + '_t', undefined);\n        context.set('ch' + i + '_ts', undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + \"_midex\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roc\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roca\", undefined);\n    context.set('ch' + msg.channelIndex + \"_rocb\", undefined);\n    context.set('ch' + msg.channelIndex + \"_time\", undefined);\n    context.set('ch' + msg.channelIndex + '_a', undefined);\n    context.set('ch' + msg.channelIndex + '_b', undefined);\n    context.set('ch' + msg.channelIndex + '_t', undefined);\n    context.set('ch' + msg.channelIndex + '_ts', undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + \"_midex\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roc\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roca\", undefined);\n    context.set('ch' + msg.channelIndex + \"_rocb\", undefined);\n    context.set('ch' + msg.channelIndex + \"_time\", undefined);\n    context.set('ch' + msg.channelIndex + '_a', undefined);\n    context.set('ch' + msg.channelIndex + '_b', undefined);\n    context.set('ch' + msg.channelIndex + '_t', undefined);\n    context.set('ch' + msg.channelIndex + '_ts', undefined);\n    return msg;\n}\n\nlet data = context.get('ch' + msg.channelIndex) || [];\nlet amount = flow.get('amount') || 50;\ndata = [msg.pAvg, ...data].slice(0, amount);\ncontext.set('ch' + msg.channelIndex, data);\nlet ts = context.get('ch' + msg.channelIndex + '_ts') || [];\nts = [msg.tStamp, ...ts].slice(0, amount);\ncontext.set('ch' + msg.channelIndex + '_ts', ts);\n\nlet midex = (amount / 2)\nlet roc, roca, rocb, time, a, aa, b, ba, t, timeTF\nmsg.payload = \"continue\"\nmsg.roc = NaN\n\nif (data && data.length >= amount) {\n    time = ((ts[0] - ts[amount - 1])/1000);\n    timeTF = time.toFixed()\n    roca = data.slice(0, midex);\n    rocb = data.slice(midex, amount);\n    a = roca.reduce((acc, cur) => acc + cur);\n    aa = a / roca.length\n    b = rocb.reduce((acc, cur) => acc + cur);\n    ba = b / rocb.length\n    t = (60/(timeTF/2));\n    roc = (aa-ba)*t\n    msg.roc = roc\n}\n\ncontext.set('ch' + msg.channelIndex + \"_roc\", roc)\ncontext.set('ch' + msg.channelIndex + \"_roca\", roca)\ncontext.set('ch' + msg.channelIndex + \"_rocb\", rocb)\ncontext.set('ch' + msg.channelIndex + \"_time\", timeTF)\ncontext.set('ch' + msg.channelIndex + '_a', aa)\ncontext.set('ch' + msg.channelIndex + '_b', ba)\ncontext.set('ch' + msg.channelIndex + '_t', t)\ncontext.set('ch' + msg.channelIndex + '_midex', midex)\n\nmsg.topic = \"roc_mAvg_ch\" + msg.channelIndex\nnode.status(msg.roc)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 5,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet keys= context.keys\nfor (i = 0; i < keys.length; i++){\n    keys[i] = []\n}",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1860,
        "wires": [
            [
                "1de77a663065b4c5"
            ]
        ]
    },
    {
        "id": "24bf8bf09c9c813b",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set roc obj",
        "func": "//flow.set(msg.topic, msg.payload)\n\nif (msg.payload === \"clear context\") {\n    return msg;\n}\n\nlet rAv\nlet amount = flow.get('amount') || 50\nrocFlowData = flow.get(msg.topic) || {}\ncount = rocFlowData.msgCount\nif (count >=  amount){\n    rocFlowData.rocAvg.push(msg.roc)\n    rocFlowData.tStamp.push(msg.tStamp)\n}\nn = count + 1;\nrAv = {'rocAvg': rocFlowData.rocAvg , \"msgCount\": n, \"tStamp\":rocFlowData.tStamp }\nflow.set(msg.topic, rAv)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1740,
        "wires": [
            [
                "77609e5329ec309b"
            ]
        ]
    },
    {
        "id": "9d227c93fdb40480",
        "type": "groov-io-read",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "device": "06eb262519ab1e8b",
        "dataType": "channel-analog",
        "moduleIndex": "1",
        "channelIndex": "0",
        "mmpAddress": "0xF0D81000",
        "mmpType": "int32",
        "mmpLength": "1",
        "mmpEncoding": "ascii",
        "value": "",
        "valueType": "msg.payload",
        "itemName": "",
        "name": "i/o read",
        "x": 795,
        "y": 1340,
        "wires": [
            [
                "cc66f9ec12dbab30"
            ]
        ],
        "l": false
    },
    {
        "id": "65e91262f2d75414",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "set psi obj debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 845,
        "y": 1700,
        "wires": [],
        "l": false
    },
    {
        "id": "b861611c1fff1bc4",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "delta p calc",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('ch' + i, undefined);\n        context.set('ch' + i + '_deltaP_Array', undefined);\n        context.set('ch' + i + '_deltaPvalinitial', undefined);\n        context.set('ch' + i + '_deltaPvalcurrent', undefined);\n        context.set('ch' + i + '_deltaPval', undefined);\n        context.set('ch' + i + '_data_length', undefined);\n        context.set('ch' + i + '_vArrSz', undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + '_deltaP_Array', undefined);\n    context.set('ch' + msg.channelIndex + '_deltaPvalinitial', undefined);\n    context.set('ch' + msg.channelIndex + '_deltaPvalcurrent', undefined);\n    context.set('ch' + msg.channelIndex + '_deltaPval', undefined);\n    context.set('ch' + msg.channelIndex + '_data_length', undefined);\n    context.set('ch' + msg.channelIndex + '_vArrSz', undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + '_deltaP_Array', undefined);\n    context.set('ch' + msg.channelIndex + '_deltaPvalinitial', undefined);\n    context.set('ch' + msg.channelIndex + '_deltaPvalcurrent', undefined);\n    context.set('ch' + msg.channelIndex + '_deltaPval', undefined);\n    context.set('ch' + msg.channelIndex + '_data_length', undefined);\n    context.set('ch' + msg.channelIndex + '_vArrSz', undefined);\n    return msg;\n}\n\nif (msg.testing) {\n    if (msg.seeking) {\n        let testTime = 5 // make a global criteria for each ch\n        let acquisitionRate = 5 // how many times in a second we get data\n        let secondsInAMinute = 60\n        if (msg.lp_seeking) {\n            testTime = msg.planInfo.lp_duration;\n        } else if (msg.hp_seeking) {\n            testTime = msg.planInfo.hp_duration;\n        }\n        let validationArraySize = testTime * acquisitionRate * secondsInAMinute\n        msg.validationArraySize = validationArraySize;\n        context.set('ch' + msg.channelIndex + '_vArrSz', validationArraySize);\n        \n        let data = context.get('ch' + msg.channelIndex) || []\n        if (data && data.length >= validationArraySize) {\n            data = [msg.pAvg, ...data].slice(0, validationArraySize);\n        } else {\n            data = [msg.pAvg, ...data]\n        }\n        context.set('ch' + msg.channelIndex, data);\n        \n        let deltaPval;\n        \n        if (data && data.length > 1) {\n            deltaPval = Math.abs(data[0] - data[data.length - 1]);\n            context.set('ch' + msg.channelIndex + '_deltaPvalinitial', data[data.length - 1])\n            context.set('ch' + msg.channelIndex + '_deltaPvalcurrent', data[0])\n\n            if (data.length < validationArraySize) {\n                deltaPval = (deltaPval * validationArraySize) / data.length;\n            }\n        } else {\n            deltaPval = 0\n        }\n        \n        let deltaP_Array = context.get('ch' + msg.channelIndex + '_deltaP_Array') || []\n        deltaP_Array = [deltaPval, ...deltaP_Array];\n        context.set('ch' + msg.channelIndex + '_deltaP_Array', deltaP_Array);\n        context.set('ch' + msg.channelIndex + '_deltaPval', deltaPval);\n        context.set('ch' + msg.channelIndex + '_data_length', data.length);\n        \n        msg.payload = \"continue\";\n        msg.deltaP = deltaPval;\n        msg.topic = 'deltaP_ch' + msg.channelIndex;\n        \n        node.status(msg.deltaP);\n        \n        return msg;\n    } else {\n        context.set('ch' + msg.channelIndex, [])\n        context.set('ch' + msg.channelIndex + \"_deltaP_Array\", [])\n        context.set('ch' + msg.channelIndex + '_deltaPvalinitial', undefined)\n        context.set('ch' + msg.channelIndex + '_deltaPvalcurrent', undefined)\n        context.set('ch' + msg.channelIndex + '_deltaPval', undefined);\n        context.set('ch' + msg.channelIndex + '_data_length', undefined);\n        context.set('ch' + msg.channelIndex + '_vArrSz', undefined);\n    }\n}\n\nmsg.payload = \"continue\";\nmsg.deltaP = NaN;\nmsg.topic = 'deltaP_ch' + msg.channelIndex;\n\nnode.status(msg.deltaP);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet keys = context.keys\nfor (i = 0; i < keys.length; i++){\n    keys[i] = []\n}",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1860,
        "wires": [
            [
                "8ce08e235c4e99e6"
            ]
        ]
    },
    {
        "id": "8590003d99e0204e",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set deltaP obj",
        "func": "if (msg.payload === \"clear context\") {\n    return msg;\n}\n\nlet delP\ndelP = flow.get(msg.topic) || {}\ncount = delP.msgCount + 1\ndelP.deltaP.push(msg.deltaP)\ndelP.tStamp.push(msg.tStamp)\ndeltaP_info = {'deltaP': delP.deltaP , 'msgCount': count, 'tStamp': delP.tStamp}\nflow.set(msg.topic, deltaP_info)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1780,
        "wires": [
            [
                "7a8a35123bda6da1"
            ]
        ]
    },
    {
        "id": "7a8a35123bda6da1",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "set deltaP obj debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 885,
        "y": 1780,
        "wires": [],
        "l": false
    },
    {
        "id": "9e1b19482f57e226",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "startSeek",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "startSeek",
        "payload": "true",
        "payloadType": "bool",
        "x": 200,
        "y": 2360,
        "wires": [
            [
                "d5b529e5fd57dd3f"
            ]
        ]
    },
    {
        "id": "c816f399687816cc",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "stopSeek",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stopSeek",
        "payload": "false",
        "payloadType": "bool",
        "x": 200,
        "y": 2400,
        "wires": [
            [
                "d5b529e5fd57dd3f"
            ]
        ]
    },
    {
        "id": "d5b529e5fd57dd3f",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "set seek state",
        "func": "let channelIndex = flow.get('test_ch')\nflow.set('seekState' + channelIndex, msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2380,
        "wires": [
            [
                "19cc2146732c2065"
            ]
        ]
    },
    {
        "id": "663829ca21280a69",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "trend factor calc",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('ch' + i, undefined);\n        context.set('ch' + i + '_tf_Raw_Array', undefined);\n        context.set('ch' + i + '_tf_Calc_Array', undefined);\n        context.set('ch' + i + '_tf_Raw_Val', undefined);\n        context.set('ch' + i + '_tf_Ex_Val', undefined);\n        context.set('ch' + i + '_tf_Roc_Offset', undefined);\n        context.set('ch' + i + '_data_length', undefined);\n        context.set('ch' + i + '_decCurData', undefined);\n        context.set('ch' + i + '_exponent_values', undefined);\n        context.set('ch' + i + '_tf_Count', undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Raw_Array', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Calc_Array', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Raw_Val', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Ex_Val', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Roc_Offset', undefined);\n    context.set('ch' + msg.channelIndex + '_data_length', undefined);\n    context.set('ch' + msg.channelIndex + '_decCurData', undefined);\n    context.set('ch' + msg.channelIndex + '_exponent_values', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Count', undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Raw_Array', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Calc_Array', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Raw_Val', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Ex_Val', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Roc_Offset', undefined);\n    context.set('ch' + msg.channelIndex + '_data_length', undefined);\n    context.set('ch' + msg.channelIndex + '_decCurData', undefined);\n    context.set('ch' + msg.channelIndex + '_exponent_values', undefined);\n    context.set('ch' + msg.channelIndex + '_tf_Count', undefined);\n    return msg;\n}\n\nlet amount = flow.get('amount');\n// check if the channel of data is currently testing\nif (msg.testing) {\n    // check if the channel of data is currently seeking\n    // need to wait for tf_pAvg and tf_roc arrays to fill\n    if ((msg.lp_seeking && msg.planInfo.lp_trend) || (msg.hp_seeking && msg.planInfo.hp_trend)) {\n        if (msg.seeking && msg.pAvg_count > 200) {\n            // get tf weights object\n            let tf_weights = flow.get('tf_weights_ch' + msg.channelIndex);\n            \n            let testTime = 5 // make a global criteria for each ch\n            let acquisitionRate = 5 // how many times in a second we get data\n            let secondsInAMinute = 60\n            if (msg.lp_seeking) {\n                testTime = msg.planInfo.lp_duration;\n            } else if (msg.hp_seeking) {\n                testTime = msg.planInfo.hp_duration;\n            }\n            let validationArraySize = testTime * acquisitionRate * secondsInAMinute\n            \n            // set data values to a maximum of the validation array size\n            // of the average pressure values coming in\n            let data = context.get('ch' + msg.channelIndex) || []\n            data = [...data, msg.tf_pAvg]\n            if (data.length > validationArraySize) {\n                data = [...data].slice(1)\n            }\n            context.set('ch' + msg.channelIndex, data);\n            \n            let dataLength = data.length;\n            \n            // set up data array for decreasing current calculations\n            // let decCurData;\n            // if (dataLength >= 150) {\n            //     decCurData = [...data].slice(-150);\n            // } else {\n            //     decCurData = [...data];\n            // }\n            // \n            // msg.decCurData = decCurData;\n            // context.set('ch' + msg.channelIndex + '_decCurData', decCurData);\n            \n            // declare empty values for the tf raw value and the\n            // tf extrapolated value\n            let tfRawVal = NaN;\n            let tfExVal = NaN;\n            let decreasingTrend = NaN;\n            let decreasingCurrent = NaN;\n            let tfRocOffset = NaN;\n            let p1 = NaN;\n            let p2 = NaN;\n            let p3 = NaN;\n            // let dcVal = NaN;\n            \n            // Every 10 values you can do the calculations because there\n            // can not be a true middle value in the array of data for the\n            // 2nd weighted list. It has an even number of weights, so our\n            // 3/5ths fraction must become 6/10ths to accomodate for the\n            // number of values needing to be even.\n            if (dataLength % 10 === 0) {\n                \n                // declaring starting values to add to for the 3 lists\n                let tfVal1 = 0;\n                let tfVal2 = 0;\n                let tfVal3 = 0;\n                // declaring starting values to add to for the 3 weight lists\n                let tfWeightVal1 = 0;\n                let tfWeightVal2 = 0;\n                let tfWeightVal3 = 0;\n                \n                // getting array size of weight lists to compare against\n                let array_size = (dataLength * 3) / 5;\n                \n                // array.slice() method starts with the first integer listed,\n                // then it ends before the final integer listed.\n                // Ex: array.slice(2,5) will return an array of [2, 3, 4]\n                \n                // 1st weight calc data - First 60%, 0% - 60%\n                let tfWeight1 = tf_weights.tf_weight_1.slice(0, array_size);\n                \n                // 2nd weight calc data - Middle 60%, 20% - 80%\n                \n                // This grabs the 20% value to use as a start point, and to use\n                // to subtract from the total to find the end point\n                let data2_slice_point = dataLength / 5;\n                let data2 = data.slice(data2_slice_point, dataLength - data2_slice_point);\n                \n                // finding the amount of the middle array weights to match up\n                // with the amount of data we have so far\n                let tfWeight2 = [...tf_weights.tf_weight_2];\n                let midway_point = tfWeight2.length / 2; // 450\n                let array_size_mid = array_size / 2; // 3 if 10 data points\n                tfWeight2 = tfWeight2.slice(midway_point - array_size_mid, midway_point + array_size_mid)\n                \n                // 3rd weight calc data - Last 60%, 40% - 100%\n                let data3 = data.slice(dataLength - array_size);\n                // Reversing because tf weight 1 matches tf weight 3\n                data3.reverse();\n                \n                // finding tf weight values\n                for (let i = 0; i < array_size; i++) {\n                    // finding tfVal1\n                    tfVal1 = tfVal1 + (data[i] * tfWeight1[i]);\n                    tfWeightVal1 = tfWeightVal1 + tfWeight1[i];\n                    \n                    // finding tfVal2\n                    tfVal2 = tfVal2 + (data2[i] * tfWeight2[i]);\n                    tfWeightVal2 = tfWeightVal2 + tfWeight2[i];\n                    \n                    // finding tfVal3\n                    tfVal3 = tfVal3 + (data3[i] * tfWeight1[i]);\n                    tfWeightVal3 = tfWeightVal3 + tfWeight1[i];\n                }\n                \n                // calc P1, P2, P3 values\n                p1 = tfVal1 / tfWeightVal1;\n                p2 = tfVal2 / tfWeightVal2;\n                p3 = tfVal3 / tfWeightVal3;\n    \n                // finding tfVal\n                if (p1 - p2 !== 0) {\n                    // calculating the raw tf value\n                    tfRawVal = (p2 - p3) / (p1 - p2);\n                    // calculating the extrapolated tf value\n                    if (dataLength < validationArraySize) {\n                        let exponent_value = validationArraySize / (dataLength + 1)\n                        tfExVal = Math.pow(tfRawVal, exponent_value);\n                        // logging values for tf extrapolation\n                        let values = {\n                            tfRawVal: tfRawVal,\n                            tfExVal: tfExVal,\n                            expVal: exponent_value,\n                            valArrSz: validationArraySize,\n                            dataLength: dataLength,\n                            p1: p1,\n                            p2: p2,\n                            p3: p3\n                        }\n                        exponentValues = context.get('ch' + msg.channelIndex + '_exponent_values') || []\n                        exponentValues = [...exponentValues, values];\n                        context.set('ch' + msg.channelIndex + '_exponent_values', exponentValues);\n                    } else {\n                        tfExVal = tfRawVal;\n                    }\n                    \n                    // handling the tf roc offset when it is below |10|\n                    let tfRocOffset = 0;\n                    if (Math.abs(msg.tf_roc) < 10) {\n                        tfRocOffset = ((10 - (Math.abs(msg.tf_roc) / 10))) / 10;\n                    }\n                    \n                    tfExVal = tfExVal - tfRocOffset;\n                    \n                    // adding the tf raw value to the context array\n                    let tf_Raw_Array = context.get('ch' + msg.channelIndex + '_tf_Raw_Array') || []\n                    tf_Raw_Array = [...tf_Raw_Array, tfRawVal];\n                    \n                    let tf_Calc_Array = context.get('ch' + msg.channelIndex + '_tf_Calc_Array') || []\n                    let oldTfExVal = context.get('ch' + msg.channelIndex + '_tf_Ex_Val') || NaN;\n                    let tfCount = context.get('ch' + msg.channelIndex + '_tf_Count') || 0;\n                    let new_tf_Ex_Vals = [];\n                    let tf_Ex_Diff = tfExVal - oldTfExVal;\n                    let tf_Ex_Inc = tf_Ex_Diff / (tfCount + 1);\n                    \n                    // filling in the values between the calculated tf values\n                    for (let i = 0; i < tfCount; i++) {\n                        oldTfExVal = oldTfExVal + tf_Ex_Inc;\n                        new_tf_Ex_Vals.push(oldTfExVal)\n                    }\n    \n                    tf_Calc_Array = [...tf_Calc_Array, ...new_tf_Ex_Vals, tfExVal];\n                    \n                    let trend_count = 0;\n                    let tc_above_9_value = false;\n                    let current_count = 0;\n                    let cc_above_9_value = false;\n                    let decreasingTrendTotal = 0;\n                    let decreasingCurrentTotal = 0;\n                    for (let i = tf_Calc_Array.length - 1; i >= 0 || trend_count <= 750; i--) {\n                        if (trend_count <= 750) {\n                            let array_val = tf_Calc_Array[i];\n                            trend_count = trend_count + 1;\n                            decreasingTrendTotal = decreasingTrendTotal + array_val;\n                            if (!tc_above_9_value && array_val >= .9) {\n                                tc_above_9_value = true;\n                            }\n                            if (current_count <= 150) {\n                                current_count = current_count + 1;\n                                decreasingCurrentTotal = decreasingTrendTotal;\n                                if (!cc_above_9_value && array_val >= .9) {\n                                    cc_above_9_value = true;\n                                }\n                            }\n                        }\n                    }\n                    \n                    decreasingTrend = decreasingTrendTotal / trend_count;\n                    if (decreasingTrend < .9 && tc_above_9_value) {\n                        decreasingTrend = .91\n                    }\n                    \n                    decreasingCurrent = decreasingCurrentTotal / current_count;\n                    if (decreasingCurrent < .9 && cc_above_9_value) {\n                        decreasingCurrent = .91\n                    }\n                    \n                    \n                    context.set('ch' + msg.channelIndex + '_tf_Raw_Array', tf_Raw_Array);\n                    context.set('ch' + msg.channelIndex + '_tf_Calc_Array', tf_Calc_Array);\n                    context.set('ch' + msg.channelIndex + '_tf_Raw_Val', tfRawVal);\n                    context.set('ch' + msg.channelIndex + '_tf_Ex_Val', tfExVal);\n                    context.set('ch' + msg.channelIndex + '_decreasingTrendTotal', decreasingTrendTotal);\n                    context.set('ch' + msg.channelIndex + '_decreasingCurrentTotal', decreasingCurrentTotal);\n                    context.set('ch' + msg.channelIndex + '_tf_Count', 0);\n                    context.set('ch' + msg.channelIndex + '_tf_Roc_Offset', tfRocOffset);\n                } else {\n                    let tfCount = context.get('ch' + msg.channelIndex + '_tf_Count') || 0\n                    context.set('ch' + msg.channelIndex + '_tf_Count', tfCount + 1)\n                    context.set('ch' + msg.channelIndex + '_tf_Raw_Val', NaN);\n                }\n            } else {\n                let tfCount = context.get('ch' + msg.channelIndex + '_tf_Count') || 0\n                context.set('ch' + msg.channelIndex + '_tf_Count', tfCount + 1)\n                context.set('ch' + msg.channelIndex + '_tf_Raw_Val', NaN);\n            }\n            \n            context.set('ch' + msg.channelIndex + '_data_length', data.length);\n            \n            msg.payload = \"continue\";\n            msg.tfRaw = tfRawVal;\n            msg.tfEx = tfExVal;\n            msg.decreasingTrend = decreasingTrend;\n            msg.decreasingCurrent = decreasingCurrent;\n            msg.tfRocOffset = tfRocOffset;\n            msg.p1 = p1;\n            msg.p2 = p2;\n            msg.p3 = p3;\n            msg.topic = 'tf_ch' + msg.channelIndex;\n            \n            node.status(msg.tfEx)\n            return msg;\n        } else {\n            context.set('ch' + msg.channelIndex, []);\n            context.set('ch' + msg.channelIndex + '_tf_Raw_Array', []);\n            context.set('ch' + msg.channelIndex + '_tf_Calc_Array', []);\n            context.set('ch' + msg.channelIndex + '_tf_Raw_Val', undefined);\n            context.set('ch' + msg.channelIndex + '_tf_Ex_Val', undefined);\n            context.set('ch' + msg.channelIndex + '_decreasingTrend', undefined);\n            context.set('ch' + msg.channelIndex + '_decreasingCurrent', undefined);\n            context.set('ch' + msg.channelIndex + '_tf_Roc_Offset', undefined);\n            context.set('ch' + msg.channelIndex + '_data_length', undefined);\n        }\n    }\n}\n\nmsg.payload = \"continue\";\nmsg.tfRaw = NaN;\nmsg.tfEx = NaN;\nmsg.decreasingTrend = NaN;\nmsg.decreasingCurrent = NaN;\nmsg.tfRocOffset = NaN;\nmsg.p1 = NaN;\nmsg.p2 = NaN;\nmsg.p3 = NaN;\nmsg.decCurData = false;\nmsg.topic = 'tf_ch' + msg.channelIndex;\n\nnode.status(msg.tfEx);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1920,
        "wires": [
            [
                "0854e4488213b088"
            ]
        ]
    },
    {
        "id": "4514f458a42a3d5f",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set tf obj",
        "func": "if (msg.payload === \"clear context\") {\n    return msg;\n}\n\nlet tfFlowData = flow.get(msg.topic) || {}\ncount = tfFlowData.msgCount + 1\ntfFlowData.tf.push(msg.tfEx)\ntfFlowData.tfRaw.push(msg.tfRaw)\ntfFlowData.tStamp.push(msg.tStamp)\ntf_info = {'tf': tfFlowData.tf, 'tfRaw': tfFlowData.tfRaw, 'msgCount': count, 'tStamp': tfFlowData.tStamp}\nflow.set(msg.topic, tf_info)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1820,
        "wires": [
            [
                "55e6aee8036e43fa"
            ]
        ]
    },
    {
        "id": "55e6aee8036e43fa",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "set tf obj debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 845,
        "y": 1820,
        "wires": [],
        "l": false
    },
    {
        "id": "79df7e21895f8801",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "set tf weights",
        "func": "let default_weight_factor = flow.get('weight_factor') || 0.96;\nlet default_duration = 5;\nlet acquisition_rate = flow.get('acquisition_rate') || 5;\n\n// 5 minutes at 5 Hz\n// 5 pressures a second => 300 pressures a minute\n// Which means an array of 1500 pressures in 5 minutes\n\nlet default_validation_total_pressures = default_duration * 60 * acquisition_rate;\n\n// Split into 60% sections, that's 900 pressures each\nlet default_weight_total_pressures = (default_validation_total_pressures * 3) / 5;\n\nlet default_weight_1 = [];\nlet default_weight_2 = [];\nlet default_weight_3 = [];\n\n// Setting up default weight 1 array\nfor (let i = 0; i < default_weight_total_pressures; i++) {\n    if (i === 0) {\n        let pushedVal = 1;\n        default_weight_1 = [1];\n    } else {\n        let pushedVal = default_weight_1[i - 1] * default_weight_factor;\n        default_weight_1.push(pushedVal); \n    }\n}\n\n// Setting up default weight 2 array\nfor (let i = 1; i <= (default_weight_total_pressures / 2); i++) {\n    // Grabbing 450 values from weight array 1\n    default_weight_2.push(default_weight_1[i]);\n}\n\n// Saving the original array that was made\nlet original_default_weight_2 = [...default_weight_2];\n// Reversing the order since the start should be small\ndefault_weight_2.reverse();\n// Combining the two arrays to make the weighted portion in the middle\ndefault_weight_2 = [...default_weight_2, ...original_default_weight_2];\n\nfor (let i = 0; i < 8; i++) {\n    flow.set(\"tf_weights_ch\" + i, {\n        validation_total_pressures: default_validation_total_pressures,\n        weight_total_pressures: default_weight_total_pressures,\n        weight_factor: default_weight_factor,\n        tf_weight_1: default_weight_1,\n        tf_weight_2: default_weight_2\n    })\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1420,
        "wires": [
            [
                "12fb909f2bc31e0a"
            ]
        ]
    },
    {
        "id": "9de0cd5e2952bbb7",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "CSV File Path debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 555,
        "y": 2040,
        "wires": [],
        "l": false
    },
    {
        "id": "eb230e16d06444c3",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "CSV Parse debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 575,
        "y": 2080,
        "wires": [],
        "l": false
    },
    {
        "id": "42e823695f5e855c",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_pressures from csv debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 2120,
        "wires": [],
        "l": false
    },
    {
        "id": "d7275ca5c5dd2c02",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "name": "clear context",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "clear context",
        "payload": "clear context",
        "payloadType": "str",
        "x": 160,
        "y": 1700,
        "wires": [
            [
                "6b3ca7397c469799",
                "5a10b5173f9f9f94"
            ]
        ]
    },
    {
        "id": "1ca1ad442cba1f03",
        "type": "catch",
        "z": "d2c6df88ed86b5d6",
        "name": "",
        "scope": [
            "6b3ca7397c469799"
        ],
        "uncaught": false,
        "x": 440,
        "y": 1700,
        "wires": [
            [
                "2645c7dc7bc91245"
            ]
        ]
    },
    {
        "id": "2645c7dc7bc91245",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "calc catch debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 545,
        "y": 1700,
        "wires": [],
        "l": false
    },
    {
        "id": "026a3419242214d4",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set results data",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('resultsData_ch' + i, null);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('resultsData_ch' + msg.channelIndex, null);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('resultsData_ch' + msg.channelIndex, null);\n    return msg;\n}\n\nif (msg.testing) {\n    // values pulled from excel spreadsheet\n    let resultsData = context.get('resultsData_ch' + msg.channelIndex) || {\n        pr_id: [],\n        td_ch: [],\n        timestamp: [],\n        plan_name: [],\n        pressure: [],\n        raw_psi: [],\n        roc: [],\n        trend: [],\n        delta_p: [],\n        seeking_lp: [],\n        seeking_hp: [],\n        plan_id: [],\n        serialnumber: [],\n    };\n    \n    resultsData.pr_id.push(msg.planInfo.projectID);\n    resultsData.plan_id.push(msg.planInfo.planID);\n    resultsData.plan_name.push(msg.planInfo.planName);\n    resultsData.serialnumber.push(msg.planInfo.serialNumber);\n    resultsData.td_ch.push(msg.planInfo.channel + 1);\n    resultsData.seeking_lp.push(msg.lp_seeking);\n    resultsData.seeking_hp.push(msg.hp_seeking);\n    resultsData.timestamp.push(msg.tStamp);\n    resultsData.pressure.push(msg.pAvg);\n    resultsData.raw_psi.push(msg.rawPressure);\n    resultsData.roc.push(msg.roc);\n    resultsData.trend.push(msg.tfEx);\n    resultsData.delta_p.push(msg.deltaP);\n    \n    context.set('resultsData_ch' + msg.channelIndex, resultsData);\n    flow.set('resultsData_ch' + msg.channelIndex, resultsData);\n    msg.resultsData = resultsData;\n    return msg;\n}\n\nif (!msg.pAvg) {\n    msg.pAvg = -55555\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "8ce08e235c4e99e6",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "tf avg psi calc",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('tf_psi_mAvg_ch' + i, undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('tf_psi_mAvg_ch' + msg.channelIndex, undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('tf_psi_mAvg_ch' + msg.channelIndex, undefined);\n    return msg;\n}\n\nif (msg.testing) {\n    if (msg.seeking) {\n        if ((msg.lp_seeking && msg.planInfo.lp_trend) || (msg.hp_seeking && msg.planInfo.hp_trend)) {\n            // get context data stored on node for the channel's psi_mAvg\n            let data = context.get('tf_psi_mAvg_ch' + msg.channelIndex) || [];\n            \n            // get the array tf_psi_avg_amount size\n            let tf_psi_avg_amount = 100;\n            \n            // create a new data array with the msg.payload first\n            // then clone the old data array, and slice off any excess values\n            data = [msg.pAvg, ...data].slice(0, tf_psi_avg_amount);\n            \n            // set the context data to the new data value\n            context.set('tf_psi_mAvg_ch' + msg.channelIndex, data);\n            \n            // add together all the values in the data\n            let num = data.reduce((acc, cur) => {\n                return acc + cur\n            }, 0);\n            \n            // send the msg along, can not send null values\n            msg.payload = \"continue\";\n            // set the tf_pAvg to averaged value of the data\n            msg.tf_pAvg = (num / data.length);\n            // show the tf_pAvg value on the node\n            node.status(msg.tf_pAvg);\n            \n            return msg;\n        }\n    }\n}\n\ncontext.set('tf_psi_mAvg_ch' + msg.channelIndex, undefined);\nmsg.payload = \"continue\";\nmsg.tf_pAvg = NaN\nnode.status(msg.tf_pAvg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet keys = context.keys\nfor (i = 0; i < keys.length; i++){\n    keys[i] = []\n}",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1920,
        "wires": [
            [
                "b7c35e1f5452bd49"
            ]
        ]
    },
    {
        "id": "b7c35e1f5452bd49",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "tf avg roc calc",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('ch' + i, undefined);\n        context.set('ch' + i + \"_midex\", undefined);\n        context.set('ch' + i + \"_roc\", undefined);\n        context.set('ch' + i + \"_roca\", undefined);\n        context.set('ch' + i + \"_rocb\", undefined);\n        context.set('ch' + i + \"_time\", undefined);\n        context.set('ch' + i + '_a', undefined);\n        context.set('ch' + i + '_b', undefined);\n        context.set('ch' + i + '_t', undefined);\n        context.set('ch' + i + '_ts', undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + \"_midex\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roc\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roca\", undefined);\n    context.set('ch' + msg.channelIndex + \"_rocb\", undefined);\n    context.set('ch' + msg.channelIndex + \"_time\", undefined);\n    context.set('ch' + msg.channelIndex + '_a', undefined);\n    context.set('ch' + msg.channelIndex + '_b', undefined);\n    context.set('ch' + msg.channelIndex + '_t', undefined);\n    context.set('ch' + msg.channelIndex + '_ts', undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + \"_midex\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roc\", undefined);\n    context.set('ch' + msg.channelIndex + \"_roca\", undefined);\n    context.set('ch' + msg.channelIndex + \"_rocb\", undefined);\n    context.set('ch' + msg.channelIndex + \"_time\", undefined);\n    context.set('ch' + msg.channelIndex + '_a', undefined);\n    context.set('ch' + msg.channelIndex + '_b', undefined);\n    context.set('ch' + msg.channelIndex + '_t', undefined);\n    context.set('ch' + msg.channelIndex + '_ts', undefined);\n    return msg;\n}\n\nif (msg.testing) {\n    if (msg.seeking) {\n        if ((msg.lp_seeking && msg.planInfo.lp_trend) || (msg.hp_seeking && msg.planInfo.hp_trend)) {\n            let data = context.get('ch' + msg.channelIndex) || [];\n            let tf_roc_amount = 200; // 40 second average\n            data = [msg.pAvg, ...data].slice(0, tf_roc_amount);\n            context.set('ch' + msg.channelIndex, data);\n            let ts = context.get('ch' + msg.channelIndex + '_ts') || [];\n            ts = [msg.tStamp, ...ts].slice(0, tf_roc_amount);\n            context.set('ch' + msg.channelIndex + '_ts', ts);\n            \n            let midex = (tf_roc_amount / 2)\n            let roc, roca, rocb, time, a, aa, b, ba, t, timeTF\n            msg.payload = \"continue\"\n            msg.tf_roc = NaN\n            \n            if (data && data.length >= tf_roc_amount) {\n                time = ((ts[0] - ts[tf_roc_amount - 1])/1000);\n                timeTF = time.toFixed()\n                roca = data.slice(0, midex);\n                rocb = data.slice(midex, tf_roc_amount);\n                a = roca.reduce((acc, cur) => acc + cur);\n                aa = a / roca.length\n                b = rocb.reduce((acc, cur) => acc + cur);\n                ba = b / rocb.length\n                t = (60/(timeTF/2));\n                roc = (aa-ba)*t\n                msg.tf_roc = roc\n            }\n            \n            context.set('ch' + msg.channelIndex + \"_roc\", roc)\n            context.set('ch' + msg.channelIndex + \"_roca\", roca)\n            context.set('ch' + msg.channelIndex + \"_rocb\", rocb)\n            context.set('ch' + msg.channelIndex + \"_time\", timeTF)\n            context.set('ch' + msg.channelIndex + '_a', aa)\n            context.set('ch' + msg.channelIndex + '_b', ba)\n            context.set('ch' + msg.channelIndex + '_t', t)\n            context.set('ch' + msg.channelIndex + '_midex', midex)\n            \n            msg.topic = \"tf_roc_mAvg_ch\" + msg.channelIndex\n            node.status(msg.tf_roc)\n            \n            return msg;\n        }\n    }\n}\n\ncontext.set('ch' + msg.channelIndex, undefined);\ncontext.set('ch' + msg.channelIndex + '_ts', undefined);\ncontext.set('ch' + msg.channelIndex + \"_roc\", undefined);\ncontext.set('ch' + msg.channelIndex + \"_roca\", undefined);\ncontext.set('ch' + msg.channelIndex + \"_rocb\", undefined);\ncontext.set('ch' + msg.channelIndex + \"_time\", undefined);\ncontext.set('ch' + msg.channelIndex + '_a', undefined);\ncontext.set('ch' + msg.channelIndex + '_b', undefined);\ncontext.set('ch' + msg.channelIndex + '_t', undefined);\ncontext.set('ch' + msg.channelIndex + '_midex', undefined);\n\nmsg.payload = \"continue\";\nmsg.tf_roc = NaN;\nmsg.topic = \"tf_roc_mAvg_ch\" + msg.channelIndex\nnode.status(msg.tf_roc)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet keys= context.keys\nfor (i = 0; i < keys.length; i++){\n    keys[i] = []\n}",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1920,
        "wires": [
            [
                "663829ca21280a69"
            ]
        ]
    },
    {
        "id": "1de77a663065b4c5",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "starting values",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('ch' + i + '_startPressure', undefined);\n        context.set('ch' + i + '_startTime', undefined);\n        context.set('ch' + i + '_seekStartTime', undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('ch' + msg.channelIndex + '_startPressure', undefined);\n    context.set('ch' + msg.channelIndex + '_startTime', undefined);\n    context.set('ch' + msg.channelIndex + '_seekStartTime', undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('ch' + msg.channelIndex + '_startPressure', undefined);\n    context.set('ch' + msg.channelIndex + '_startTime', undefined);\n    context.set('ch' + msg.channelIndex + '_seekStartTime', undefined);\n    return msg;\n}\n\n// get values from context\nlet startPressure = context.get('ch' + msg.channelIndex + '_startPressure');\nlet startTime = context.get('ch' + msg.channelIndex + '_startTime');\nlet seekStartTime = context.get('ch' + msg.channelIndex + '_seekStartTime');\n\n// if we don't have a start time value\nif (!startTime) {\n    // if we are currently testing\n    if (msg.testing) {\n        // set the start time and start pressure values\n        startTime = msg.tStamp;\n        startPressure = msg.pAvg;\n    }\n}\n\n// if we don't have a seek start time value\nif (!seekStartTime) {\n    // if we are currently testing and seeking\n    if (msg.testing && msg.seeking) {\n        // set the seek start time value\n        seekStartTime = msg.tStamp;   \n    }\n}\n\n// if we are not seeking, set seek start time to undefined\nif (!msg.seeking) {\n    seekStartTime = NaN;\n}\n\n// if we are not testing, set all values to undefined\nif (!msg.testing) {\n    startPressure = NaN;\n    startTime = NaN;\n    seekStartTime = NaN;\n}\n\ncontext.set('ch' + msg.channelIndex + '_startPressure', startPressure);\ncontext.set('ch' + msg.channelIndex + '_startTime', startTime);\ncontext.set('ch' + msg.channelIndex + '_seekStartTime', seekStartTime);\n\nmsg.startPressure = startPressure;\nmsg.startTime = startTime;\nmsg.seekStartTime = seekStartTime;\nnode.status(startTime);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1860,
        "wires": [
            [
                "881881fd1142ff99"
            ]
        ]
    },
    {
        "id": "0854e4488213b088",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set all data",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('tSA_ch' + i, undefined);\n        context.set('aPA_ch' + i, undefined);\n        context.set('rA_ch' + i, undefined);\n        context.set('allData_ch' + i, undefined);\n        flow.set('allData_ch' + i, {});\n        flow.set('testingState' + i, false);\n        flow.set('seekState' + i, false);\n        flow.set('lp_seekState' + i, false);\n        flow.set('hp_seekState' + i, false);\n        flow.set('results_header_ch' + i, {});\n        flow.set('resultsData_ch' + i, {});\n        context.set('visibleLeak_ch' + i, undefined);\n        context.set('lpUnconfirmedPassResult_ch' + i, undefined);\n        context.set('lpSeekFinished_ch' + i, undefined);\n        context.set('lpResult_ch' + i, undefined);\n        context.set('lp_confirmed_ch' + i, undefined);\n        context.set('lp_disconfirmed_ch' + i, undefined);\n        context.set('lp_seek_count_ch' + i, undefined);\n        context.set('hpUnconfirmedPassResult_ch' + i, undefined);\n        context.set('hpSeekFinished_ch' + i, undefined);\n        context.set('hpResult_ch' + i, undefined);\n        context.set('hp_confirmed_ch' + i, undefined);\n        context.set('hp_disconfirmed_ch' + i, undefined);\n        context.set('hp_seek_count_ch' + i, undefined);\n        context.set('lprseek_start_t_ch' + i, undefined);\n        context.set('lprvldtn_start_p' + i, undefined);\n        context.set('lprvldtn_start_t' + i, undefined);\n        context.set('lprvldtn_stop_t' + i, undefined);\n        context.set('lprvldtn_stop_p' + i, undefined);\n        context.set('lprdeltap_drtn' + i, undefined);\n        context.set('lprend_roc' + i, undefined);\n        context.set('lprfinal_trend' + i, undefined);\n        context.set('hprseek_start_t' + i, undefined);\n        context.set('hprvldtn_start_p' + i, undefined);\n        context.set('hprvldtn_start_t' + i, undefined);\n        context.set('hprvldtn_stop_t' + i, undefined);\n        context.set('hprvldtn_stop_p' + i, undefined);\n        context.set('hprdeltap_drtn' + i, undefined);\n        context.set('hprend_roc' + i, undefined);\n        context.set('hprfinal_trend' + i, undefined);\n        context.set('tpt_start' + i, undefined);\n        context.set('tpt_stop' + i, undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('tSA_ch' + msg.channelIndex, undefined);\n    context.set('aPA_ch' + msg.channelIndex, undefined);\n    context.set('rA_ch' + msg.channelIndex, undefined);\n    context.set('allData_ch' + msg.channelIndex, undefined);\n    context.set('visibleLeak_ch' + msg.channelIndex, undefined);\n    context.set('lpUnconfirmedPassResult_ch' + msg.channelIndex, undefined);\n    context.set('lpSeekFinished_ch' + msg.channelIndex, undefined);\n    context.set('lpResult_ch' + msg.channelIndex, undefined);\n    context.set('lp_confirmed_ch' + msg.channelIndex, undefined);\n    context.set('lp_disconfirmed_ch' + msg.channelIndex, undefined);\n    context.set('lp_seek_count_ch' + msg.channelIndex, undefined);\n    context.set('hpUnconfirmedPassResult_ch' + msg.channelIndex, undefined);\n    context.set('hpSeekFinished_ch' + msg.channelIndex, undefined);\n    context.set('hpResult_ch' + msg.channelIndex, undefined);\n    context.set('hp_confirmed_ch' + msg.channelIndex, undefined);\n    context.set('hp_disconfirmed_ch' + msg.channelIndex, undefined);\n    context.set('hp_seek_count_ch' + msg.channelIndex, undefined);\n    context.set('lprseek_start_t_ch' + msg.channelIndex, undefined);\n    context.set('lprvldtn_start_p' + msg.channelIndex, undefined);\n    context.set('lprvldtn_start_t' + msg.channelIndex, undefined);\n    context.set('lprvldtn_stop_t' + msg.channelIndex, undefined);\n    context.set('lprvldtn_stop_p' + msg.channelIndex, undefined);\n    context.set('lprdeltap_drtn' + msg.channelIndex, undefined);\n    context.set('lprend_roc' + msg.channelIndex, undefined);\n    context.set('lprfinal_trend' + msg.channelIndex, undefined);\n    context.set('hprseek_start_t' + msg.channelIndex, undefined);\n    context.set('hprvldtn_start_p' + msg.channelIndex, undefined);\n    context.set('hprvldtn_start_t' + msg.channelIndex, undefined);\n    context.set('hprvldtn_stop_t' + msg.channelIndex, undefined);\n    context.set('hprvldtn_stop_p' + msg.channelIndex, undefined);\n    context.set('hprdeltap_drtn' + msg.channelIndex, undefined);\n    context.set('hprend_roc' + msg.channelIndex, undefined);\n    context.set('hprfinal_trend' + msg.channelIndex, undefined);\n    context.set('tpt_start' + msg.channelIndex, undefined);\n    context.set('tpt_stop' + msg.channelIndex, undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('tSA_ch' + msg.channelIndex, undefined);\n    context.set('aPA_ch' + msg.channelIndex, undefined);\n    context.set('rA_ch' + msg.channelIndex, undefined);\n    context.set('allData_ch' + msg.channelIndex, undefined);\n    context.set('visibleLeak_ch' + msg.channelIndex, undefined);\n    context.set('lpUnconfirmedPassResult_ch' + msg.channelIndex, undefined);\n    context.set('lpSeekFinished_ch' + msg.channelIndex, undefined);\n    context.set('lpResult_ch' + msg.channelIndex, undefined);\n    context.set('lp_confirmed_ch' + msg.channelIndex, undefined);\n    context.set('lp_disconfirmed_ch' + msg.channelIndex, undefined);\n    context.set('lp_seek_count_ch' + msg.channelIndex, undefined);\n    context.set('hpUnconfirmedPassResult_ch' + msg.channelIndex, undefined);\n    context.set('hpSeekFinished_ch' + msg.channelIndex, undefined);\n    context.set('hpResult_ch' + msg.channelIndex, undefined);\n    context.set('hp_confirmed_ch' + msg.channelIndex, undefined);\n    context.set('hp_disconfirmed_ch' + msg.channelIndex, undefined);\n    context.set('hp_seek_count_ch' + msg.channelIndex, undefined);\n    context.set('lprseek_start_t_ch' + msg.channelIndex, undefined);\n    context.set('lprvldtn_start_p' + msg.channelIndex, undefined);\n    context.set('lprvldtn_start_t' + msg.channelIndex, undefined);\n    context.set('lprvldtn_stop_t' + msg.channelIndex, undefined);\n    context.set('lprvldtn_stop_p' + msg.channelIndex, undefined);\n    context.set('lprdeltap_drtn' + msg.channelIndex, undefined);\n    context.set('lprend_roc' + msg.channelIndex, undefined);\n    context.set('lprfinal_trend' + msg.channelIndex, undefined);\n    context.set('hprseek_start_t' + msg.channelIndex, undefined);\n    context.set('hprvldtn_start_p' + msg.channelIndex, undefined);\n    context.set('hprvldtn_start_t' + msg.channelIndex, undefined);\n    context.set('hprvldtn_stop_t' + msg.channelIndex, undefined);\n    context.set('hprvldtn_stop_p' + msg.channelIndex, undefined);\n    context.set('hprdeltap_drtn' + msg.channelIndex, undefined);\n    context.set('hprend_roc' + msg.channelIndex, undefined);\n    context.set('hprfinal_trend' + msg.channelIndex, undefined);\n    context.set('tpt_start' + msg.channelIndex, undefined);\n    context.set('tpt_stop' + msg.channelIndex, undefined);\n    return msg;\n}\n\nlet prevAllData = context.get('allData_ch' + msg.channelIndex) || {};\n\nlet channel = msg.channelIndex ? msg.channelIndex : 0;\nlet commConnected = true;\nlet planID = msg.planInfo.planID || \"\";\nlet ptConnected = !Number.isNaN(msg.pAvg) ? true : false;\nlet startPressure = msg.startPressure;\nlet startTime = msg.startTime;\nlet elapsedTime = msg.tStamp - msg.startTime;\nlet seekGauge = msg.seek_gauge;\n\n// add on to the time stamp array\nlet timeStampArray = context.get('tSA_ch' + msg.channelIndex) || [];\nlet timestamp = msg.tStamp;\nlet CurrentTimeStamp = msg.tStamp;\ntimeStampArray.push(timestamp);\n\n// limit the time stamp array to 5 minutes if not testing\nif (!msg.testing && timeStampArray.length > 1500) {\n    timeStampArray.reverse()\n    timeStampArray = timeStampArray.slice(0, 1500);\n    timeStampArray.reverse()\n}\ncontext.set('tSA_ch' + msg.channelIndex, timeStampArray);\n\n// add on to the average pressure array\nlet avgPressureArray = context.get('aPA_ch' + msg.channelIndex) || [];\nlet avgPressure = msg.pAvg;\nlet CurrentPressure = msg.pAvg;\navgPressureArray.push(avgPressure);\n\n// limit the average pressure array to 5 minutes if not testing\nif (!msg.testing && avgPressureArray.length > 1500) {\n    avgPressureArray.reverse()\n    avgPressureArray = avgPressureArray.slice(0, 1500);\n    avgPressureArray.reverse()\n}\ncontext.set('aPA_ch' + msg.channelIndex, avgPressureArray);\n\n// add on to the roc array\nlet rocArray = context.get('rA_ch' + msg.channelIndex) ||  [];\nlet roc = msg.roc;\nlet CurrentRoC = msg.roc;\nif (!msg.seeking) {\n    roc = NaN;\n}\nrocArray.push(roc);\n\n// limit the roc array to 5 minutes if not testing\nif (!msg.testing && rocArray.length > 1500) {\n    rocArray.reverse()\n    rocArray = rocArray.slice(0, 1500);\n    rocArray.reverse()\n}\ncontext.set('rA_ch' + msg.channelIndex, rocArray);\n\nlet tfEx = msg.tfEx;\nif (!tfEx && prevAllData) {\n    tfEx = prevAllData.TF;\n}\n\nlet seekStartTime\nif (prevAllData && prevAllData.seekStartTime) {\n    seekStartTime = prevAllData.seekStartTime\n} else {\n    seekStartTime = msg.seekStartTime;\n}\n\nlet seekElapsedTime = msg.tStamp - seekStartTime;\nlet deltaP = msg.deltaP;\nlet decreasingCurrent = msg.decreasingCurrent;\nlet decreasingTrend = msg.decreasingTrend;\n\nlet lpSeekStarted = msg.lp_seeking;\nlet hpSeekStarted = msg.hp_seeking;\n\nlet valArrSz = msg.validationArraySize;\n\nlet lpUnconfirmedPassResult = context.get('lpUnconfirmedPassResult_ch' + msg.channelIndex) || \"\";\nlet lpSeekFinished = context.get('lpSeekFinished_ch' + msg.channelIndex) || false;\nlet lpResult = context.get('lpResult_ch' + msg.channelIndex) || \"\";\n\nlet lpConfirmed = flow.get('lp_confirmed_ch' + msg.channelIndex) || false;\nlet lpDisconfirmed = flow.get('lp_disconfirmed_ch' + msg.channelIndex) || false;\n\n// Check if we passed the LP test\nif (lpSeekStarted) {\n    let seekCount = context.get('lp_seek_count_ch' + msg.channelIndex);\n    seekCount = seekCount + 1;\n    context.set('lp_seek_count_ch' + msg.channelIndex, seekCount);\n    \n    if (valArrSz >= seekCount) {\n        let lp_decay_target = (msg.planInfo.lp_maxTotalDecay * msg.planInfo.lp_testPressure) / 100;\n        if (!msg.lp_trend && msg.deltaP < lp_decay_target) {\n            lpUnconfirmedPassResult = \"Pass\";\n            context.set('lpUnconfirmedPassResult_ch' + msg.channelIndex, lpUnconfirmedPassResult);\n            lpSeekFinished = true;\n            context.set('lpSeekFinished_ch' + msg.channelIndex, lpSeekFinished);\n            lpSeekStarted = false;\n            context.set('lpSeekStarted_ch' + msg.channelIndex, lpSeekStarted);\n        } else if (msg.lp_trend && msg.tfEx < .9 && msg.deltaP < lp_decay_target) {\n            lpUnconfirmedPassResult = \"Pass\";\n            context.set('lpUnconfirmedPassResult_ch' + msg.channelIndex, lpUnconfirmedPassResult);\n            lpSeekFinished = true;\n            context.set('lpSeekFinished_ch' + msg.channelIndex, lpSeekFinished);\n            lpSeekStarted = false;\n            context.set('lpSeekStarted_ch' + msg.channelIndex, lpSeekStarted);\n        } else if (msg.lp_trend && msg.deltaP < 12.5) {\n            lpUnconfirmedPassResult = \"Pass\";\n            context.set('lpUnconfirmedPassResult_ch' + msg.channelIndex, lpUnconfirmedPassResult);\n            lpSeekFinished = true;\n            context.set('lpSeekFinished_ch' + msg.channelIndex, lpSeekFinished);\n            lpSeekStarted = false;\n            context.set('lpSeekStarted_ch' + msg.channelIndex, lpSeekStarted);\n        }\n    }\n} else {\n    context.set('lp_seek_count_ch' + msg.channelIndex, undefined);\n}\n\nif (lpConfirmed) {\n    lpResult = \"Passed\"\n    context.set('lpResult_ch' + msg.channelIndex, lpResult);\n    lpUnconfirmedPassResult = \"\";\n    context.set('lpUnconfirmedPassResult_ch' + msg.channelIndex, lpUnconfirmedPassResult);\n    lpSeekFinished = false;\n    context.set('lpSeekFinished_ch' + msg.channelIndex, lpSeekFinished);\n    lpSeekStarted = false;\n    context.set('lpSeekStarted_ch' + msg.channelIndex, lpSeekStarted);\n    flow.set('lp_seekState' + channel, false);\n} else if (lpDisconfirmed) {\n    lpResult = \"\"\n    context.set('lpResult_ch' + msg.channelIndex, lpResult);\n    lpUnconfirmedPassResult = \"\";\n    context.set('lpUnconfirmedPassResult_ch' + msg.channelIndex, lpUnconfirmedPassResult);\n    lpSeekFinished = false;\n    context.set('lpSeekFinished_ch' + msg.channelIndex, lpSeekFinished);\n    lpSeekStarted = false;\n    context.set('lpSeekStarted_ch' + msg.channelIndex, lpSeekStarted);\n    flow.set('lp_seekState' + channel, false);\n}\n\nlet hpUnconfirmedPassResult = context.get('hpUnconfirmedPassResult_ch' + msg.channelIndex) || \"\";\nlet hpSeekFinished = context.get('hpSeekFinished_ch' + msg.channelIndex) || false;\nlet hpResult = context.get('hpResult_ch' + msg.channelIndex) || \"\";\n\nlet hpConfirmed = flow.get('hp_confirmed_ch' + msg.channelIndex) || false;\nlet hpDisconfirmed = flow.get('hp_disconfirmed_ch' + msg.channelIndex) || false;\n\n// Check if we passed the HP test\nif (hpSeekStarted) {\n    let seekCount = context.get('hp_seek_count_ch' + msg.channelIndex);\n    seekCount = seekCount + 1;\n    context.set('hp_seek_count_ch' + msg.channelIndex, seekCount);\n    \n    if (valArrSz >= seekCount) {\n        let hp_decay_target = (msg.planInfo.hp_maxTotalDecay * msg.planInfo.hp_testPressure) / 100;\n        if (!msg.hp_trend && msg.deltaP < hp_decay_target) {\n            hpUnconfirmedPassResult = \"Pass\";\n            context.set('hpUnconfirmedPassResult_ch' + msg.channelIndex, hpUnconfirmedPassResult);\n            hpSeekFinished = true;\n            context.set('hpSeekFinished_ch' + msg.channelIndex, hpSeekFinished);\n            hpSeekStarted = false;\n            context.set('hpSeekStarted_ch' + msg.channelIndex, hpSeekStarted);\n            flow.set('hp_seekState' + channel, false);\n        } else if (msg.hp_trend && msg.tfEx < .9 && msg.deltaP < hp_decay_target) {\n            hpUnconfirmedPassResult = \"Pass\";\n            context.set('hpUnconfirmedPassResult_ch' + msg.channelIndex, hpUnconfirmedPassResult);\n            hpSeekFinished = true;\n            context.set('hpSeekFinished_ch' + msg.channelIndex, hpSeekFinished);\n            hpSeekStarted = false;\n            context.set('hpSeekStarted_ch' + msg.channelIndex, hpSeekStarted);\n            flow.set('hp_seekState' + channel, false);\n        } else if (msg.hp_trend && msg.deltaP < 12.5) {\n            hpUnconfirmedPassResult = \"Pass\";\n            context.set('hpUnconfirmedPassResult_ch' + msg.channelIndex, hpUnconfirmedPassResult);\n            hpSeekFinished = true;\n            context.set('hpSeekFinished_ch' + msg.channelIndex, hpSeekFinished);\n            hpSeekStarted = false;\n            context.set('hpSeekStarted_ch' + msg.channelIndex, hpSeekStarted);\n            flow.set('hp_seekState' + channel, false);\n        }\n    }\n} else {\n    context.set('hp_seek_count_ch' + msg.channelIndex, undefined);\n}\n\nif (hpConfirmed) {\n    hpResult = \"Passed\"\n    context.set('hpResult_ch' + msg.channelIndex, hpResult);\n    hpUnconfirmedPassResult = \"\";\n    context.set('hpUnconfirmedPassResult_ch' + msg.channelIndex, hpUnconfirmedPassResult);\n    hpSeekFinished = false;\n    context.set('hpSeekFinished_ch' + msg.channelIndex, hpSeekFinished);\n    hpSeekStarted = false;\n    context.set('hpSeekStarted_ch' + msg.channelIndex, hpSeekStarted);\n} else if (hpDisconfirmed) {\n    hpResult = \"\"\n    context.set('hpResult_ch' + msg.channelIndex, hpResult);\n    hpUnconfirmedPassResult = \"\";\n    context.set('hpUnconfirmedPassResult_ch' + msg.channelIndex, hpUnconfirmedPassResult);\n    hpSeekFinished = false;\n    context.set('hpSeekFinished_ch' + msg.channelIndex, hpSeekFinished);\n    hpSeekStarted = false;\n    context.set('hpSeekStarted_ch' + msg.channelIndex, hpSeekStarted);\n}\n\nlet visibleLeak = context.get('visibleLeak_ch' + msg.channelIndex) || msg.visibleLeak;\nif (visibleLeak) {\n    context.set('visibleLeak_ch' + msg.channelIndex, true);\n}\n\nlet channel_0_Testing = flow.get('testingState' + 0);\nlet channel_1_Testing = flow.get('testingState' + 1);\nlet channel_2_Testing = flow.get('testingState' + 2);\nlet channel_3_Testing = flow.get('testingState' + 3);\nlet channel_4_Testing = flow.get('testingState' + 4);\nlet channel_5_Testing = flow.get('testingState' + 5);\nlet channel_6_Testing = flow.get('testingState' + 6);\nlet channel_7_Testing = flow.get('testingState' + 7);\n\nlet channelsTesting = {\n    1: channel_0_Testing ? channel_0_Testing : false,\n    2: channel_1_Testing ? channel_1_Testing : false,\n    3: channel_2_Testing ? channel_2_Testing : false,\n    4: channel_3_Testing ? channel_3_Testing : false,\n    5: channel_4_Testing ? channel_4_Testing : false,\n    6: channel_5_Testing ? channel_5_Testing : false,\n    7: channel_6_Testing ? channel_6_Testing : false,\n    8: channel_7_Testing ? channel_7_Testing : false\n}\n\nlet allData = {\n    Channel: channel + 1,\n    CommConnected: commConnected,\n    PlanID: planID,\n    PTConnected: ptConnected,\n    StartPressure: startPressure,\n    StartTime: startTime,\n    ElapsedTime: elapsedTime,\n    SeekGauge: seekGauge,\n    timestamp: timeStampArray,\n    AvgPressure: avgPressureArray,\n    RoC: rocArray,\n    LPSeekStarted: lpSeekStarted,\n    HPSeekStarted: hpSeekStarted,\n    SeekStartTime: seekStartTime,\n    SeekElapsedTime: seekElapsedTime,\n    DeltaP: deltaP,\n    TF: tfEx,\n    TFActualGauge: decreasingCurrent, // 30 second indicator average gauge\n    TFGauge: decreasingTrend, // 3 minute indicator average gauge\n    lpResults: {\n        lpResult: lpResult,\n        lpUnconfirmedPassResult: lpUnconfirmedPassResult\n    },\n    LPSeekFinished: lpSeekFinished,\n    hpResults: {\n        hpResult: hpResult,\n        hpUnconfirmedPassResult: hpUnconfirmedPassResult\n    },\n    HPSeekFinished: hpSeekFinished,\n    VisibleLeak: visibleLeak,\n    ChannelsTesting: channelsTesting,\n    CurrentPressure: CurrentPressure,\n    CurrentRoC: CurrentRoC,\n    CurrentTimeStamp: CurrentTimeStamp,\n}\n\nif (msg.testing) {\n    msg.pl_stat = 3;\n    let single = msg.planInfo.single;\n    msg.result = single ? hpResult : hpResult === \"Passed\" && lpResult === \"Passed\" ? \"Passed\" : \"\";\n    msg.start = msg.startTime;\n    \n    if (msg.lp_seekStarted) {\n        msg.lprseek_start_t = msg.tStamp;\n        context.set('lprseek_start_t_ch' + msg.channelIndex, msg.tStamp);\n        msg.lprvldtn_start_p = msg.pAvg;\n        context.set('lprvldtn_start_p' + msg.channelIndex, msg.pAvg);\n    }\n    \n    if (lpUnconfirmedPassResult === \"Pass\") {\n        msg.lprvldtn_start_t = context.get('lprvldtn_start_t' + msg.channelIndex) || 0;\n        if (msg.lprvldtn_start_t < 1) {\n            msg.lprvldtn_start_t = msg.tStamp - (msg.planInfo.lp_duration * 60 * 1000);\n            context.set('lprvldtn_start_t' + msg.channelIndex, msg.lprvldtn_start_t);\n        }\n        msg.lprvldtn_stop_t = context.get('lprvldtn_stop_t' + msg.channelIndex) || 0;\n        if (msg.lprvldtn_stop_t < 1) {\n            msg.lprvldtn_stop_t = msg.tStamp;\n            context.set('lprvldtn_stop_t' + msg.channelIndex, msg.tStamp);\n        }\n        msg.lprvldtn_stop_p = context.get('lprvldtn_stop_p' + msg.channelIndex) || null;\n        if (msg.lprvldtn_stop_p === null) {\n            msg.lprvldtn_stop_p = msg.pAvg;\n            context.set('lprvldtn_stop_p' + msg.channelIndex, msg.pAvg);\n        }\n        msg.lprseek_stop_t = lprvldtn_stop_t;\n        msg.lprdeltap_drtn = context.get('lprdeltap_drtn' + msg.channelIndex) || null;\n        if (msg.lprdeltap_drtn === null) {\n            msg.lprdeltap_drtn = msg.deltaP;\n            context.set('lprdeltap_drtn' + msg.channelIndex, msg.deltaP);\n        }\n        msg.lprend_roc = context.get('lprend_roc' + msg.channelIndex) || null;\n        if (msg.lprend_roc === null) {\n            msg.lprend_roc = msg.roc;\n            context.set('lprend_roc' + msg.channelIndex, msg.roc);\n        }\n        msg.lprfinal_trend = context.get('lprfinal_trend' + msg.channelIndex) || null;\n        if (msg.lprfinal_trend === null) {\n            msg.lprfinal_trend = msg.tfEx;\n            context.set('lprfinal_trend' + msg.channelIndex, msg.tfEx);\n        }\n    }\n    \n    msg.lpresult = lpResult;\n    \n    if (msg.hp_seekStarted) {\n        msg.hprseek_start_t = msg.tStamp;\n        context.set('hprseek_start_t' + msg.channelIndex, msg.tStamp);\n        msg.hprvldtn_start_p = msg.pAvg;\n        context.set('hprvldtn_start_p' + msg.channelIndex, msg.pAvg);\n    }\n    \n    if (hpUnconfirmedPassResult === \"Pass\") {\n        msg.hprvldtn_start_t = context.get('hprvldtn_start_t' + msg.channelIndex) || 0;\n        if (msg.hprvldtn_start_t < 1) {\n            msg.hprvldtn_start_t = msg.tStamp - (msg.planInfo.hp_duration * 60 * 1000);\n            context.set('hprvldtn_start_t' + msg.channelIndex, msg.hprvldtn_start_t);\n        }\n        msg.hprvldtn_stop_t = context.get('hprvldtn_stop_t' + msg.channelIndex) || 0;\n        if (msg.hprvldtn_stop_t < 1) {\n            msg.hprvldtn_stop_t = msg.tStamp;\n            context.set('hprvldtn_stop_t' + msg.channelIndex, msg.tStamp);\n        }\n        msg.hprvldtn_stop_p = context.get('hprvldtn_stop_p' + msg.channelIndex) || null;\n        if (msg.hprvldtn_stop_p === null) {\n            msg.hprvldtn_stop_p = msg.pAvg;\n            context.set('hprvldtn_stop_p' + msg.channelIndex, msg.pAvg);\n        }\n        msg.hprseek_stop_t = hprvldtn_stop_t;\n        msg.hprdeltap_drtn = context.get('hprdeltap_drtn' + msg.channelIndex) || null;\n        if (msg.hprdeltap_drtn === null) {\n            msg.hprdeltap_drtn = msg.deltaP;\n            context.set('hprdeltap_drtn' + msg.channelIndex, msg.deltaP);\n        }\n        msg.hprend_roc = context.get('hprend_roc' + msg.channelIndex) || null;\n        if (msg.hprend_roc === null) {\n            msg.hprend_roc = msg.roc;\n            context.set('hprend_roc' + msg.channelIndex, msg.roc);\n        }\n        msg.hprfinal_trend = context.get('hprfinal_trend' + msg.channelIndex) || null;\n        if (msg.hprfinal_trend === null) {\n            msg.hprfinal_trend = msg.tfEx;\n            context.set('hprfinal_trend' + msg.channelIndex, msg.tfEx);\n        }\n    }\n    \n    msg.hpresult = hpResult;\n    \n    msg.tpt_start = context.get('tpt_start' + msg.channelIndex) || 0;\n    if (msg.tpt_start < 1 && msg.pAvg > 100) {\n        msg.tpt_start = msg.tStamp;\n        context.set('tpt_start' + msg.channelIndex, msg.tStamp);\n    }\n    \n    msg.tpt_stop = context.get('tpt_stop' + msg.channelIndex) || 0;\n    if (msg.pAvg < 100 && msg.tpt_stop < 1) {\n        msg.tpt_stop = msg.tStamp;\n        context.set('tpt_stop' + msg.channelIndex, msg.tStamp);\n    } else if (msg.pAvg > 100) {\n        msg.tpt_stop = 0;\n        context.set('tpt_stop' + msg.channelIndex, 0);\n    }\n}\n\ncontext.set('allData_ch' + channel, allData);\nflow.set('allData_ch' + channel, allData);\nmsg.allData = allData;\nnode.status('updated!')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1920,
        "wires": [
            [
                "f15349c0a0193360"
            ]
        ]
    },
    {
        "id": "f15349c0a0193360",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "set results header",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('results_header_ch' + i, null);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('results_header_ch' + msg.channelIndex, null);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('results_header_ch' + msg.channelIndex, null);\n    return msg;\n}\n\nif (msg.testing) {\n    let resultsHeader = context.get('results_header_ch' + msg.channelIndex) || {\n        pr_id: null,\n        plan_id: null,\n        pl_stat: null,\n        td_ch: null,\n        serialnumber: null,\n        test: null,\n        result: null,\n        type: null,\n        crit_yn: null,\n        well: null,\n        cntrct: null,\n        op: null,\n        ocsg: null,\n        blk: null,\n        api: null,\n        stack: null,\n        trans_ser: null,\n        trans_exp: null,\n        start: null,\n        stop: null,\n        lptest: null,\n        lpmax_wrn: null,\n        lpmin_wrn: null,\n        lpmin_drtn: null,\n        lpdeltap_drtn_per: null,\n        lpdeltap_drtn_psi: null,\n        lptrend: null,\n        hptest: null,\n        hpmax_wrn: null,\n        hpmin_wrn: null,\n        hpmin_drtn: null,\n        hpdeltap_drtn_per: null,\n        hpdeltap_drtn_psi: null,\n        hptrend: null,\n        lprvldtn_start_t: null,\n        lprvldtn_stop_t: null,\n        lprvldtn_start_p: null,\n        lprvldtn_stop_p: null,\n        lprdeltap_drtn: null,\n        lprend_roc: null,\n        lprseek_start_t: null,\n        lprseek_stop_t: null,\n        lpresult: null,\n        lprfinal_trend: null,\n        hprvldtn_start_t: null,\n        hprvldtn_stop_t: null,\n        hprvldtn_start_p: null,\n        hprvldtn_stop_p: null,\n        hprdeltap_drtn: null,\n        hprend_roc: null,\n        hprseek_start_t: null,\n        hprseek_stop_t: null,\n        hprfinal_trend: null,\n        hpresult: null,\n        tpt_start: null,\n        tpt_stop: null\n    }\n    \n    // plan info portion\n    resultsHeader.pr_id = msg.planInfo.projectID // project id\n    resultsHeader.plan_id = msg.planInfo.planID // plan id\n    resultsHeader.td_ch = msg.planInfo.channel + 1 // transducer channel\n    resultsHeader.serialnumber = msg.planInfo.serialNumber // transducer serial number\n    resultsHeader.test = msg.planInfo.planName // plan name\n    resultsHeader.type = msg.planInfo.critName // criteria name\n    resultsHeader.crit_yn = msg.planInfo.critical // critical path\n    resultsHeader.well = msg.planInfo.wellName // well name\n    resultsHeader.cntrct = msg.planInfo.drillingContractor // drilling contractor\n    resultsHeader.op = msg.planInfo.operator // operator\n    resultsHeader.ocsg = msg.planInfo.ocsgNo // ocsg number\n    resultsHeader.blk = msg.planInfo.block // block\n    resultsHeader.api = msg.planInfo.apiNo // api number\n    resultsHeader.stack = msg.planInfo.stack // stack\n    resultsHeader.trans_ser = msg.planInfo.serialNumber // transducer serial number\n    resultsHeader.trans_exp = msg.planInfo.expirationDate // transducer expiration date\n    resultsHeader.lptest = msg.planInfo.lp_testPressure // lp test pressure\n    resultsHeader.lpmax_wrn = msg.planInfo.lp_maxPressure // lp max warning pressure\n    resultsHeader.lpmin_wrn = msg.planInfo.lp_minPressure // lp min warning pressure\n    resultsHeader.lpmin_drtn = msg.planInfo.lp_duration // lp minimum duration\n    resultsHeader.lpdeltap_drtn_per = msg.planInfo.lp_maxTotalDecay // lp delta p duration %\n    resultsHeader.lpdeltap_drtn_psi = msg.planInfo.lp_maxTotalDecay * msg.planInfo.lp_testPressure / 100 // lp deltap duration psi\n    resultsHeader.lptrend = msg.planInfo.lp_trend // lp trend enabled/disabled\n    resultsHeader.hptest = msg.planInfo.hp_testPressure // hp test pressure\n    resultsHeader.hpmax_wrn = msg.planInfo.hp_maxPressure // hp max warning pressure\n    resultsHeader.hpmin_wrn = msg.planInfo.hp_minPressure // hp min warning pressure\n    resultsHeader.hpmin_drtn = msg.planInfo.hp_duration // hp minimum duration\n    resultsHeader.hpdeltap_drtn_per = msg.planInfo.hp_maxTotalDecay // hp deltap duration %\n    resultsHeader.hpdeltap_drtn_psi = msg.planInfo.hp_maxTotalDecay * msg.planInfo.hp_testPressure / 100 // hp deltap duration psi\n    resultsHeader.hptrend = msg.planInfo.hp_trend // hp trend enabled/disabled\n    \n    // results from testing\n    let result = resultsHeader.result || msg.result;\n    let lprvldtn_start_t = resultsHeader.lprvldtn_start_t || msg.lprvldtn_start_t \n    let lprvldtn_stop_t = resultsHeader.lprvldtn_stop_t || msg.lprvldtn_stop_t \n    let lprvldtn_start_p = resultsHeader.lprvldtn_start_p || msg.lprvldtn_start_p \n    let lprvldtn_stop_p = resultsHeader.lprvldtn_stop_p || msg.lprvldtn_stop_p \n    let lprdeltap_drtn = resultsHeader.lprdeltap_drtn || msg.lprdeltap_drtn \n    let lprend_roc = resultsHeader.lprend_roc || msg.lprend_roc \n    let lprseek_start_t = resultsHeader.lprseek_start_t || msg.lprseek_start_t \n    let lprseek_stop_t = resultsHeader.lprseek_stop_t || msg.lprseek_stop_t \n    let lpresult = resultsHeader.lpresult || msg.lpresult \n    let lprfinal_trend = resultsHeader.lprfinal_trend || msg.lprfinal_trend \n    let hprvldtn_start_t = resultsHeader.hprvldtn_start_t || msg.hprvldtn_start_t \n    let hprvldtn_stop_t = resultsHeader.hprvldtn_stop_t || msg.hprvldtn_stop_t \n    let hprvldtn_start_p = resultsHeader.hprvldtn_start_p || msg.hprvldtn_start_p \n    let hprvldtn_stop_p = resultsHeader.hprvldtn_stop_p || msg.hprvldtn_stop_p \n    let hprdeltap_drtn = resultsHeader.hprdeltap_drtn || msg.hprdeltap_drtn \n    let hprend_roc = resultsHeader.hprend_roc || msg.hprend_roc \n    let hprseek_start_t = resultsHeader.hprseek_start_t || msg.hprseek_start_t \n    let hprseek_stop_t = resultsHeader.hprseek_stop_t || msg.hprseek_stop_t \n    let hprfinal_trend = resultsHeader.hprfinal_trend || msg.hprfinal_trend \n    let hpresult = resultsHeader.hpresult || msg.hpresult \n    let tpt_start = msg.tpt_start \n    let tpt_stop = msg.tpt_stop\n\n    resultsHeader.pl_stat = 3 // Current Test Status: N/A = 0, Stopped = 1, Started = 2, In progress = 3, Passed = 4, Failed = 5, Failed Visible Leak = 6 \n    resultsHeader.result = result // test result Passed or Failed\n    resultsHeader.start = resultsHeader.start || msg.start // test start time\n    resultsHeader.stop = resultsHeader.stop || msg.stop || NaN // test stop time\n    resultsHeader.lprvldtn_start_t = lprvldtn_start_t // lpr validation start time\n    resultsHeader.lprvldtn_stop_t = lprvldtn_stop_t // lpr validation stop time\n    resultsHeader.lprvldtn_start_p = lprvldtn_start_p // lpr validation start psi\n    resultsHeader.lprvldtn_stop_p = lprvldtn_stop_p // lpr validation stop psi\n    resultsHeader.lprdeltap_drtn = lprdeltap_drtn // lpr deltap actual psi\n    resultsHeader.lprend_roc = lprend_roc // lpr ending roc\n    resultsHeader.lprseek_start_t = lprseek_start_t // lpr seek start time\n    resultsHeader.lprseek_stop_t = lprseek_stop_t // lpr seek stop time\n    resultsHeader.lpresult = lpresult // lpr result N/A = 0, Passed = 4, Failed = 5\n    resultsHeader.lprfinal_trend = lprfinal_trend // lpr ending trend\n    resultsHeader.hprvldtn_start_t = hprvldtn_start_t // hpr validation start time\n    resultsHeader.hprvldtn_stop_t = hprvldtn_stop_t // hpr validation stop time\n    resultsHeader.hprvldtn_start_p = hprvldtn_start_p // hpr validation start psi\n    resultsHeader.hprvldtn_stop_p = hprvldtn_stop_p // hpr validation stop psi\n    resultsHeader.hprdeltap_drtn = hprdeltap_drtn // hpr deltap actual\n    resultsHeader.hprend_roc = hprend_roc // hpr ending roc\n    resultsHeader.hprseek_start_t = hprseek_start_t // hpr seek start time\n    resultsHeader.hprseek_stop_t = hprseek_stop_t // hpr seek stop time\n    resultsHeader.hprfinal_trend = hprfinal_trend // hpr ending trend factor\n    resultsHeader.hpresult = hpresult // hpr result N/A = 0, Passed = 4, Failed = 5\n    resultsHeader.tpt_start = tpt_start // time to pump up to pressure start time\n    resultsHeader.tpt_stop = tpt_stop // time to pump up to pressure stop time\n    \n    context.set('results_header_ch' + msg.channelIndex, resultsHeader);\n    flow.set('results_header_ch' + msg.channelIndex, resultsHeader);\n    msg.resultsHeader = resultsHeader;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1920,
        "wires": [
            [
                "026a3419242214d4"
            ]
        ]
    },
    {
        "id": "61c9329b4c34a9c1",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "convert mA to psi",
        "func": "let enghigh = flow.get('enghigh_ch' + msg.channelIndex) || 20000;\nlet englow = flow.get('englow_ch' + msg.channelIndex) || 0;\nlet rawhigh = flow.get('rawhigh_ch' + msg.channelIndex) || 20;\nlet rawlow = flow.get('rawlow_ch' + msg.channelIndex) || 4;\nlet tare = flow.get('tare_ch' + msg.channelIndex) || 0;\n\n// get the range of pressures that the transducer can read\nlet eng_range = enghigh - englow;\n// get the mA range that it can read to convert from\nlet raw_range = rawhigh - rawlow;\n// get the ratio between the two ranges\nlet conversion_ratio = eng_range / raw_range;\n\nlet mA_val = msg.payload;\n\nlet converted_pressure = ((mA_val - rawlow) * conversion_ratio) + tare;\n\nmsg.payload = converted_pressure;\nmsg.mA_val = mA_val;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "12fb909f2bc31e0a",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "set tf weights debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 935,
        "y": 1420,
        "wires": [],
        "l": false
    },
    {
        "id": "798e3a98f0277f0b",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 0",
        "func": "flow.set('test_ch', 0)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "52483ea6df875ce2",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 155,
        "y": 2480,
        "wires": [
            [
                "798e3a98f0277f0b"
            ]
        ],
        "l": false
    },
    {
        "id": "c1304c50c3333c22",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 1",
        "func": "flow.set('test_ch', 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "1ed4de640ae198c5",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 2",
        "func": "flow.set('test_ch', 2)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "ea96aafd9e4a3f60",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 3",
        "func": "flow.set('test_ch', 3)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "cc39918a84befcf6",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 4",
        "func": "flow.set('test_ch', 4)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "dc30f94ee627038e",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 5",
        "func": "flow.set('test_ch', 5)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "02db076f541cf23b",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 6",
        "func": "flow.set('test_ch', 6)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "7c5d7a37d36b3bfe",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "set test_ch 7",
        "func": "flow.set('test_ch', 7)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "8396766f96baef45",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 155,
        "y": 2520,
        "wires": [
            [
                "c1304c50c3333c22"
            ]
        ],
        "l": false
    },
    {
        "id": "28123d6d468e3acf",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 155,
        "y": 2560,
        "wires": [
            [
                "1ed4de640ae198c5"
            ]
        ],
        "l": false
    },
    {
        "id": "cc9040b25a7ca1cf",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 155,
        "y": 2600,
        "wires": [
            [
                "ea96aafd9e4a3f60"
            ]
        ],
        "l": false
    },
    {
        "id": "c595d5da347864e0",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 395,
        "y": 2480,
        "wires": [
            [
                "cc39918a84befcf6"
            ]
        ],
        "l": false
    },
    {
        "id": "032970f154bf206f",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 395,
        "y": 2520,
        "wires": [
            [
                "dc30f94ee627038e"
            ]
        ],
        "l": false
    },
    {
        "id": "1491d805d8a84f31",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 395,
        "y": 2560,
        "wires": [
            [
                "02db076f541cf23b"
            ]
        ],
        "l": false
    },
    {
        "id": "1793baf78c3a9a5b",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "0cf6a08aac35df8c",
        "name": "test ch 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 395,
        "y": 2600,
        "wires": [
            [
                "7c5d7a37d36b3bfe"
            ]
        ],
        "l": false
    },
    {
        "id": "c8bcb46674b3ba7d",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "startSeek",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "startSeek",
        "payload": "true",
        "payloadType": "bool",
        "x": 600,
        "y": 1540,
        "wires": [
            [
                "ada0a57cec4086ea"
            ]
        ]
    },
    {
        "id": "3c0f55a908d8da39",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "stopSeek",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stopSeek",
        "payload": "false",
        "payloadType": "bool",
        "x": 600,
        "y": 1580,
        "wires": [
            [
                "ada0a57cec4086ea"
            ]
        ]
    },
    {
        "id": "475a0e7c77383550",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "startTesting",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "startTesting",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 1540,
        "wires": [
            [
                "740aab45c6102197"
            ]
        ]
    },
    {
        "id": "0fe824de26cab234",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "stopTesting",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "stopTesting",
        "payload": "false",
        "payloadType": "bool",
        "x": 170,
        "y": 1580,
        "wires": [
            [
                "740aab45c6102197"
            ]
        ]
    },
    {
        "id": "740aab45c6102197",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "set testingState",
        "func": "let channelIndex = flow.get('test_ch')\nmsg.channelIndex = channelIndex;\n\nif (msg.startTesting && msg.startTesting.start === \"start\") {\n    if (msg.startTesting.start === \"start\") {\n        flow.set('testingState' + channelIndex, true);\n    } else if (msg.startTesting.start === \"stop\") {\n        flow.set('testingState' + channelIndex, false);\n    }\n} else {\n    flow.set('testingState' + channelIndex, msg.payload);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1560,
        "wires": [
            [
                "ce89d9135feedfe6"
            ]
        ]
    },
    {
        "id": "ada0a57cec4086ea",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "set seek state",
        "func": "let channelIndex = flow.get('test_ch')\nif (msg.startSeek) {\n    let seek = msg.startSeek;\n    if (seek.start && seek.start !== \"no change\") {\n        if (seek.start === \"start\") {\n            flow.set('seekState' + channelIndex, true);\n        } else if (seek.start === \"stop\") {\n            flow.set('seekState' + channelIndex, false);\n        }\n        if (seek.lpStart && seek.lpStart === \"start\") {\n            flow.set('lp_seekState' + channel, true);\n        } else if (seek.lpStart && seek.lpStart === \"stop\") {\n            flow.set('lp_seekState' + channel, false);\n        }\n        if (seek.hpStart && seek.hpStart === \"start\") {\n            flow.set('hp_seekState' + channel, true);\n        } else if (seek.hpStart && seek.hpStart === \"stop\") {\n            flow.set('hp_seekState' + channel, false);\n        }\n    }\n} else {\n    flow.set('seekState' + channelIndex, msg.payload);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1560,
        "wires": [
            [
                "2073f869d1e631b3"
            ]
        ]
    },
    {
        "id": "881881fd1142ff99",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "seek gauge calc",
        "func": "// clear context on trigger\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        context.set('ch' + i, undefined);\n        context.set('ch' + i + \"_seek_gauge\", undefined);\n        context.set('ch' + i + \"_section1\", undefined);\n        context.set('ch' + i + \"_section2\", undefined);\n        context.set('ch' + i + \"_section3\", undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (msg.clear_results) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + \"_seek_gauge\", undefined);\n    context.set('ch' + msg.channelIndex + \"_section1\", undefined);\n    context.set('ch' + msg.channelIndex + \"_section2\", undefined);\n    context.set('ch' + msg.channelIndex + \"_section3\", undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (msg.testingStarted) {\n    context.set('ch' + msg.channelIndex, undefined);\n    context.set('ch' + msg.channelIndex + \"_seek_gauge\", undefined);\n    context.set('ch' + msg.channelIndex + \"_section1\", undefined);\n    context.set('ch' + msg.channelIndex + \"_section2\", undefined);\n    context.set('ch' + msg.channelIndex + \"_section3\", undefined);\n    return msg;\n}\n\ncontext.set('ch' + msg.channelIndex + \"_testing_state\", msg.testing);\ncontext.set('ch' + msg.channelIndex + \"_seeking_state\", msg.seeking);\ncontext.set('ch' + msg.channelIndex + \"_pAvg\", msg.pAvg);\n\nif (msg.testing) {\n    if (msg.seeking === false) {\n        context.set('ch' + msg.channelIndex + '_calculating', true);\n        let data = context.get('ch' + msg.channelIndex) || [];\n        data = [...data, msg.pAvg];\n        if (data.length > 150) {\n            data = [...data].slice(1);\n        }\n        context.set('ch' + msg.channelIndex, data);\n        \n        let seekGauge = context.get('ch' + msg.channelIndex + '_seek_gauge') || NaN;\n        \n        // Add new current pressure to the values array\n        if (data.length % 3 === 0) {\n            let subArrayLength = data.length / 3;\n            let subArrayAverageValues = [];\n            for (let i = 0; i < 3; i++) {\n                let totalValue = 0;\n                for (let j = 0; j < subArrayLength; j++) {\n                    totalValue = totalValue + data[i * subArrayLength + j];\n                }\n                subArrayAverageValues.push(totalValue / subArrayLength);\n            }\n            \n            let section1 = subArrayAverageValues[0];\n            let section2 = subArrayAverageValues[1];\n            let section3 = subArrayAverageValues[2];\n            if (section1 - section2 === 0) {\n                seekGauge = 0;\n            } else {\n                seekGauge = (section2 - section3) / (section1 - section2);\n            }\n            context.set('ch' + msg.channelIndex + \"_section1\", section1);\n            context.set('ch' + msg.channelIndex + \"_section2\", section2);\n            context.set('ch' + msg.channelIndex + \"_section3\", section3);\n        }\n        context.set('ch' + msg.channelIndex + \"_seek_gauge\", seekGauge);\n        msg.seek_gauge = seekGauge;\n        node.status(seekGauge);\n        \n        return msg;\n    } else {\n        context.set('ch' + msg.channelIndex + '_calculating', false);\n    }\n} else {\n    context.set('ch' + msg.channelIndex + '_calculating', false);\n}\n\ncontext.set('ch' + msg.channelIndex, undefined);\ncontext.set('ch' + msg.channelIndex + \"_section1\", undefined);\ncontext.set('ch' + msg.channelIndex + \"_section2\", undefined);\ncontext.set('ch' + msg.channelIndex + \"_section3\", undefined);\ncontext.set('ch' + msg.channelIndex + \"_seek_gauge\", undefined);\n\nmsg.seek_gauge = NaN;\nnode.status(msg.seek_gauge);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1860,
        "wires": [
            [
                "b861611c1fff1bc4"
            ]
        ]
    },
    {
        "id": "58f4cd4659588e85",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "set testingState debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 2180,
        "wires": [],
        "l": false
    },
    {
        "id": "0fbca09c501fdd64",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "stopTesting",
        "x": 210,
        "y": 2260,
        "wires": [
            [
                "16ad852f5ecba737",
                "574d179930b20b5c"
            ]
        ]
    },
    {
        "id": "7830b49e21c669b8",
        "type": "inject",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "startTesting",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "ts",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "startTesting",
        "payloadType": "str",
        "x": 210,
        "y": 2180,
        "wires": [
            [
                "574d179930b20b5c",
                "16ad852f5ecba737",
                "3537b7aa99adf2d2"
            ]
        ]
    },
    {
        "id": "a76cccd6617ab051",
        "type": "template",
        "z": "d2c6df88ed86b5d6",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{req.params.arg}}",
        "output": "str",
        "x": 375,
        "y": 380,
        "wires": [
            [
                "304425e78e8162e7"
            ]
        ],
        "l": false
    },
    {
        "id": "8ff6010e4b592af5",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "name": "get ConfirmLPSeekSuccess response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 860,
        "wires": [],
        "l": false
    },
    {
        "id": "71513cb1d6e42c9c",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "name": "get DisconfirmHPSeekSuccess response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 900,
        "wires": [],
        "l": false
    },
    {
        "id": "fc39eabb887f395e",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "debug results data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 325,
        "y": 1780,
        "wires": [],
        "l": false
    },
    {
        "id": "d25609393956e240",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "name": "Results Out",
        "links": [
            "4cf77c99688452a3"
        ],
        "x": 325,
        "y": 1740,
        "wires": []
    },
    {
        "id": "4cf77c99688452a3",
        "type": "link in",
        "z": "d2c6df88ed86b5d6",
        "g": "7b93404230a4fcc3",
        "name": "Results In",
        "links": [
            "d25609393956e240"
        ],
        "x": 155,
        "y": 2740,
        "wires": [
            [
                "62f3b1a31a63ba4b"
            ]
        ]
    },
    {
        "id": "e02ff04f11b55e39",
        "type": "file",
        "z": "d2c6df88ed86b5d6",
        "g": "7b93404230a4fcc3",
        "name": "write json object to file",
        "filename": "/home/dev/unsecured/results.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 380,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "b1861341826fe969",
        "type": "mysql",
        "z": "d2c6df88ed86b5d6",
        "d": true,
        "g": "7b93404230a4fcc3",
        "mydb": "3a9158adb601d14b",
        "name": "Write to dapt db",
        "x": 700,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "e94129d6b1b1dbe8",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "7b93404230a4fcc3",
        "name": "results header write",
        "func": "let sqlQuery = ``;\n\n// IF EXISTS (SELECT * FROM [Table] WHERE ID = rowID)\n// UPDATE [Table] SET propertyOne = propOne, property2 . . .\n// ELSE\n// INSERT INTO [Table] (propOne, propTwo . . .)\n\nif (msg.writeResultsHeader) {\n    let resultsHeader = msg.resultsHeaderToWrite;\n    if (resultsHeader) {\n        let colsArray = [\n            \"pr_id\",\n            \"plan_id\",\n            \"pl_stat\",\n            \"td_ch\",\n            \"serialnumber\",\n            \"test\",\n            \"result\",\n            \"type\",\n            \"crit_yn\",\n            \"well\",\n            \"cntrct\",\n            \"op\",\n            \"ocsg\",\n            \"blk\",\n            \"api\",\n            \"stack\",\n            \"trans_ser\",\n            \"trans_exp\",\n            \"start\",\n            \"stop\",\n            \"lptest\",\n            \"lpmax_wrn\",\n            \"lpmin_wrn\",\n            \"lpmin_drtn\",\n            \"lpdeltap_drtn_per\",\n            \"lpdeltap_drtn_psi\",\n            \"lptrend\",\n            \"hptest\",\n            \"hpmax_wrn\",\n            \"hpmin_wrn\",\n            \"hpmin_drtn\",\n            \"hpdeltap_drtn_per\",\n            \"hpdeltap_drtn_psi\",\n            \"hptrend\",\n            \"lprvldtn_start_t\",\n            \"lprvldtn_stop_t\",\n            \"lprvldtn_start_p\",\n            \"lprvldtn_stop_p\",\n            \"lprdeltap_drtn\",\n            \"lprend_roc\",\n            \"lprseek_start_t\",\n            \"lprseek_stop_t\",\n            \"lpresult\",\n            \"lprfinal_trend\",\n            \"hprvldtn_start_t\",\n            \"hprvldtn_stop_t\",\n            \"hprvldtn_start_p\",\n            \"hprvldtn_stop_p\",\n            \"hprdeltap_drtn\",\n            \"hprend_roc\",\n            \"hprseek_start_t\",\n            \"hprseek_stop_t\",\n            \"hprfinal_trend\",\n            \"hpresult\",\n            \"tpt_start\",\n            \"tpt_stop\",\n            \"ezv01_as_planned\",\n            \"ezv02_as_planned\",\n            \"ezv03_as_planned\",\n            \"ezv04_as_planned\",\n            \"ezv05_as_planned\",\n            \"ezv06_as_planned\",\n            \"ezv07_as_planned\",\n            \"ezv08_as_planned\",\n            \"ezv09_as_planned\",\n            \"ezv10_as_planned\",\n            \"ezv11_as_planned\",\n            \"ezv12_as_planned\",\n            \"ezv13_as_planned\",\n            \"ezv14_as_planned\",\n            \"ezv15_as_planned\",\n            \"ezv16_as_planned\",\n            \"ezv17_as_planned\",\n            \"ezv18_as_planned\",\n            \"ezv19_as_planned\",\n            \"ezv20_as_planned\",\n            \"ezv21_as_planned\",\n            \"ezv22_as_planned\",\n            \"ezv23_as_planned\",\n            \"ezv24_as_planned\",\n            \"ezv25_as_planned\",\n            \"ezv26_as_planned\",\n            \"ezv27_as_planned\",\n            \"ezv28_as_planned\",\n            \"ezv29_as_planned\",\n            \"ezv30_as_planned\",\n            \"ezv31_as_planned\",\n            \"ezv32_as_planned\",\n            \"ezv33_as_planned\",\n            \"ezv34_as_planned\",\n            \"ezv35_as_planned\",\n            \"ezv36_as_planned\",\n            \"ezv37_as_planned\",\n            \"ezv38_as_planned\",\n            \"ezv39_as_planned\",\n            \"ezv40_as_planned\",\n            \"ezv41_as_planned\",\n            \"ezv42_as_planned\",\n            \"ezv43_as_planned\",\n            \"ezv44_as_planned\",\n            \"ezv45_as_planned\",\n            \"ezv46_as_planned\",\n            \"ezv47_as_planned\",\n            \"ezv48_as_planned\",\n            \"ezv49_as_planned\",\n            \"ezv50_as_planned\",\n            \"ezv01_as_tested\",\n            \"ezv02_as_tested\",\n            \"ezv03_as_tested\",\n            \"ezv04_as_tested\",\n            \"ezv05_as_tested\",\n            \"ezv06_as_tested\",\n            \"ezv07_as_tested\",\n            \"ezv08_as_tested\",\n            \"ezv09_as_tested\",\n            \"ezv10_as_tested\",\n            \"ezv11_as_tested\",\n            \"ezv12_as_tested\",\n            \"ezv13_as_tested\",\n            \"ezv14_as_tested\",\n            \"ezv15_as_tested\",\n            \"ezv16_as_tested\",\n            \"ezv17_as_tested\",\n            \"ezv18_as_tested\",\n            \"ezv19_as_tested\",\n            \"ezv20_as_tested\",\n            \"ezv21_as_tested\",\n            \"ezv22_as_tested\",\n            \"ezv23_as_tested\",\n            \"ezv24_as_tested\",\n            \"ezv25_as_tested\",\n            \"ezv26_as_tested\",\n            \"ezv27_as_tested\",\n            \"ezv28_as_tested\",\n            \"ezv29_as_tested\",\n            \"ezv30_as_tested\",\n            \"ezv31_as_tested\",\n            \"ezv32_as_tested\",\n            \"ezv33_as_tested\",\n            \"ezv34_as_tested\",\n            \"ezv35_as_tested\",\n            \"ezv36_as_tested\",\n            \"ezv37_as_tested\",\n            \"ezv38_as_tested\",\n            \"ezv39_as_tested\",\n            \"ezv40_as_tested\",\n            \"ezv41_as_tested\",\n            \"ezv42_as_tested\",\n            \"ezv43_as_tested\",\n            \"ezv44_as_tested\",\n            \"ezv45_as_tested\",\n            \"ezv46_as_tested\",\n            \"ezv47_as_tested\",\n            \"ezv48_as_tested\",\n            \"ezv49_as_tested\",\n            \"ezv50_as_tested\",\n            \"ezv01_changed\",\n            \"ezv02_changed\",\n            \"ezv03_changed\",\n            \"ezv04_changed\",\n            \"ezv05_changed\",\n            \"ezv06_changed\",\n            \"ezv07_changed\",\n            \"ezv08_changed\",\n            \"ezv09_changed\",\n            \"ezv10_changed\",\n            \"ezv11_changed\",\n            \"ezv12_changed\",\n            \"ezv13_changed\",\n            \"ezv14_changed\",\n            \"ezv15_changed\",\n            \"ezv16_changed\",\n            \"ezv17_changed\",\n            \"ezv18_changed\",\n            \"ezv19_changed\",\n            \"ezv20_changed\",\n            \"ezv21_changed\",\n            \"ezv22_changed\",\n            \"ezv23_changed\",\n            \"ezv24_changed\",\n            \"ezv25_changed\",\n            \"ezv26_changed\",\n            \"ezv27_changed\",\n            \"ezv28_changed\",\n            \"ezv29_changed\",\n            \"ezv30_changed\",\n            \"ezv31_changed\",\n            \"ezv32_changed\",\n            \"ezv33_changed\",\n            \"ezv34_changed\",\n            \"ezv35_changed\",\n            \"ezv36_changed\",\n            \"ezv37_changed\",\n            \"ezv38_changed\",\n            \"ezv39_changed\",\n            \"ezv40_changed\",\n            \"ezv41_changed\",\n            \"ezv42_changed\",\n            \"ezv43_changed\",\n            \"ezv44_changed\",\n            \"ezv45_changed\",\n            \"ezv46_changed\",\n            \"ezv47_changed\",\n            \"ezv48_changed\",\n            \"ezv49_changed\",\n            \"ezv50_changed\"\n        ];\n        \n        let cols = `${colsArray[0]}`;\n        let data = `${resultsHeader[colsArray[0]]}`\n        let colAndData = `${colsArray[0]} = ${resultsHeader[colsArray[0]]}`;\n        \n        for (let i = 1; i < colsArray.length; i++) {\n            cols += `, ${colsArray[i]}`;\n            data += `, ${resultsHeader[colsArray[i]]}`\n            colAndData += `, ${colsArray[i]} = ${resultsHeader[colsArray[i]]}`;\n        }\n        \n        let sqlQuery1 = `IF EXISTS (SELECT * FROM resultsheader WHERE plan_id = ${resultsHeader.plan_id} `\n        let sqlQuery2 = `UPDATE resultsheader SET ${colAndData} `\n        let sqlQuery3 = `ELSE `\n        let sqlQuery4 = `INSERT INTO resultsheader (${cols}) VALUES (${data})`;\n        \n        sqlQuery += sqlQuery1 + sqlQuery2 + sqlQuery3 + sqlQuery4;\n        \n        msg.sqlQuery = sqlQuery;\n        msg.topic = sqlQuery;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2740,
        "wires": [
            [
                "ea97ee61f5313123",
                "4856032cfd5247d8"
            ]
        ]
    },
    {
        "id": "68ae0d91c4a92f3b",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "7b93404230a4fcc3",
        "name": "results data write",
        "func": "let sqlQuery = \"INSERT INTO resultsdata (td_ch, timestamp, plan_name, pressure, raw_psi, roc, trend, delta_p, seeking_lp, seeking_hp, plan_id, serialnumber) VALUES \";\n\nif (msg.writeResultsData) {\n    let resultsData = msg.resultsDataToWrite;\n    let stringResultsData = []\n    if (resultsData && resultsData.length > 0) {\n        for (let i = 0; i < resultsData.length; i++) {\n            let stringOfData = `(${\n                resultsData.td_ch[i]\n            }, ${\n                resultsData.timestamp[i]\n            }, ${\n                resultsData.plan_name[i]\n            }, ${\n                resultsData.pressure[i]\n            }, ${\n                resultsData.raw_psi[i]\n            }, ${\n                resultsData.roc[i]\n            }, ${\n                resultsData.trend[i]\n            }, ${\n                resultsData.delta_p[i]\n            }, ${\n                resultsData.seeking_lp[i]\n            }, ${\n                resultsData.seeking_hp[i]\n            }, ${\n                resultsData.plan_id[i]\n            },  ${\n                resultsData.serialnumber[i]\n            })`\n            stringResultsData.push(stringOfData);\n        }\n        \n        sqlQuery += stringResultsData[0]\n        \n        for (let i = 1; i < stringResultsData.length; i++) {\n            sqlQuery += \", \" + stringResultsData[i]\n        }\n        \n        msg.sqlQuery = sqlQuery;\n        msg.topic = sqlQuery;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2820,
        "wires": [
            [
                "b1861341826fe969",
                "628272e9a05f5f89"
            ]
        ]
    },
    {
        "id": "4856032cfd5247d8",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "7b93404230a4fcc3",
        "name": "results header write debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 555,
        "y": 2700,
        "wires": [],
        "l": false
    },
    {
        "id": "628272e9a05f5f89",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "7b93404230a4fcc3",
        "name": "results header write debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 555,
        "y": 2780,
        "wires": [],
        "l": false
    },
    {
        "id": "ef87ce4dc0f559d2",
        "type": "groov-write-ds",
        "z": "d2c6df88ed86b5d6",
        "dataStore": "3d12573e4fa63ac8",
        "tagName": "pAvg",
        "tableStartIndex": "",
        "value": "pAvg",
        "valueType": "msg",
        "name": "groov write pAvg",
        "x": 340,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "9109eeb0bf81deda",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "name": "Start LP Seek I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 680,
        "wires": []
    },
    {
        "id": "ac2139983ca3cb91",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "name": "Stop LP Seek I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 720,
        "wires": []
    },
    {
        "id": "44f47973c5b0d49e",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "name": "Start HP Seek I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 760,
        "wires": []
    },
    {
        "id": "ce89d9135feedfe6",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "set testing state debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 455,
        "y": 1560,
        "wires": [],
        "l": false
    },
    {
        "id": "2073f869d1e631b3",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "a0e99e192636d080",
        "name": "set testing state debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 875,
        "y": 1560,
        "wires": [],
        "l": false
    },
    {
        "id": "19cc2146732c2065",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "cfe0de30100b6ac2",
        "name": "set testing state debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 495,
        "y": 2380,
        "wires": [],
        "l": false
    },
    {
        "id": "4d359a426af8c44a",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "start monitoring debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 655,
        "y": 40,
        "wires": [],
        "l": false
    },
    {
        "id": "5a10b5173f9f9f94",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "name": "clear context trigger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 285,
        "y": 1700,
        "wires": [],
        "l": false
    },
    {
        "id": "52f1676021d538b1",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get run/:cmd route",
        "url": "run/:cmd",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "e152448fb64124b0"
            ]
        ]
    },
    {
        "id": "d3ccc24efe7fd01d",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get run/:cmd response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 855,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "e152448fb64124b0",
        "type": "template",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{req.params.cmd}}",
        "output": "str",
        "x": 375,
        "y": 60,
        "wires": [
            [
                "59625dc20addbc1e"
            ]
        ],
        "l": false
    },
    {
        "id": "ae7474a950bb68ff",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Start Recording Out",
        "links": [
            "2a8a8e2ee74936bf",
            "b691cc6ec9e5527e"
        ],
        "x": 895,
        "y": 60,
        "wires": []
    },
    {
        "id": "59625dc20addbc1e",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle run/:cmd",
        "func": "if (msg.payload === \"StopRecording\") {\n    msg.reset = 1\n    node.send([null, msg])\n} else if (msg.payload === \"StartRecording\") {\n    msg.payload = \"start\"\n    msg.ts = Date.now();\n    node.send([msg, null])\n} else {\n    node.send([msg, null])\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 60,
        "wires": [
            [
                "d3ccc24efe7fd01d",
                "ae7474a950bb68ff",
                "4d359a426af8c44a"
            ],
            [
                "d3ccc24efe7fd01d",
                "da995a8124c5adba"
            ]
        ]
    },
    {
        "id": "4943ecde9b25f3f8",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get interval route",
        "url": "interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "ad29e6f9b79bc88d"
            ]
        ]
    },
    {
        "id": "23761ff0cfd45845",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get interval response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 100,
        "wires": [],
        "l": false
    },
    {
        "id": "ad29e6f9b79bc88d",
        "type": "template",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{req.query.interval}}",
        "output": "str",
        "x": 375,
        "y": 100,
        "wires": [
            [
                "c3b94a4b2e23805f"
            ]
        ],
        "l": false
    },
    {
        "id": "da995a8124c5adba",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Stop Recording Out",
        "links": [
            "b691cc6ec9e5527e"
        ],
        "x": 895,
        "y": 100,
        "wires": []
    },
    {
        "id": "c3b94a4b2e23805f",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle /interval",
        "func": "msg.topic = \"interval\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "23761ff0cfd45845",
                "e711a2513188105f"
            ]
        ]
    },
    {
        "id": "2c9d8d7d7c1eab20",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get psi route",
        "url": "psi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "53ef2fe621d03939"
            ]
        ]
    },
    {
        "id": "53ef2fe621d03939",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle /psi",
        "func": "let psi = {}\nlet i \nlet a\nlet p\nfor (i=0; i<8; i++){\n    a = \"psi_mAvg_ch\" + i\n    ts = \"time\" + i\n    p = flow.get(a)\n    t = p.tStamp\n    b = p.psiAvg\n    r = p.rocAvg\n    // Add in other values to this section? tf, deltaP, etc...\n    psi[a]=[b,r]\n    psi[ts]=t\n}\nmsg.payload=psi\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            [
                "1da5ba86a4d8b788"
            ]
        ]
    },
    {
        "id": "1da5ba86a4d8b788",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get psi response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 140,
        "wires": [],
        "l": false
    },
    {
        "id": "e711a2513188105f",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Get Interval Out",
        "links": [
            "373d3e5b6d71063e"
        ],
        "x": 775,
        "y": 120,
        "wires": []
    },
    {
        "id": "bbf0d68f2ed9f082",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get testing/:arg route",
        "url": "testing/:arg",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "dfb541b16382588a"
            ]
        ]
    },
    {
        "id": "a46b508952b6c26f",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle /testing/:arg",
        "func": "if (msg.payload === \"stopTesting\"){\n    msg.reset = 1\n    node.send([null, msg])\n} else if (msg.payload === \"startTesting\"){\n    node.send(msg)\n}\nreturn;\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "9fe25812e4059fbe",
                "b7dabde0314de691"
            ],
            [
                "9fe25812e4059fbe",
                "4df47366f46753f1"
            ]
        ]
    },
    {
        "id": "9fe25812e4059fbe",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get testing/:arg response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 855,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "dfb541b16382588a",
        "type": "template",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{req.params.arg}}",
        "output": "str",
        "x": 375,
        "y": 180,
        "wires": [
            [
                "a46b508952b6c26f"
            ]
        ],
        "l": false
    },
    {
        "id": "3b44078d18465d86",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get testinterval route",
        "url": "testinterval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "13fae89dfcbd3f45"
            ]
        ]
    },
    {
        "id": "13fae89dfcbd3f45",
        "type": "template",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{req.query.interval}}",
        "output": "str",
        "x": 375,
        "y": 220,
        "wires": [
            [
                "66d3a92008794a0c"
            ]
        ],
        "l": false
    },
    {
        "id": "66d3a92008794a0c",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle /testinterval",
        "func": "msg.topic = \"interval\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 220,
        "wires": [
            [
                "b60b09a826b95814",
                "eeb4516ed95443ed"
            ]
        ]
    },
    {
        "id": "b60b09a826b95814",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get testinterval response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 220,
        "wires": [],
        "l": false
    },
    {
        "id": "c2fd37bf937ce107",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get testing/:channel route",
        "url": "testing/:channel",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "f87d3978e631568c"
            ]
        ]
    },
    {
        "id": "f87d3978e631568c",
        "type": "template",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{req.params.channel}}",
        "output": "str",
        "x": 375,
        "y": 260,
        "wires": [
            [
                "5dc017168f03158f"
            ]
        ],
        "l": false
    },
    {
        "id": "5dc017168f03158f",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle /testing/:channel",
        "func": "flow.set(\"test_ch\", msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "983de8ca3013edc9"
            ]
        ]
    },
    {
        "id": "983de8ca3013edc9",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get testing/:channel response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "b7dabde0314de691",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Start CSV Testing Out",
        "links": [
            "992fd3647ca2adf5",
            "13a58b298d70be8b",
            "2b1cc975057d6fdb"
        ],
        "x": 895,
        "y": 180,
        "wires": []
    },
    {
        "id": "4df47366f46753f1",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Stop CSV Testing Out",
        "links": [
            "2b1cc975057d6fdb"
        ],
        "x": 895,
        "y": 220,
        "wires": []
    },
    {
        "id": "eeb4516ed95443ed",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Get CSV Interval Out",
        "links": [
            "c26c9cef441e4061"
        ],
        "x": 775,
        "y": 240,
        "wires": []
    },
    {
        "id": "c7a4bf3ca067161b",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get AllData route",
        "url": "AllData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "ae0cde19190187f7"
            ]
        ]
    },
    {
        "id": "ae0cde19190187f7",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle AllData",
        "func": "let channel = flow.get(\"test_ch\") || 0;\n\nlet flow_calc = flow.get('flow_calc' + channel);\nlet allData;\nif (!flow_calc) {\n    allData = {\n        Channel: 1,\n        CommConnected: false,\n        PlanID: \"\",\n        PTConnected: false,\n        StartPressure: NaN,\n        StartTime: NaN,\n        ElapsedTime: NaN,\n        SeekGauge: NaN,\n        timestamp: [],\n        AvgPressure: [],\n        RoC: [],\n        LPSeekStarted: false,\n        HPSeekStarted: false,\n        SeekStartTime: NaN,\n        SeekElapsedTime: NaN,\n        DeltaP: NaN,\n        TF: NaN,\n        TFActualGauge: NaN, // 30 second indicator average gauge\n        TFGauge: NaN,\n        DecreasingCurrent: NaN,\n        DecreasingTrend: NaN,\n        lpResults: {\n            lpResult: \"\",\n            lpUnconfirmedPassResult: \"\"\n        },\n        LPSeekFinished: false,\n        hpResults: {\n            hpResult: \"\",\n            hpUnconfirmedPassResult: \"\"\n        },\n        HPSeekFinished: false,\n        VisibleLeak: false,\n        ChannelsTesting: {1: false, 2: false, 3: false, 4: false, 5: false, 6: false, 7: false, 8: false},\n        CurrentPressure: NaN,\n        CurrentRoC: NaN,\n        CurrentTimeStamp: NaN,\n    };\n} else {\n    allData = flow_calc.allData\n}\n\nmsg.payload = allData;\n\nif (!allData) {\n    msg.start = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 500,
        "wires": [
            [
                "29ebcdd4b258d6ea",
                "e15701b903c2ef60"
            ]
        ]
    },
    {
        "id": "29ebcdd4b258d6ea",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get allData response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 500,
        "wires": [],
        "l": false
    },
    {
        "id": "2b3e9adeb3123008",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "post AllPlanInfo route",
        "url": "AllPlanInfo",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "80b9ce8ff5749813",
                "72b2d02234e0af74"
            ]
        ]
    },
    {
        "id": "72b2d02234e0af74",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle AllPlanInfo",
        "func": "let data = msg.payload;\n\n// plan info from EZ Chart\nlet planName = data.planName;\nlet planID = data.planID;\nlet pipeSize = data.pipeSize;\nlet critical = data.critical;\nlet comments = data.comments;\nlet reportComments = data.reportComments;\n\n// criteria info from EZ Chart\nlet lp_duration = data.lp_duration;\nlet lp_maxTotalDecay = data.lp_maxTotalDecay;\nlet lp_minPressure = data.lp_minPressure;\nlet lp_maxPressure = data.lp_maxPressure;\nlet lp_testPressure = data.lp_testPressure;\nlet lp_trend = data.lp_trend;\nlet hp_duration = data.hp_duration;\nlet hp_maxTotalDecay = data.hp_maxTotalDecay;\nlet hp_minPressure = data.hp_minPressure;\nlet hp_maxPressure = data.hp_maxPressure;\nlet hp_testPressure = data.hp_testPressure;\nlet hp_trend = data.hp_trend;\nlet single = data.single;\nlet critName = data.critName;\nlet critID = data.critID;\nlet decayType = data.decayType;\nlet rwpCFR = data.rwpCFR;\n\n// project info from EZ Chart\nlet wellName = data.wellName;\nlet drillingContractor = data.drillingContractor;\nlet operator = data.operator;\nlet ocsgNo = data.ocsgNo;\nlet block = data.block;\nlet apiNo = data.apiNo;\nlet stack = data.stack;\nlet rigName = data.rigName;\nlet projectName = data.projectName;\nlet projectID = data.projectID;\n\n// transducer information from EZ Chart\nlet transducerID = data.transducerID;\nlet expirationDate = data.expirationDate;\nlet enghigh = data.enghigh;\nlet englow = data.englow;\nlet transducerName = data.transducerName;\nlet rawhigh = data.rawhigh;\nlet rawlow = data.rawlow;\nlet serialNumber = data.serialNumber;\nlet tare = data.tare;\nlet channelnum = data.channelnum - 1;\n\nlet planInfo = {\n    apiNo: apiNo,\n    block: block,\n    channel: channelnum,\n    comments: comments,\n    critical: critical,\n    critID: critID,\n    critName: critName,\n    decayType: decayType,\n    drillingContractor: drillingContractor,\n    enghigh: enghigh,\n    englow: englow,\n    expirationDate: expirationDate,\n    lp_duration: lp_duration,\n    lp_maxTotalDecay: lp_maxTotalDecay,\n    lp_minPressure: lp_minPressure,\n    lp_maxPressure: lp_maxPressure,\n    lp_testPressure: lp_testPressure,\n    lp_trend: lp_trend,\n    hp_duration: hp_duration,\n    hp_maxTotalDecay: hp_maxTotalDecay,\n    hp_minPressure: hp_minPressure,\n    hp_maxPressure: hp_maxPressure,\n    hp_testPressure: hp_testPressure,\n    hp_trend: hp_trend,\n    ocsgNo: ocsgNo,\n    operator: operator,\n    pipeSize: pipeSize,\n    planID: planID,\n    planName: planName,\n    projectID: projectID,\n    projectName: projectName,\n    reportComments: reportComments,\n    rawhigh: rawhigh,\n    rawlow: rawlow,\n    rigName: rigName,\n    rwpCFR: rwpCFR,\n    serialNumber: serialNumber,\n    single: single,\n    stack: stack,\n    tare: tare,\n    transducerID: transducerID,\n    transducerName: transducerName,\n    wellName: wellName\n}\n\nlet flow_calc = flow.get('flow_calc' + planInfo.channel);\nlet testing = flow_calc.testing;\n\nif (!testing) {\n    flow_calc.planInfo = planInfo;\n    flow.set('flow_calc' + planInfo.channel, flow_calc);\n    flow.set('test_ch', planInfo.channel)\n    msg.payload = {send: \"success\", ...planInfo};\n    msg.planInfo = planInfo;\n    return msg;\n} else {\n    msg.payload = {send: 'channel is currently testing', ...planInfo};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1100,
        "wires": [
            [
                "822d521a224c016c",
                "988e159534aa0c23",
                "eac116f5229de8ea"
            ]
        ]
    },
    {
        "id": "822d521a224c016c",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "post AllPlanInfo response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 1100,
        "wires": [],
        "l": false
    },
    {
        "id": "d6fc136184b12392",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "post transducer route",
        "url": "transducer",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1140,
        "wires": [
            [
                "c14180ceb6eb26ae"
            ]
        ]
    },
    {
        "id": "c14180ceb6eb26ae",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle transducer",
        "func": "let transducerInfo = msg.payload;\n\nlet flow_calc = flow.get('flow_calc' + transducerInfo.channelnum - 1);\n\nif (flow_calc.testing === false) {\n    if (flow_calc.planInfo.transducerID === transducerInfo.transducerID) {\n        flow_calc.planInfo.tare = transducerInfo.tare;\n        flow.set('flow_calc' + transducerInfo.channelnum - 1, flow_calc);\n        msg.payload = 'tare updated successfully';\n    } else {\n        msg.payload = 'transducer does not match';\n    }\n} else {\n    msg.payload = 'currently testing, can not update tare';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1140,
        "wires": [
            [
                "4c7f1f241c89da1c"
            ]
        ]
    },
    {
        "id": "4c7f1f241c89da1c",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "post tare response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 1140,
        "wires": [],
        "l": false
    },
    {
        "id": "988e159534aa0c23",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "set tf_weights",
        "func": "if (msg.payload && msg.payload.send === \"success\") {\n    planInfo = msg.planInfo;\n    channel = planInfo.channel;\n    duration = planInfo.hp_duration || 5;\n    \n    let weight_factor = flow.get('weight_factor') || 0.96;\n    let acquisition_rate = flow.get('acquisition_rate') || 5;\n\n    // duration * seconds in a minute * acquisition_rate\n    let validation_total_pressures = duration * 60 * acquisition_rate;\n    \n    // Split into 60% sections\n    let weight_total_pressures = (validation_total_pressures * 3) / 5;\n    \n    let weight_1 = [];\n    let weight_2 = [];\n    let weight_3 = [];\n    \n    // Setting up weight 1 array\n    for (let i = 0; i < weight_total_pressures; i++) {\n        if (i === 0) {\n            let pushedVal = 1;\n            weight_1 = [1];\n        } else {\n            let pushedVal = weight_1[i - 1] * weight_factor;\n            weight_1.push(pushedVal); \n        }\n    }\n    \n    // Setting up weight 2 array\n    for (let i = 1; i <= (weight_total_pressures / 2); i++) {\n        // Grabbing values from weight array 1\n        weight_2.push(weight_1[i]);\n    }\n    \n    // Saving the original array that was made\n    let original_weight_2 = [...weight_2];\n    // Reversing the order since the start should be small\n    weight_2.reverse();\n    // Combining the two arrays to make the weighted portion in the middle\n    weight_2 = [...weight_2, ...original_weight_2];\n    \n    flow.set(\"tf_weights_ch\" + channel, {\n        validation_total_pressures: validation_total_pressures,\n        weight_total_pressures: weight_total_pressures,\n        weight_factor: weight_factor,\n        tf_weight_1: weight_1,\n        tf_weight_2: weight_2\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "4672c409ca9dcab8",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get acquisition_rate/:arg route",
        "url": "acquisition_rate/:arg",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "9c54bd23032325d8"
            ]
        ]
    },
    {
        "id": "9c54bd23032325d8",
        "type": "template",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{req.params.arg}}",
        "output": "str",
        "x": 375,
        "y": 340,
        "wires": [
            [
                "0ed700a609d70266"
            ]
        ],
        "l": false
    },
    {
        "id": "0ed700a609d70266",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle acquisition rate change",
        "func": "let acquisition_rate = msg.payload;\n\nflow.set('acquisition_rate', acquisition_rate);\nflow.set('interval', Math.floor(1000 / acquisition_rate));\nmsg.payload = \"acquisition rate set to \" + acquisition_rate;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 340,
        "wires": [
            [
                "38a3f1fc76e13319"
            ]
        ]
    },
    {
        "id": "38a3f1fc76e13319",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get acquisition_rate/:arg response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 340,
        "wires": [],
        "l": false
    },
    {
        "id": "022c3dc6365b760f",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get weight_factor/:arg route",
        "url": "weight_factor/:arg",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "a76cccd6617ab051"
            ]
        ]
    },
    {
        "id": "bbe2b866162c1d80",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get weight_factor/:arg response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "304425e78e8162e7",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle weight_factor change",
        "func": "let weight_factor = msg.payload;\n\nflow.set('weight_factor', acquisition_rate);\nmsg.payload = \"weight factor set to \" + weight_factor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 380,
        "wires": [
            [
                "bbe2b866162c1d80"
            ]
        ]
    },
    {
        "id": "c28fbc2b3418a4e4",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartMonitoring route",
        "url": "StartMonitoring",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "0590d33edf7ac415"
            ]
        ]
    },
    {
        "id": "5569364a8312ed08",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StopMonitoring route",
        "url": "StopMonitoring",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "5317c039d6b7bbe3"
            ]
        ]
    },
    {
        "id": "d41915cb782dd63f",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get ClearResults route",
        "url": "ClearResults",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "5f1428a560b4a7bc"
            ]
        ]
    },
    {
        "id": "181a4965ed13f1a0",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartLPSeek route",
        "url": "StartLPSeek",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "fe7c70c42637cb4d"
            ]
        ]
    },
    {
        "id": "33b7d64d051b3d84",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StopLPSeek route",
        "url": "StopLPSeek",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "0a318e9c525778e1"
            ]
        ]
    },
    {
        "id": "abd0fd3274572435",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartHPSeek route",
        "url": "StartHPSeek",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "8b1252adc97a0615"
            ]
        ]
    },
    {
        "id": "85235bc6126aec7a",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StopHPSeek route",
        "url": "StopHPSeek",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "a6a4537b7fea5e1c"
            ]
        ]
    },
    {
        "id": "f740d3c2b7b6bd3e",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get DisconfirmLPSeekSuccess route",
        "url": "DisconfirmLPSeekSuccess",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 860,
        "wires": [
            [
                "c62a7ed1f4df3ebc"
            ]
        ]
    },
    {
        "id": "e67157901a0e90bb",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get ConfirmLPSeekSuccess route",
        "url": "ConfirmLPSeekSuccess",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "300648329e1676b9"
            ]
        ]
    },
    {
        "id": "50d1f3eb65c2940d",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get DisconfirmHPSeekSuccess route",
        "url": "DisconfirmHPSeekSuccess",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 940,
        "wires": [
            [
                "940ee579a69c1d75"
            ]
        ]
    },
    {
        "id": "1e0a281695b78193",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get ConfirmHPSeekSuccess route",
        "url": "ConfirmHPSeekSuccess",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 980,
        "wires": [
            [
                "91081456c57ccf6d"
            ]
        ]
    },
    {
        "id": "35f4138bbfcb4d18",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get VisibleLeak route",
        "url": "VisibleLeak",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "48e6b91801a3942b"
            ]
        ]
    },
    {
        "id": "0590d33edf7ac415",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle StartMonitoring",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\nlet channelsTesting = flow.get('channelsTesting');\nlet testing = flow_calc.testing;\nmsg.channel = channel;\nmsg.testing = testing;\n\nif (testing) {\n    msg.payload = 'This channel is currently testing.'\n    msg.startTesting = {start: \"no change\"}\n} else {\n    flow_calc.testing = true;\n    channelsTesting[channel + 1] = true;\n    flow.set('channelsTesting', channelsTesting);\n    flow.set('flow_calc' + channel, flow_calc);\n    msg.payload = 'Test started.'\n    msg.startTesting = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "46c2c9e3690fc077",
                "acca1e112cfc481f",
                "4c277309833935ba"
            ]
        ]
    },
    {
        "id": "46c2c9e3690fc077",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartMonitoring response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 580,
        "wires": [],
        "l": false
    },
    {
        "id": "5317c039d6b7bbe3",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle StopMonitoring",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\nlet channelsTesting = flow.get('channelsTesting');\n\nif (flow_calc.testing === false) {\n    msg.payload = 'This channel has not started testing.';\n    msg.finished = false;\n    msg.startTesting = {start: \"no change\"};\n} else {\n    msg.payload = 'Testing stopped.';\n    msg.finished = true;\n    flow_calc.testing = false;\n    flow_calc.seeking = false;\n    flow_calc.resultsHeader.stop = Date.now();\n    channelsTesting[channel + 1] = false;\n    flow.set('channelsTesting', channelsTesting);\n    flow.set('flow_calc' + channel, flow_calc);\n    msg.startTesting = {start: \"stop\"};\n    msg.testingStopped = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 620,
        "wires": [
            [
                "39fdb5372e23fdc7",
                "2338a2c7e07f76da",
                "fc5d1666da11678d"
            ]
        ]
    },
    {
        "id": "39fdb5372e23fdc7",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartMonitoring response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 620,
        "wires": [],
        "l": false
    },
    {
        "id": "fc5d1666da11678d",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "update mariadb monitoring results",
        "func": "if (msg.finished) {\n    // HANDLE FINAL PUSH TO MARIA DB HERE\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "48e6b91801a3942b",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle VisibleLeak",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing === false) {\n    msg.payload = 'This channel has not started testing.';\n    msg.finished = false;\n} else {\n    flow_calc.visible_leak = true;\n    flow_calc.testing = false;\n    flow.set('flow_calc' + channel, flow_calc);\n    flow.get('channelsTesting');\n    channelsTesting[channel + 1] = false;\n    flow.set('channelsTesting');\n    msg.payload = 'Testing stopped. Visible Leak notated.';\n    msg.finished = true;\n    msg.visible_leak = true;\n    msg.testingStopped = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1020,
        "wires": [
            [
                "91009f54c6031cb4",
                "1682a273632c696f",
                "347f99c10cbc9f9d"
            ]
        ]
    },
    {
        "id": "91009f54c6031cb4",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartMonitoring response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 1020,
        "wires": [],
        "l": false
    },
    {
        "id": "1682a273632c696f",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "update mariadb visible leak results",
        "func": "if (msg.finished && msg.visible_leak) {\n    // HANDLE FINAL PUSH TO MARIA DB HERE\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "5f1428a560b4a7bc",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle ClearResults",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing === false) {\n    msg.payload = 'This channel has not started testing.';\n    msg.clear_results = false;\n} else {\n    msg.payload = 'Testing stopped. Clearing Results.';\n    msg.clear_results = true;\n    msg.channelIndex = channel;\n    flow.get('channelsTesting');\n    channelsTesting[channel + 1] = false;\n    flow.set('channelsTesting');\n    flow.set('flow_calc' + channel, {});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 660,
        "wires": [
            [
                "54bda03b2be25f84",
                "4e03d6cdd197740d"
            ]
        ]
    },
    {
        "id": "54bda03b2be25f84",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartMonitoring response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 660,
        "wires": [],
        "l": false
    },
    {
        "id": "4e03d6cdd197740d",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "ClearResults Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 680,
        "wires": []
    },
    {
        "id": "fe7c70c42637cb4d",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle StartLPSeek",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing && flow_calc.planInfo) {\n    if (flow_calc.seeking && flow_calc.lp_seeking) {\n        msg.payload = 'This channel is currently seeking.'\n        msg.startSeek = {start: \"no change\"};\n    } else {\n        if (flow_calc.planInfo && !flow_calc.planInfo.single) {\n            flow_calc.seeking = true;\n            flow_calc.lp_seeking = true;\n            flow.set('flow_calc' + channel, flow_calc);\n            msg.payload = 'LP Seek started.';\n            msg.startSeek = {start: \"start\", lpStart: \"start\"};\n            msg.seekStarted = true;\n            msg.lp_seekStarted = true;\n        } else {\n            msg.payload = 'This channel is set to single pressure test, and can not perform a low pressure test.';\n            msg.startSeek = {start: \"no change\"};\n        }\n    }\n} else {\n    msg.payload = 'This channel is not testing.';\n    msg.startSeek = {start: \"no change\"};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 700,
        "wires": [
            [
                "d20913165425c278",
                "9109eeb0bf81deda"
            ]
        ]
    },
    {
        "id": "d20913165425c278",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartLPSeek response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 700,
        "wires": [],
        "l": false
    },
    {
        "id": "0a318e9c525778e1",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle StopLPSeek",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing && flow_calc.planInfo) {\n    if (!flow_calc.seeking) {\n        msg.payload = 'This channel is not currently seeking.'\n        msg.startSeek = {start: \"no change\"};\n    } else {\n        flow_calc.seeking = false;\n        flow_calc.lp_seeking = false;\n        flow.set('flow_calc' + channel, flow_calc);\n        msg.payload = 'LP Seek stopped.';\n        msg.startSeek = {start: \"stop\", lpStart: \"stop\"};\n        msg.seekStopped = true;\n        msg.lp_seekStopped = true;\n    }\n} else {\n    msg.payload = 'This channel is not testing.'\n    msg.startSeek = {start: \"no change\"};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "95a1bafbe095118b",
                "ac2139983ca3cb91"
            ]
        ]
    },
    {
        "id": "95a1bafbe095118b",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StopLPSeek response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 740,
        "wires": [],
        "l": false
    },
    {
        "id": "8b1252adc97a0615",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle StartHPSeek",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing && flow_calc.planInfo) {\n    if (flow_calc.seeking && flow_calc.hp_seeking) {\n        msg.payload = 'This channel is currently seeking.';\n        msg.startSeek = {start: \"no change\"};\n    } else {\n        flow_calc.seeking = true;\n        flow_calc.hp_seeking = true;\n        flow.set('flow_calc' + channel, flow_calc);\n        msg.payload = {text: 'HP Seek started.', seeking: seeking, hp_seeking: hp_seeking};\n        msg.startSeek = {start: \"start\", hpStart: \"start\"};\n        msg.seekStarted = true;\n        msg.hp_seekStarted = true;\n    }\n} else {\n    msg.payload = 'This channel is not testing.'\n    msg.startSeek = {start: \"no change\"};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 780,
        "wires": [
            [
                "70906a72500aebc1",
                "44f47973c5b0d49e"
            ]
        ]
    },
    {
        "id": "70906a72500aebc1",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StartHPSeek response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 780,
        "wires": [],
        "l": false
    },
    {
        "id": "a6a4537b7fea5e1c",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle StopHPSeek",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing && flow_calc.planInfo) {\n    if (!flow_calc.seeking) {\n        msg.payload = 'This channel is not seeking.'\n        msg.startSeek = {start: \"no change\"};\n    } else {\n        flow_calc.seeking = false;\n        flow_calc.hp_seeking = false;\n        flow.set('flow_calc' + channel, flow_calc);\n        msg.payload = 'HP Seek stopped.';\n        msg.startSeek = {start: \"stop\", hpStart: \"stop\"};\n        msg.seekStopped = true;\n        msg.hp_seekStopped = true;\n    }\n} else {\n    msg.payload = 'This channel is not testing.'\n    msg.startSeek = {start: \"no change\"};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 820,
        "wires": [
            [
                "710654a4f5236e71",
                "6177dddaa6f5da78"
            ]
        ]
    },
    {
        "id": "710654a4f5236e71",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get StopHPSeek response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 820,
        "wires": [],
        "l": false
    },
    {
        "id": "655723bb84b84b2d",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get DisconfirmLPSeekSuccess response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 860,
        "wires": [],
        "l": false
    },
    {
        "id": "c62a7ed1f4df3ebc",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle DisconfirmLP",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing) {\n    if (!flow_calc.seeking) {\n        msg.payload = 'This channel is not currently seeking.'\n    } else {\n        flow_calc.seeking = false;\n        flow_calc.lp_seeking = false;\n        flow_calc.lp_disconfirmed = true;\n        flow.set('flow_calc' + channel, flow_calc);\n        msg.payload = 'LP Seek stopped and cancelled.';\n    }\n} else {\n    msg.payload = 'This channel is not testing.'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 860,
        "wires": [
            [
                "655723bb84b84b2d",
                "167a3b19b3672d74"
            ]
        ]
    },
    {
        "id": "300648329e1676b9",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle ConfirmLP",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing) {\n    if (!flow_calc.seeking) {\n        msg.payload = 'This channel is not currently seeking.'\n    } else {\n        flow_calc.seeking = false;\n        flow_calc.lp_seeking = false;\n        flow_calc.lp_confirmed = true;\n        flow.set('flow_calc' + channel, flow_calc);\n        msg.payload = 'LP Seek stopped and confirmed.';\n    }\n} else {\n    msg.payload = 'This channel is not testing.'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 900,
        "wires": [
            [
                "8ff6010e4b592af5",
                "5cd1a29a0517a2cf"
            ]
        ]
    },
    {
        "id": "940ee579a69c1d75",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle DisconfirmHP",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing) {\n    if (!flow_calc.seeking) {\n        msg.payload = 'This channel is not currently seeking.'\n    } else {\n        flow_calc.seeking = false;\n        flow_calc.hp_seeking = false;\n        flow_calc.hp_disconfirmed = false;\n        flow.set('flow_calc' + channel, flow_calc);\n        msg.payload = 'HP Seek stopped and cancelled.';\n    }\n} else {\n    msg.payload = 'This channel is not testing.'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 940,
        "wires": [
            [
                "71513cb1d6e42c9c",
                "dd226dadde64eedb"
            ]
        ]
    },
    {
        "id": "91081456c57ccf6d",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle ConfirmHP",
        "func": "let channel = flow.get('test_ch');\nlet flow_calc = flow.get('flow_calc' + channel);\n\nif (flow_calc.testing) {\n    if (!flow_calc.seeking) {\n        msg.payload = 'This channel is not currently seeking.'\n    } else {\n        flow_calc.seeking = false;\n        flow_calc.hp_seeking = false;\n        flow_calc.hp_confirmed = false;\n        flow.set('flow_calc' + channel, flow_calc);\n        msg.payload = 'HP Seek stopped and confirmed.';\n    }\n} else {\n    msg.payload = 'This channel is not testing.'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 980,
        "wires": [
            [
                "d7c266c816fe6ede",
                "859f8807d3478bc8"
            ]
        ]
    },
    {
        "id": "d7c266c816fe6ede",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get ConfirmHPSeekSuccess response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 980,
        "wires": [],
        "l": false
    },
    {
        "id": "e15701b903c2ef60",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "AllData out",
        "links": [],
        "x": 775,
        "y": 520,
        "wires": []
    },
    {
        "id": "4c277309833935ba",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Start Testing I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 560,
        "wires": []
    },
    {
        "id": "2338a2c7e07f76da",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Stop Testing I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 600,
        "wires": []
    },
    {
        "id": "6177dddaa6f5da78",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Stop HP Seek I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 840,
        "wires": []
    },
    {
        "id": "eac116f5229de8ea",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "all plan info debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 665,
        "y": 1080,
        "wires": [],
        "l": false
    },
    {
        "id": "80b9ce8ff5749813",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "post allplaninfo route http in debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 315,
        "y": 1080,
        "wires": [],
        "l": false
    },
    {
        "id": "acca1e112cfc481f",
        "type": "debug",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "start monitoring debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 655,
        "y": 540,
        "wires": [],
        "l": false
    },
    {
        "id": "167a3b19b3672d74",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Disconfirm LP Seek Success I/O Out",
        "links": [],
        "x": 775,
        "y": 880,
        "wires": []
    },
    {
        "id": "5cd1a29a0517a2cf",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Confirm LP Seek Success I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 920,
        "wires": []
    },
    {
        "id": "dd226dadde64eedb",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Disconfirm HP Seek Success I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 960,
        "wires": []
    },
    {
        "id": "859f8807d3478bc8",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Confirm HP Seek Success I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 1000,
        "wires": []
    },
    {
        "id": "347f99c10cbc9f9d",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "Visible Leak I/O Out",
        "links": [
            "675ab78a47991b8b"
        ],
        "x": 775,
        "y": 1040,
        "wires": []
    },
    {
        "id": "dcf9e2e317275987",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "handle CurrentAllData",
        "func": "let channel = flow.get(\"test_ch\") || 0;\n\nlet flow_calc = flow.get('flow_calc' + channel);\nlet allData;\nif (!flow_calc) {\n    allData = {\n        Channel: 1,\n        CommConnected: false,\n        PlanID: \"\",\n        PTConnected: false,\n        StartPressure: NaN,\n        StartTime: NaN,\n        ElapsedTime: NaN,\n        SeekGauge: NaN,\n        timestamp: [],\n        AvgPressure: [],\n        RoC: [],\n        LPSeekStarted: false,\n        HPSeekStarted: false,\n        SeekStartTime: NaN,\n        SeekElapsedTime: NaN,\n        DeltaP: NaN,\n        TF: NaN,\n        TFActualGauge: NaN, // 30 second indicator average gauge\n        TFGauge: NaN,\n        DecreasingCurrent: NaN,\n        DecreasingTrend: NaN,\n        lpResults: {\n            lpResult: \"\",\n            lpUnconfirmedPassResult: \"\"\n        },\n        LPSeekFinished: false,\n        hpResults: {\n            hpResult: \"\",\n            hpUnconfirmedPassResult: \"\"\n        },\n        HPSeekFinished: false,\n        VisibleLeak: false,\n        ChannelsTesting: {1: false, 2: false, 3: false, 4: false, 5: false, 6: false, 7: false, 8: false},\n        CurrentPressure: NaN,\n        CurrentRoC: NaN,\n        CurrentTimeStamp: NaN,\n    };\n    msg.start = true;\n    msg.payload = allData;\n} else {\n    let currentAllData = {\n        Channel: flow_calc.allData.Channel,\n        CommConnected: flow_calc.allData.CommConnected,\n        PlanID: flow_calc.allData.PlanID,\n        PTConnected: flow_calc.allData.PTConnected,\n        StartPressure: flow_calc.allData.StartPressure,\n        StartTime: flow_calc.allData.StartTime,\n        ElapsedTime: flow_calc.allData.ElapsedTime,\n        SeekGauge: flow_calc.allData.SeekGauge,\n        LPSeekStarted: flow_calc.allData.LPSeekStarted,\n        HPSeekStarted: flow_calc.allData.HPSeekStarted,\n        SeekStartTime: flow_calc.allData.SeekStartTime,\n        SeekElapsedTime: flow_calc.allData.SeekElapsedTime,\n        DeltaP: flow_calc.allData.DeltaP,\n        TF: flow_calc.allData.TF,\n        TFActualGauge: flow_calc.allData.TFActualGauge,\n        TFGauge: flow_calc.allData.TFGauge,\n        DecreasingCurrent: flow_calc.allData.DecreasingCurrent,\n        DecreasingTrend: flow_calc.allData.DecreasingTrend,\n        lpResults: flow_calc.allData.lpResults,\n        LPSeekFinished: flow_calc.allData.LPSeekFinished,\n        hpResults: flow_calc.allData.hpResults,\n        HPSeekFinished: flow_calc.allData.HPSeekFinished,\n        VisibleLeak: flow_calc.allData.VisibleLeak,\n        ChannelsTesting: flow_calc.allData.ChannelsTesting,\n        CurrentPressure: flow_calc.allData.CurrentPressure,\n        CurrentRoC: flow_calc.allData.CurrentRoC,\n        CurrentTimeStamp: flow_calc.allData.CurrentTimeStamp,\n    }\n    \n    msg.payload = currentAllData;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 460,
        "wires": [
            [
                "70f2fae26f6ac459",
                "1cdf7549e299e044"
            ]
        ]
    },
    {
        "id": "096b282837549b50",
        "type": "http in",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get CurrentAllData route",
        "url": "CurrentAllData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "dcf9e2e317275987"
            ]
        ]
    },
    {
        "id": "70f2fae26f6ac459",
        "type": "http response",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "get CurrentAllData response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 735,
        "y": 460,
        "wires": [],
        "l": false
    },
    {
        "id": "1cdf7549e299e044",
        "type": "link out",
        "z": "d2c6df88ed86b5d6",
        "g": "44b095c87ee56d5a",
        "name": "CurrentAllData out",
        "links": [],
        "x": 775,
        "y": 480,
        "wires": []
    },
    {
        "id": "6b3ca7397c469799",
        "type": "function",
        "z": "d2c6df88ed86b5d6",
        "name": "all calc",
        "func": "/* ########## CLEAN AND PREP MESSAGE ########## */\n\nlet clear_results = msg.clear_results ? msg.clear_results : false;\nlet channelIndex = msg.channelIndex ? msg.channelIndex : flow.get('test_ch');\nlet testingStarted = msg.testingStarted ? msg.testingStarted : false;\nlet testingStopped = msg.testingStopped ? msg.testingStopped : false;\nlet seekStarted = msg.seekStarted ? msg.seekStarted : false;\nlet seekStopped = msg.seekStopped ? msg.seekStopped : false;\nlet lp_seekStarted = msg.lp_seekStarted ? msg.lp_seekStarted : false;\nlet lp_seekStopped = msg.lp_seekStopped ? msg.lp_seekStopped : false;\nlet lpConfirmed = msg.lpConfirmed ? msg.lpConfirmed : false;\nlet lpDisconfirmed = msg.lpDisconfirmed ? msg.lpDisconfirmed : false;\nlet hp_seekStarted = msg.hp_seekStarted ? msg.hp_seekStarted : false;\nlet hp_seekStopped = msg.hp_seekStopped ? msg.hp_seekStopped : false;\nlet hpConfirmed = msg.hpConfirmed ? msg.hpConfirmed : false;\nlet hpDisconfirmed = msg.hpDisconfirmed ? msg.hpDisconfirmed : false;\nlet visibleLeak = msg.visible_leak ? msg.visible_leak : false;\n\nlet mA_val = msg.payload;\n\nif (msg.payload === \"clear context\") {\n    for (let i = 0; i < 8; i++) {\n        flow.set('flow_calc' + i, undefined);\n    }\n    node.status(\"cleared\");\n    return msg;\n} else if (clear_results) {\n    flow.set('flow_calc' + channelIndex, undefined);\n    node.status(\"clear results\");\n    return msg;\n} else if (testingStarted) {\n    flow.set('flow_calc' + channelIndex, undefined);\n    return msg;\n}\n\nmsg = {};\nlet timestamp = Date.now();\n\n// FLOW GET\nlet tf_weights = flow.get('tf_weights_ch' + channelIndex);\nlet channelsTesting = flow.get('channelsTesting') || {\n    1: false,\n    2: false,\n    3: false,\n    4: false,\n    5: false,\n    6: false,\n    7: false,\n    8: false\n}\nlet flow_calc = flow.get('flow_calc' + channelIndex) || {\n    testing: false,\n    seeking: false,\n    lp_seeking: false,\n    hp_seeking: false,\n    amount: 50,\n    planInfo: {\n        apiNo: \"\",\n        block: \"\",\n        channel: NaN,\n        comments: \"\",\n        critical: \"\",\n        critID: \"\",\n        critName: \"\",\n        decayType: NaN,\n        drillingContractor: \"\",\n        enghigh: 20000,\n        englow: 0,\n        expirationDate: \"\",\n        lp_duration: NaN,\n        lp_maxTotalDecay: NaN,\n        lp_minPressure: NaN,\n        lp_maxPressure: NaN,\n        lp_testPressure: NaN,\n        lp_trend: false,\n        hp_duration: NaN,\n        hp_maxTotalDecay: NaN,\n        hp_minPressure: NaN,\n        hp_maxPressure: NaN,\n        hp_testPressure: NaN,\n        hp_trend: false,\n        ocsgNo: \"\",\n        operator: \"\",\n        pipeSize: \"\",\n        planID: \"\",\n        planName: \"\",\n        projectID: \"\",\n        projectName: \"\",\n        reportComments: \"\",\n        rawhigh: 20,\n        rawlow: 4,\n        rigName: \"\",\n        rwpCFR: NaN,\n        serialNumber: \"\",\n        single: \"\",\n        stack: \"\",\n        tare: 0,\n        transducerID: \"\",\n        transducerName: \"\",\n        wellName: \"\"\n    },\n    allData: {\n        Channel: channelIndex + 1,\n        CommConnected: true,\n        PlanID: \"\",\n        PTConnected: true,\n        StartPressure: NaN,\n        StartTime: NaN,\n        ElapsedTime: NaN,\n        SeekGauge: NaN,\n        timestamp: [],\n        AvgPressure: [],\n        RoC: [],\n        LPSeekStarted: false,\n        HPSeekStarted: false,\n        SeekStartTime: NaN,\n        SeekElapsedTime: NaN,\n        DeltaP: NaN,\n        TF: NaN,\n        TFActualGauge: NaN, // 30 second indicator average gauge\n        TFGauge: NaN, // 3 minute indicator average gauge\n        lpResults: {\n            lpResult: \"\",\n            lpUnconfirmedPassResult: \"\"\n        },\n        LPSeekFinished: \"\",\n        hpResults: {\n            hpResult: \"\",\n            hpUnconfirmedPassResult: \"\"\n        },\n        HPSeekFinished: \"\",\n        VisibleLeak: false,\n        ChannelsTesting: {1: false, 2: false, 3: false, 4: false, 5: false, 6: false, 7: false, 8: false},\n        CurrentPressure: NaN,\n        CurrentRoC: NaN,\n        CurrentTimeStamp: NaN,\n    },\n    lp_seekCount: 0,\n    hp_seekCount: 0,\n    resultsHeader: {\n        pr_id: null,\n        plan_id: null,\n        pl_stat: null,\n        td_ch: null,\n        serialnumber: null,\n        test: null,\n        result: null,\n        type: null,\n        crit_yn: null,\n        well: null,\n        cntrct: null,\n        op: null,\n        ocsg: null,\n        blk: null,\n        api: null,\n        stack: null,\n        trans_ser: null,\n        trans_exp: null,\n        start: null,\n        stop: null,\n        lptest: null,\n        lpmax_wrn: null,\n        lpmin_wrn: null,\n        lpmin_drtn: null,\n        lpdeltap_drtn_per: null,\n        lpdeltap_drtn_psi: null,\n        lptrend: null,\n        hptest: null,\n        hpmax_wrn: null,\n        hpmin_wrn: null,\n        hpmin_drtn: null,\n        hpdeltap_drtn_per: null,\n        hpdeltap_drtn_psi: null,\n        hptrend: null,\n        lprvldtn_start_t: null,\n        lprvldtn_stop_t: null,\n        lprvldtn_start_p: null,\n        lprvldtn_stop_p: null,\n        lprdeltap_drtn: null,\n        lprend_roc: null,\n        lprseek_start_t: null,\n        lprseek_stop_t: null,\n        lpresult: null,\n        lprfinal_trend: null,\n        hprvldtn_start_t: null,\n        hprvldtn_stop_t: null,\n        hprvldtn_start_p: null,\n        hprvldtn_stop_p: null,\n        hprdeltap_drtn: null,\n        hprend_roc: null,\n        hprseek_start_t: null,\n        hprseek_stop_t: null,\n        hprfinal_trend: null,\n        hpresult: null,\n        tpt_start: null,\n        tpt_stop: null\n    }, \n    resultsData: {\n        pr_id: [],\n        td_ch: [],\n        timestamp: [],\n        plan_name: [],\n        pressure: [],\n        raw_psi: [],\n        roc: [],\n        trend: [],\n        delta_p: [],\n        seeking_lp: [],\n        seeking_hp: [],\n        plan_id: [],\n        serialnumber: [],\n    },\n    psi_mAvg: [],\n    pAvg_count: 0,\n    startPressure: NaN,\n    startTime: NaN,\n    seekStartTime: NaN,\n    testAndSeekCount: 0,\n    tf_Calc_Array: [],\n    tfCount: 0,\n}\nlet channel_0_Testing = channelsTesting[1];\nlet channel_1_Testing = channelsTesting[2];\nlet channel_2_Testing = channelsTesting[3];\nlet channel_3_Testing = channelsTesting[4];\nlet channel_4_Testing = channelsTesting[5];\nlet channel_5_Testing = channelsTesting[6];\nlet channel_6_Testing = channelsTesting[7];\nlet channel_7_Testing = channelsTesting[8];\nlet testing = flow_calc.testing;\nlet seeking = flow_calc.seeking;\nlet lp_seeking = lp_seekStarted || flow_calc.lp_seeking;\nlet hp_seeking = hp_seekStarted || flow_calc.hp_seeking;\nlet amount = flow_calc.amount;\nlet planInfo = flow_calc.planInfo;\nlet prevAllData = flow_calc.allData;\nlet lp_seekCount = flow_calc.lp_seekCount;\nlet hp_seekCount = flow_calc.hp_seekCount;\nlet resultsHeader = flow_calc.resultsHeader;\nlet resultsData = flow_calc.resultsData;\nlet psi_mAvg = flow_calc.psi_mAvg;\nlet pAvg_count = flow_calc.pAvg_count;\nlet startPressure = flow_calc.startPressure;\nlet startTime = flow_calc.startTime;\nlet seekStartTime = flow_calc.seekStartTime;\nlet testAndSeekCount = flow_calc.testAndSeekCount;\nlet tf_Calc_Array = flow_calc.tf_Calc_Array;\nlet tfCount = flow_calc.tfCount;\n\nlet roc_data = [];\nlet roc_times = [];\nlet seekGauge = prevAllData.SeekGauge;\nlet sg_data = [];\nlet deltaPvalinitial = 0; \nlet deltaP_data = [];\nlet tf_pAvg_data = [];\nlet tf_roc_data = [];\nlet tf_roc_ts = [];\nlet tf_data = [];\n\n/* ########## mA Conversion ########## */\nlet conversion_ratio = (planInfo.enghigh - planInfo.englow) / (planInfo.rawhigh - planInfo.rawlow);\nlet rawPressure = ((mA_val - planInfo.rawlow) * conversion_ratio) + planInfo.tare;\n\n/* ########## AVG PSI CALC ########## */\n\n// get context data stored on node for the channel's psi_mAvg\npsi_mAvg = [rawPressure, ...psi_mAvg].slice(0, amount);\nlet psi_mAvg_total = 0;\nfor (let i = 0; i < psi_mAvg.length; i++) {\n    psi_mAvg_total += psi_mAvg[i];\n}\nlet pAvg = (psi_mAvg_total / psi_mAvg.length);\nprevAllData.AvgPressure.push(pAvg);\nprevAllData.timestamp.push(timestamp);\n\nif (lp_seeking) {\n    let minWarn = pAvg <= planInfo.lp_minPressure + 1;\n    let maxWarn = pAvg >= planInfo.lp_maxPressure - 1;\n    if (minWarn || maxWarn) {\n        lp_seeking = false;\n        seeking = false;\n        lp_seekStarted = false;\n        lp_seekStopped = true;\n        flow.set('seekState' + channelIndex, seeking);\n        flow.set('lp_seekState' + channelIndex, lp_seeking);\n    }\n}\n\nif (hp_seeking) {\n    let minWarn = pAvg <= planInfo.hp_minPressure + 1;\n    let maxWarn = pAvg >= planInfo.hp_maxPressure - 1;\n    if (minWarn || maxWarn) {\n        // hp_seeking = false;\n        // seeking = false;\n        // hp_seekStarted = false;\n        // hp_seekStopped = true;\n        // flow.set('seekState' + channelIndex, seeking);\n        // flow.set('hp_seekState' + channelIndex, hp_seeking);\n    }\n}\n\n// Keep track of how many pAvg have been recorded for testing purposes\npAvg_count = pAvg_count ? pAvg_count : 0;\nif (testing && seeking) {\n    pAvg_count = pAvg_count + 1;\n}\n\n/* ########## AVG ROC CALC ########## */\nfor (let i = 1; i <= amount; i++) {\n    roc_data.push(prevAllData.AvgPressure[prevAllData.AvgPressure.length - i]);\n    roc_times.push(prevAllData.timestamp[prevAllData.timestamp.length - i]);\n}\n\nlet midex = (amount / 2);\nlet roc = NaN;\nlet roca = NaN;\nlet rocb = NaN;\nlet roc_time = NaN;\nlet roca_reduced = NaN;\nlet roca_total = NaN;\nlet rocb_reduced = NaN;\nlet rocb_total = NaN;\nlet roc_timeFactor = NaN;\nlet roc_timeToFixed = NaN;\n\nif (roc_data && roc_data.length >= amount) {\n    roc_time = ((roc_times[0] - roc_times[amount - 1])/1000);\n    roc_timeToFixed = roc_time.toFixed()\n    roca = roc_data.slice(0, midex);\n    rocb = roc_data.slice(midex, amount);\n    roca_reduced = roca.reduce((acc, cur) => acc + cur);\n    roca_total = roca_reduced / roca.length\n    rocb_reduced = rocb.reduce((acc, cur) => acc + cur);\n    rocb_total = rocb_reduced / rocb.length\n    roc_timeFactor = (60/(roc_timeToFixed/2));\n    roc = (roca_total-rocb_total)*roc_timeFactor\n}\nprevAllData.RoC.push(roc);\n\n/* ########## STARTING VALUES ########## */\n\nif (!startTime && testing) {\n    startTime = timestamp;\n    startPressure = pAvg;\n}\nif (!seekStartTime && testing && seeking) seekStartTime = timestamp;\nif (!seeking) seekStartTime = NaN;\nif (!testing) {\n    startPressure = NaN;\n    startTime = NaN;\n    seekStartTime = NaN;\n}\n\n/* ########## SEEK GAUGE CALC ########## */\n\nlet calculatingSeekGauge = false;\nlet sg_section1 = [];\nlet sg_section2 = [];\nlet sg_section3 = [];\nif (testing && seeking === false) {\n    calculatingSeekGauge = true;\n    if (prevAllData.AvgPressure.length > 150) {\n        sg_data = prevAllData.AvgPressure.slice(prevAllData.AvgPressure.length - 150);\n    } else {\n        sg_data = prevAllData.AvgPressure.slice(0);\n    }\n    \n    // Add new current pressure to the values array\n    if (sg_data.length % 3 === 0) {\n        let subArrayLength = sg_data.length / 3;\n        let subArrayAverageValues = [];\n        for (let i = 0; i < 3; i++) {\n            let totalValue = 0;\n            for (let j = 0; j < subArrayLength; j++) {\n                totalValue = totalValue + sg_data[i * subArrayLength + j];\n            }\n            subArrayAverageValues.push(totalValue / subArrayLength);\n        }\n\n        sg_section1 = subArrayAverageValues[0];\n        sg_section2 = subArrayAverageValues[1];\n        sg_section3 = subArrayAverageValues[2];\n        if (sg_section1 - sg_section2 === 0) {\n            seekGauge = 0;\n        } else {\n            seekGauge = (sg_section2 - sg_section3) / (sg_section1 - sg_section2);\n        }\n    }\n}\n\n/* ########## DELTA P CALC ########## */\n\nlet deltaPval = NaN; \nlet deltap_data_length = NaN; \nlet vArrSz = NaN; \n\nif (testing && seeking) {\n    testAndSeekCount++;\n    let testTime = 5 // make a global criteria for each ch\n    let acquisitionRate = 5 // how many times in a second we get data\n    let secondsInAMinute = 60\n    if (lp_seeking && planInfo) {\n        testTime = planInfo.lp_duration;\n    } else if (hp_seeking && planInfo) {\n        testTime = planInfo.hp_duration;\n    }\n    vArrSz = testTime * acquisitionRate * secondsInAMinute\n\n    if (testAndSeekCount > vArrSz) {\n        deltaP_data = prevAllData.AvgPressure.slice(prevAllData.AvgPressure.length - vArrSz);\n    } else {\n        deltaP_data = prevAllData.AvgPressure.slice(prevAllData.AvgPressure.length - testAndSeekCount);\n    }\n\n    if (deltaP_data && testAndSeekCount > 1) {\n        deltaPvalinitial = deltaP_data[0];\n        deltaPval = Math.abs(pAvg - deltaPvalinitial);\n        if (testAndSeekCount < vArrSz) {\n            deltaPval = (deltaPval * vArrSz) / testAndSeekCount;\n        }\n    } else {\n        deltaPval = 0\n    }\n} else {\n    testAndSeekCount = 0;\n}\n\n/* ########## TF AVG PSI CALC ########## */\n\nlet tf_pAvg = NaN;\nif (testing && seeking) {\n    if ((lp_seeking && planInfo.lp_trend) || (hp_seeking && planInfo.hp_trend)) {\n        let tf_pAvg_amount = 100;\n        if (testAndSeekCount > tf_pAvg_amount) {\n            tf_pAvg_data = prevAllData.AvgPressure.slice(prevAllData.AvgPressure.length - tf_pAvg_amount);\n        } else {\n            tf_pAvg_data = prevAllData.AvgPressure.slice(prevAllData.AvgPressure.length - testAndSeekCount);\n        }\n        let num = tf_pAvg_data.reduce((acc, cur) => {\n            return acc + cur\n        }, 0);\n        tf_pAvg = (num / tf_pAvg_data.length);\n    }\n} else {\n    tf_pAvg_data = [];\n}\n\n\n/* ########## TF AVG ROC CALC ########## */\n\nlet tf_roc_roc = NaN;\nlet tf_roc_roca = NaN;\nlet tf_roc_rocb = NaN;\nlet tf_roc_time = NaN;\nlet tf_roc_a = NaN;\nlet tf_roc_aa = NaN;\nlet tf_roc_b = NaN;\nlet tf_roc_ba = NaN;\nlet tf_roc_t = NaN;\nlet tf_roc_timeTF = NaN;\nlet tf_roc_midex = NaN;\n\nif (testing && seeking) {\n    if (((lp_seeking && planInfo.lp_trend) || (hp_seeking && planInfo.hp_trend)) && testAndSeekCount >= 200) {\n        let tf_roc_amount = 200; // 40 second average\n        for (let i = 1; i <= tf_roc_amount; i++) {\n            tf_roc_data.push(prevAllData.AvgPressure[prevAllData.AvgPressure.length - i]);\n            tf_roc_ts.push(prevAllData.timestamp[prevAllData.timestamp.length - i]);\n        }\n        tf_roc_midex = (tf_roc_amount / 2)\n        if (tf_roc_data && tf_roc_data.length >= tf_roc_amount) {\n            tf_roc_time = ((tf_roc_ts[0] - tf_roc_ts[tf_roc_amount - 1])/1000);\n            tf_roc_timeTF = tf_roc_time.toFixed()\n            tf_roc_roca = tf_roc_data.slice(0, tf_roc_midex);\n            tf_roc_rocb = tf_roc_data.slice(tf_roc_midex, tf_roc_amount);\n            tf_roc_a = tf_roc_roca.reduce((acc, cur) => acc + cur);\n            tf_roc_aa = tf_roc_a / tf_roc_roca.length\n            tf_roc_b = tf_roc_rocb.reduce((acc, cur) => acc + cur);\n            tf_roc_ba = tf_roc_b / tf_roc_rocb.length\n            tf_roc_t = (60/(tf_roc_timeTF/2));\n            tf_roc_roc = (tf_roc_aa-tf_roc_ba)*tf_roc_t\n        }\n    } else if (testAndSeekCount === 0) {\n        tf_roc_data = [];\n        tf_roc_ts = [];\n    }\n}\n\n/* ########## TREND FACTOR CALC ########## */\n\nlet tf_Raw_Array = [];\nlet tfRawVal = NaN;\nlet tfExVal = NaN;\nlet decreasingTrend = NaN;\nlet decreasingCurrent = NaN;\nlet tfRocOffset = 0;\nlet tf_dataLength = NaN;\nlet p1 = NaN;\nlet p2 = NaN;\nlet p3 = NaN;\nlet tfVal1 = 0;\nlet tfVal2 = 0;\nlet tfVal3 = 0;\nlet tfWeightVal1 = 0;\nlet tfWeightVal2 = 0;\nlet tfWeightVal3 = 0;\n\n// need to wait for tf_pAvg and tf_roc arrays to fill\nif (testing && seeking && testAndSeekCount > 200) {\n    if (testAndSeekCount > vArrSz) {\n        tf_data = prevAllData.AvgPressure.slice(prevAllData.AvgPressure.length - vArrSz);\n    } else {\n        tf_data = prevAllData.AvgPressure.slice(prevAllData.AvgPressure.length - testAndSeekCount);\n    }\n    tf_dataLength = tf_data.length;\n    \n    if (tf_dataLength % 10 === 0) {\n        // getting array size of weight lists to compare against\n        let array_size = (tf_dataLength * 3) / 5;\n        // 1st weight calc data - First 60%, 0% - 60%\n        let tfWeight1 = tf_weights.tf_weight_1.slice(0, array_size);\n        // 2nd weight calc data - Middle 60%, 20% - 80%\n        let data2_slice_point = tf_dataLength / 5;\n        let tf_data2 = tf_data.slice(data2_slice_point, tf_dataLength - data2_slice_point);\n        let tfWeight2 = [...tf_weights.tf_weight_2];\n        let midway_point = tfWeight2.length / 2; // 450\n        let array_size_mid = array_size / 2; // 3 if 10 data points\n        tfWeight2 = tfWeight2.slice(midway_point - array_size_mid, midway_point + array_size_mid)\n        // 3rd weight calc data - Last 60%, 40% - 100%\n        let tf_data3 = tf_data.slice(tf_dataLength - array_size);\n        tf_data3.reverse();\n        for (let i = 0; i < array_size; i++) {\n            tfVal1 = tfVal1 + (tf_data[i] * tfWeight1[i]);\n            tfWeightVal1 = tfWeightVal1 + tfWeight1[i];\n            tfVal2 = tfVal2 + (tf_data2[i] * tfWeight2[i]);\n            tfWeightVal2 = tfWeightVal2 + tfWeight2[i];\n            tfVal3 = tfVal3 + (tf_data3[i] * tfWeight1[i]);\n            tfWeightVal3 = tfWeightVal3 + tfWeight1[i];\n        }\n        // calc P1, P2, P3 values\n        p1 = tfVal1 / tfWeightVal1;\n        p2 = tfVal2 / tfWeightVal2;\n        p3 = tfVal3 / tfWeightVal3;\n        // finding tfVal\n        if (p1 - p2 !== 0) {\n            tfRawVal = (p2 - p3) / (p1 - p2);\n            if (tf_dataLength < vArrSz) {\n                tfExVal = Math.pow(tfRawVal, (vArrSz / (tf_dataLength + 1)));\n            } else {\n                tfExVal = tfRawVal;\n            }\n            if (Math.abs(tf_roc_roc) < 10) {\n                tfRocOffset = ((10 - (Math.abs(tf_roc_roc) / 10))) / 10;\n            }\n            tfExVal = tfExVal - tfRocOffset;\n            // adding the tf raw value to the context array\n            let oldTfExVal = tf_Calc_Array[-1];\n            let new_tf_Ex_Vals = [];\n            let tf_Ex_Diff = tfExVal - oldTfExVal;\n            let tf_Ex_Inc = tf_Ex_Diff / (tfCount + 1);\n            // filling in the values between the calculated tf values\n            for (let i = 0; i < tfCount; i++) {\n                oldTfExVal = oldTfExVal + tf_Ex_Inc;\n                new_tf_Ex_Vals.push(oldTfExVal)\n            }\n            tf_Calc_Array = [...tf_Calc_Array, ...new_tf_Ex_Vals, tfExVal];\n            \n            let trend_count = 0;\n            let tc_above_9_value = false;\n            let current_count = 0;\n            let cc_above_9_value = false;\n            let decreasingTrendTotal = 0;\n            let decreasingCurrentTotal = 0;\n            for (let i = tf_Calc_Array.length - 1; i >= 0 || trend_count <= 750; i--) {\n                if (trend_count <= 750) {\n                    let array_val = tf_Calc_Array[i];\n                    trend_count = trend_count + 1;\n                    decreasingTrendTotal = decreasingTrendTotal + array_val;\n                    if (!tc_above_9_value && array_val >= .9) {\n                        tc_above_9_value = true;\n                    }\n                    if (current_count <= 150) {\n                        current_count = current_count + 1;\n                        decreasingCurrentTotal = decreasingTrendTotal;\n                        if (!cc_above_9_value && array_val >= .9) {\n                            cc_above_9_value = true;\n                        }\n                    }\n                }\n            }\n            decreasingTrend = decreasingTrendTotal / trend_count;\n            if (decreasingTrend < .9 && tc_above_9_value) {\n                decreasingTrend = .91\n            }\n            decreasingCurrent = decreasingCurrentTotal / current_count;\n            if (decreasingCurrent < .9 && cc_above_9_value) {\n                decreasingCurrent = .91\n            }\n        } else {\n            tfCount++;\n        }\n    } else {\n        tfCount++;\n    }\n}\n\n/* ########## SET ALL DATA ########## */\n\nlet timeStampArray = prevAllData.timestamp || [];\nlet avgPressureArray = prevAllData.AvgPressure || [];\nlet rocArray = prevAllData.RoC ||  [];\nlet lpUnconfirmedPassResult = prevAllData.lpResults.lpUnconfirmedPassResult || \"\";\nlet lpSeekFinished = prevAllData.lpResults.LPSeekFinished || false;\nlet lpResult = prevAllData.lpResults.lpResult || \"\";\nlet hpUnconfirmedPassResult = prevAllData.hpResults.hpResult || \"\";\nlet hpSeekFinished = prevAllData.hpResults.HPSeekFinished || false;\nlet hpResult = prevAllData.hpResults.hpResult || \"\";\nlet commConnected = true;\nlet planID = planInfo.planID || \"\";\nlet ptConnected = pAvg > -1000 ? true : false;\nlet elapsedTime = timestamp - startTime;\nif (!testing && timeStampArray.length > 200) timeStampArray = timeStampArray.slice(timeStampArray.length - 200);\nif (!testing && avgPressureArray.length > 200) avgPressureArray = avgPressureArray.slice(avgPressureArray.length - 200);\nif (!testing && rocArray.length > 200) rocArray = rocArray.slice(rocArray.length - 200);\nif (!tfExVal && prevAllData) {\n    tfExVal = prevAllData.TF || NaN;\n}\nlet seekElapsedTime = timestamp - seekStartTime;\nif (lp_seeking) {\n    lp_seekCount = lp_seekCount + 1;\n    if (vArrSz >= lp_seekCount) {\n        let lp_decay_target = (planInfo.lp_maxTotalDecay * planInfo.lp_testPressure) / 100;\n        if (!lp_trend && deltaPval < lp_decay_target) {\n            lpUnconfirmedPassResult = \"Pass\";\n            lpSeekFinished = true;\n            lp_seeking = false;\n            seeking = false;\n        } else if (lp_trend && tfExVal < .9 && deltaPval < lp_decay_target) {\n            lpUnconfirmedPassResult = \"Pass\";\n            lpSeekFinished = true;\n            lp_seeking = false;\n            seeking = false;\n        } else if (lp_trend && deltaPval < 12.5) {\n            lpUnconfirmedPassResult = \"Pass\";\n            lpSeekFinished = true;\n            lp_seeking = false;\n            seeking = false;\n        }\n    }\n} else lp_seekCount = 0;\nif (lpConfirmed) {\n    lpResult = \"Passed\"\n    lpUnconfirmedPassResult = \"\";\n    lpSeekFinished = false;\n} else if (lpDisconfirmed) {\n    lpResult = \"\"\n    lpUnconfirmedPassResult = \"\";\n    lpSeekFinished = false;\n}\nif (hp_seeking) {\n    hp_seekCount = hp_seekCount + 1;\n    if (vArrSz >= hp_seekCount) {\n        let hp_decay_target = (planInfo.hp_maxTotalDecay * planInfo.hp_testPressure) / 100;\n        if (!planInfo.hp_trend && deltaPval < hp_decay_target) {\n            // hpUnconfirmedPassResult = \"Pass\";\n            // hpSeekFinished = true;\n            // hp_seeking = false;\n            // seeking = false;\n            // flow.set('seekState' + channelIndex, seeking);\n            // flow.set('hp_seekState' + channelIndex, hp_seeking);\n        } else if (planInfo.hp_trend && tfExVal < .9 && deltaPval < hp_decay_target) {\n            // hpUnconfirmedPassResult = \"Pass\";\n            // hpSeekFinished = true;\n            // hp_seeking = false;\n            // seeking = false;\n            // flow.set('seekState' + channelIndex, seeking);\n            // flow.set('hp_seekState' + channelIndex, hp_seeking);\n        } else if (planInfo.hp_trend && deltaPval < 12.5) {\n            // hpUnconfirmedPassResult = \"Pass\";\n            // hpSeekFinished = true;\n            // hp_seeking = false;\n            // seeking = false;\n            // flow.set('seekState' + channelIndex, seeking);\n            // flow.set('hp_seekState' + channelIndex, hp_seeking);\n        }\n    }\n} else hp_seekCount = 0;\nif (hpConfirmed) {\n    hpResult = \"Passed\"\n    hpUnconfirmedPassResult = \"\";\n    hpSeekFinished = false;\n} else if (hpDisconfirmed) {\n    hpResult = \"\"\n    hpUnconfirmedPassResult = \"\";\n    hpSeekFinished = false;\n}\n\nlet allData = {\n    Channel: channelIndex + 1,\n    CommConnected: commConnected,\n    PlanID: planID,\n    PTConnected: ptConnected,\n    StartPressure: startPressure,\n    StartTime: startTime,\n    ElapsedTime: elapsedTime,\n    SeekGauge: seekGauge,\n    timestamp: timeStampArray,\n    AvgPressure: avgPressureArray,\n    RoC: rocArray,\n    LPSeekStarted: lp_seeking,\n    HPSeekStarted: hp_seeking,\n    SeekStartTime: seekStartTime,\n    SeekElapsedTime: seekElapsedTime,\n    DeltaP: deltaPval,\n    TF: tfExVal,\n    TFActualGauge: decreasingCurrent, // 30 second indicator average gauge\n    TFGauge: decreasingTrend, // 3 minute indicator average gauge\n    lpResults: {\n        lpResult: lpResult,\n        lpUnconfirmedPassResult: lpUnconfirmedPassResult\n    },\n    LPSeekFinished: lpSeekFinished,\n    hpResults: {\n        hpResult: hpResult,\n        hpUnconfirmedPassResult: hpUnconfirmedPassResult\n    },\n    HPSeekFinished: hpSeekFinished,\n    VisibleLeak: visibleLeak,\n    ChannelsTesting: channelsTesting,\n    CurrentPressure: pAvg,\n    CurrentRoC: roc,\n    CurrentTimeStamp: timestamp,\n}\n\nlet result = resultsHeader.result;\nlet lprvldtn_start_t = resultsHeader.lprvldtn_start_t;\nlet lprvldtn_stop_t = resultsHeader.lprvldtn_stop_t;\nlet lprvldtn_start_p = resultsHeader.lprvldtn_start_p;\nlet lprvldtn_stop_p = resultsHeader.lprvldtn_stop_p;\nlet lprdeltap_drtn = resultsHeader.lprdeltap_drtn;\nlet lprend_roc = resultsHeader.lprend_roc;\nlet lprseek_start_t = resultsHeader.lprseek_start_t;\nlet lprseek_stop_t = resultsHeader.lprseek_stop_t;\nlet lpresult = resultsHeader.lpresult;\nlet lprfinal_trend = resultsHeader.lprfinal_trend;\nlet hprvldtn_start_t = resultsHeader.hprvldtn_start_t;\nlet hprvldtn_stop_t = resultsHeader.hprvldtn_stop_t;\nlet hprvldtn_start_p = resultsHeader.hprvldtn_start_p;\nlet hprvldtn_stop_p = resultsHeader.hprvldtn_stop_p;\nlet hprdeltap_drtn = resultsHeader.hprdeltap_drtn;\nlet hprend_roc = resultsHeader.hprend_roc;\nlet hprseek_start_t = resultsHeader.hprseek_start_t;\nlet hprseek_stop_t = resultsHeader.hprseek_stop_t;\nlet hprfinal_trend = resultsHeader.hprfinal_trend;\nlet hpresult = resultsHeader.hpresult;\nlet tpt_start = resultsHeader.tpt_start;\nlet tpt_stop = resultsHeader.tpt_stop;\n\nif (testing) {\n    pl_stat = 3;\n    let single = planInfo.single;\n    result = single ? hpResult : hpResult === \"Passed\" && lpResult === \"Passed\" ? \"Passed\" : \"\";\n    if (lp_seekStarted) {\n        lprseek_start_t = timestamp;\n        lprvldtn_start_p = pAvg;\n    }\n    if (lpUnconfirmedPassResult === \"Pass\") {\n        if (lprvldtn_start_t < 1) lprvldtn_start_t = timestamp - (planInfo.lp_duration * 60 * 1000);\n        if (lprvldtn_stop_t < 1) lprvldtn_stop_t = timestamp;\n        if (lprvldtn_stop_p === NaN) lprvldtn_stop_p = pAvg;\n        lprseek_stop_t = lprvldtn_stop_t + 1; // needs to be 1 second diff?\n        if (lprdeltap_drtn === NaN) lprdeltap_drtn = deltaPval;\n        if (lprend_roc === NaN) lprend_roc = roc;\n        if (lprfinal_trend === NaN) lprfinal_trend = tfExVal;\n    }\n    lpresult = lpResult;\n    if (hp_seekStarted) {\n        hprseek_start_t = timestamp;\n        hprvldtn_start_p = pAvg;\n    }\n    if (hpUnconfirmedPassResult === \"Pass\") {\n        if (hprvldtn_start_t < 1) hprvldtn_start_t = timestamp - (planInfo.hp_duration * 60 * 1000);\n        if (hprvldtn_stop_t < 1) hprvldtn_stop_t = timestamp;\n        if (hprvldtn_stop_p === NaN) hprvldtn_stop_p = pAvg;\n        hprseek_stop_t = hprvldtn_stop_t + 1;\n        if (hprdeltap_drtn === NaN) hprdeltap_drtn = deltaPval;\n        if (hprend_roc === NaN) hprend_roc = roc;\n        if (hprfinal_trend === NaN) hprfinal_trend = tfExVal;\n    }\n    hpresult = hpResult;\n    if (tpt_start < 1 && pAvg > 100) tpt_start = timestamp;\n    tpt_stop = pAvg < 100 && tpt_stop < 1 ? timestamp : pAvg > 100 ? 0 : tpt_stop;\n}\n\n/* ########## RESULTS HEADER ########## */\n\nif (testing && planInfo) {\n    // plan info portion\n    resultsHeader.pr_id = planInfo.projectID // project id\n    resultsHeader.plan_id = planInfo.planID // plan id\n    resultsHeader.td_ch = channelIndex // transducer channel\n    resultsHeader.serialnumber = planInfo.serialNumber // transducer serial number\n    resultsHeader.test = planInfo.planName // plan name\n    resultsHeader.type = planInfo.critName // criteria name\n    resultsHeader.crit_yn = planInfo.critical // critical path\n    resultsHeader.well = planInfo.wellName // well name\n    resultsHeader.cntrct = planInfo.drillingContractor // drilling contractor\n    resultsHeader.op = planInfo.operator // operator\n    resultsHeader.ocsg = planInfo.ocsgNo // ocsg number\n    resultsHeader.blk = planInfo.block // block\n    resultsHeader.api = planInfo.apiNo // api number\n    resultsHeader.stack = planInfo.stack // stack\n    resultsHeader.trans_ser = planInfo.serialNumber // transducer serial number\n    resultsHeader.trans_exp = planInfo.expirationDate // transducer expiration date\n    resultsHeader.lptest = planInfo.lp_testPressure // lp test pressure\n    resultsHeader.lpmax_wrn = planInfo.lp_maxPressure // lp max warning pressure\n    resultsHeader.lpmin_wrn = planInfo.lp_minPressure // lp min warning pressure\n    resultsHeader.lpmin_drtn = planInfo.lp_duration // lp minimum duration\n    resultsHeader.lpdeltap_drtn_per = planInfo.lp_maxTotalDecay // lp delta p duration %\n    resultsHeader.lpdeltap_drtn_psi = planInfo.lp_maxTotalDecay * planInfo.lp_testPressure / 100 // lp deltap duration psi\n    resultsHeader.lptrend = planInfo.lp_trend // lp trend enabled/disabled\n    resultsHeader.hptest = planInfo.hp_testPressure // hp test pressure\n    resultsHeader.hpmax_wrn = planInfo.hp_maxPressure // hp max warning pressure\n    resultsHeader.hpmin_wrn = planInfo.hp_minPressure // hp min warning pressure\n    resultsHeader.hpmin_drtn = planInfo.hp_duration // hp minimum duration\n    resultsHeader.hpdeltap_drtn_per = planInfo.hp_maxTotalDecay // hp deltap duration %\n    resultsHeader.hpdeltap_drtn_psi = planInfo.hp_maxTotalDecay * planInfo.hp_testPressure / 100 // hp deltap duration psi\n    resultsHeader.hptrend = planInfo.hp_trend // hp trend enabled/disabled\n\n    resultsHeader.pl_stat = 3 // Current Test Status: N/A = 0, Stopped = 1, Started = 2, In progress = 3, Passed = 4, Failed = 5, Failed Visible Leak = 6 \n    resultsHeader.result = result // test result Passed or Failed\n    resultsHeader.start = resultsHeader.start || startTime // test start time\n    resultsHeader.stop = resultsHeader.stop || testingStopped ? timestamp : NaN; // test stop time\n    resultsHeader.lprvldtn_start_t = lprvldtn_start_t // lpr validation start time\n    resultsHeader.lprvldtn_stop_t = lprvldtn_stop_t // lpr validation stop time\n    resultsHeader.lprvldtn_start_p = lprvldtn_start_p // lpr validation start psi\n    resultsHeader.lprvldtn_stop_p = lprvldtn_stop_p // lpr validation stop psi\n    resultsHeader.lprdeltap_drtn = lprdeltap_drtn // lpr deltap actual psi\n    resultsHeader.lprend_roc = lprend_roc // lpr ending roc\n    resultsHeader.lprseek_start_t = lprseek_start_t // lpr seek start time\n    resultsHeader.lprseek_stop_t = lprseek_stop_t // lpr seek stop time\n    resultsHeader.lpresult = lpresult // lpr result N/A = 0, Passed = 4, Failed = 5\n    resultsHeader.lprfinal_trend = lprfinal_trend // lpr ending trend\n    resultsHeader.hprvldtn_start_t = hprvldtn_start_t // hpr validation start time\n    resultsHeader.hprvldtn_stop_t = hprvldtn_stop_t // hpr validation stop time\n    resultsHeader.hprvldtn_start_p = hprvldtn_start_p // hpr validation start psi\n    resultsHeader.hprvldtn_stop_p = hprvldtn_stop_p // hpr validation stop psi\n    resultsHeader.hprdeltap_drtn = hprdeltap_drtn // hpr deltap actual\n    resultsHeader.hprend_roc = hprend_roc // hpr ending roc\n    resultsHeader.hprseek_start_t = hprseek_start_t // hpr seek start time\n    resultsHeader.hprseek_stop_t = hprseek_stop_t // hpr seek stop time\n    resultsHeader.hprfinal_trend = hprfinal_trend // hpr ending trend factor\n    resultsHeader.hpresult = hpresult // hpr result N/A = 0, Passed = 4, Failed = 5\n    resultsHeader.tpt_start = tpt_start // time to pump up to pressure start time\n    resultsHeader.tpt_stop = tpt_stop // time to pump up to pressure stop time\n    \n}\n\n/* ########## RESULTS DATA ########## */\n\nif (testing) {\n    resultsData.pr_id.push(planInfo.projectID);\n    resultsData.plan_id.push(planInfo.planID);\n    resultsData.plan_name.push(planInfo.planName);\n    resultsData.serialnumber.push(planInfo.serialNumber);\n    resultsData.td_ch.push(channelIndex);\n    resultsData.seeking_lp.push(lp_seeking);\n    resultsData.seeking_hp.push(hp_seeking);\n    resultsData.timestamp.push(timestamp);\n    resultsData.pressure.push(pAvg);\n    resultsData.raw_psi.push(rawPressure);\n    resultsData.roc.push(roc);\n    resultsData.trend.push(tfExVal);\n    resultsData.delta_p.push(deltaPval);   \n}\nflow.set('flow_calc' + channelIndex, {\n    testing: testing,\n    seeking: seeking,\n    lp_seeking: lp_seeking,\n    hp_seeking: hp_seeking,\n    amount: amount,\n    planInfo: planInfo,\n    allData: allData,\n    lp_seekCount: lp_seekCount,\n    hp_seekCount: hp_seekCount,\n    resultsHeader: resultsHeader,\n    resultsData: resultsData,\n    psi_mAvg: psi_mAvg,\n    pAvg_count: pAvg_count,\n    startPressure: startPressure,\n    startTime: startTime,\n    seekStartTime: seekStartTime,\n    testAndSeekCount: testAndSeekCount,\n    tf_Calc_Array: tf_Calc_Array,\n    tfCount: tfCount,\n})\nnode.status(pAvg);\n\nmsg.resultsHeader = resultsHeader;\nmsg.resultsData = resultsData;\nmsg.planInfo = planInfo;\nmsg.pAvg = pAvg;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 20,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1740,
        "wires": [
            [
                "d25609393956e240",
                "fc39eabb887f395e"
            ]
        ]
    },
    {
        "id": "3a9158adb601d14b",
        "type": "MySQLdatabase",
        "name": "dapt",
        "host": "10.2.5.103",
        "port": "3306",
        "db": "dapt",
        "tz": "",
        "charset": ""
    },
    {
        "id": "06eb262519ab1e8b",
        "type": "groov-io-device",
        "address": "localhost",
        "msgQueueFullBehavior": "DROP_OLD"
    },
    {
        "id": "3d12573e4fa63ac8",
        "type": "groov-data-store",
        "project": "c2c222134da72b0e",
        "dsName": "view-red"
    },
    {
        "id": "c2c222134da72b0e",
        "type": "groov-project",
        "address": "localhost",
        "msgQueueFullBehavior": "DROP_OLD"
    }
]