[
    {
        "id": "9a56025e8414a3d5",
        "type": "tab",
        "label": "Table demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "885b77a57ea1e3ac",
        "type": "inject",
        "z": "9a56025e8414a3d5",
        "name": "Sample",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "9f2cb0d80444b4ab"
            ]
        ]
    },
    {
        "id": "9f2cb0d80444b4ab",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Mock data generator",
        "func": "const originalCities = [\n  { city: \"New York City\", state: \"NY\" },\n  { city: \"Los Angeles\", state: \"CA\" },\n  { city: \"Chicago\", state: \"IL\" },\n  { city: \"Houston\", state: \"TX\" },\n  { city: \"Phoenix\", state: \"AZ\" },\n  { city: \"Philadelphia\", state: \"PA\" },\n  { city: \"San Antonio\", state: \"TX\" },\n  { city: \"San Diego\", state: \"CA\" },\n]\nconst store = global.get(\"tableData\", \"file\")\nconst cities = store\n  ? store.map((item) => {\n      return { city: item.city, state: item.state }\n    })\n  : originalCities\nmsg.payload = cities.map((cityObj) => {\n  return {\n    city: cityObj.city,\n    state: cityObj.state,\n    temperature: Math.round(-20 + 140 * Math.random()),\n    humidity: Math.round(100 * Math.random()),\n  }\n})\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "d7974a7d5a52bbfa",
                "7ddd4c1bce5dfe32"
            ]
        ]
    },
    {
        "id": "d7974a7d5a52bbfa",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Table manager",
        "func": "///////////////\n// Functions //\n///////////////\n\n// Find a city object in the data store\nfunction byKey(obj) {\n  return function (item) {\n    return item.city === obj.city && item.state === obj.state\n  }\n}\n\n// Row object going to table\nfunction makeObj(id, obj) {\n  const colors = [\"#B2FFFF\", \"#00FF00\", \"#FF0000\"]\n  obj.id = id\n  const idx = obj.temperature < 50 ? 0 : obj.temperature < 80 ? 1 : 2\n  obj.displayTemperature = `<font color=\"${colors[idx]}\">${obj.temperature}</font>`\n  return obj\n}\n\n// Parameterized array sort function\nfunction sorterFactory(obj) {\n  let { column, dir } = obj[0]\n  column = column === \"displayTemperature\" ? \"temperature\" : column\n  return function sorter(itemA, itemB) {\n    const a = itemA[column]\n    const b = itemB[column]\n    const factor = dir === \"asc\" ? +1 : -1\n    return a < b ? -1 * factor : a > b ? +1 * factor : 0\n  }\n}\n\n// Sort data store based on selected table sort\nfunction sortStore(store) {\n  let obj = global.get(\"tableSort\", \"file\")\n  if (!obj || (obj && !obj.sorters.length)) {\n    return\n  }\n  store.sort(sorterFactory(obj.sorters))\n  for (let i = 0; i < store.length; i++) {\n    store[i].id = i < obj.ids.length ? obj.ids[i] : i\n  }\n}\n\n////////////////\n// Processing //\n////////////////\nconst cityObjArray = Array.isArray(msg.payload) ? msg.payload : [msg.payload]\nlet store = global.get(\"tableData\", \"file\") || []\n\n// When dashboard is reloaded or when\n// flows start, display last table state\nif (msg.refresh) {\n  return { payload: store }\n}\n\nlet sendStore = false\nlet deletedRows = []\nfor (let cityObj of cityObjArray) {\n  if (cityObj.delete) {\n    const idx = store.findIndex(byKey(cityObj))\n    if (idx !== -1) {\n      deletedRows.push({ id: store[idx].id, idx })\n    }\n  } else {\n    sendStore = true\n    let obj = store.find(byKey(cityObj))\n    const id = obj ? obj.id : store.length\n    const row = makeObj(id, cityObj) // This is the row that is sent to table\n    if (obj) {\n      Object.assign(obj, row) // Update store (obj is an item of mutable array)\n    } else {\n      store.push(row) // Append to store\n    }\n  }\n}\nif (deletedRows.length) {\n  // Tabulator does not have a single commmand to delete multiple rows at a time\n  deletedRows.forEach((obj) => {\n    msg.payload = {\n      command: \"deleteRow\",\n      arguments: [obj.id],\n    }\n    node.send(msg)\n    store.splice(obj.idx, 1)\n  })\n}\nif (sendStore) {\n  sortStore(store)\n  msg.payload = {\n    command: \"updateOrAddData\",\n    arguments: [store],\n  }\n  node.send(msg)\n}\nglobal.set(\"tableData\", store, \"file\")\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "clone",
                "module": "clone"
            }
        ],
        "x": 540,
        "y": 160,
        "wires": [
            [
                "0f61c07cc7630837",
                "4048f14b0d7195b5"
            ]
        ]
    },
    {
        "id": "681c3a0bf4be8f33",
        "type": "inject",
        "z": "9a56025e8414a3d5",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "change",
        "payloadType": "str",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "929c2e6d31291d23"
            ]
        ]
    },
    {
        "id": "929c2e6d31291d23",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Init table",
        "func": "if ([\"connect\", \"change\"].includes(msg.payload)) {\n  const fields = [\"city\", \"state\", \"displayTemperature\", \"humidity\"]\n  const tempSorter =\n    \"function (a, b, aRow, bRow, column, dir, sorterParams) { const aNum = aRow.getData().temperature; const bNum = bRow.getData().temperature;return aNum-bNum}\"\n  const dataSorted =\n    \"function (sorters, rows) { const ret = sorters.map((item) => { return { column: item.field, dir: item.dir }});const ids = rows.map((item)=>item.getData().id);this.send({payload:{sorters:ret,ids}});}\"\n  msg = {}\n  msg.refresh = true\n  msg.payload = []\n  msg.ui_control = {\n    tabulator: {\n      initialSort: (global.get(\"tableSort\", \"file\") || {}).sorters || [],\n      dataSorted,\n      columns: [\n        {\n          field: \"id\",\n          title: \"ID\",\n          align: \"center\",\n          sorter: \"number\",\n        },\n        {\n          field: \"city\",\n          title: \"City\",\n          align: \"center\",\n          sorter: \"string\",\n        },\n        {\n          field: \"state\",\n          title: \"State\",\n          align: \"center\",\n          sorter: \"string\",\n        },\n        {\n          field: \"displayTemperature\",\n          title: \"Temperature [\\u00b0F]\",\n          align: \"center\",\n          sorter: tempSorter,\n          formatter: \"html\",\n        },\n        {\n          field: \"humidity\",\n          title: \"Humidity [%]\",\n          align: \"center\",\n          sorter: \"number\",\n        },\n      ],\n    },\n  }\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 280,
        "wires": [
            [
                "4048f14b0d7195b5",
                "0ec87ff34a660692",
                "d7974a7d5a52bbfa"
            ]
        ]
    },
    {
        "id": "9abb64c652472d61",
        "type": "change",
        "z": "9a56025e8414a3d5",
        "name": "Save sort",
        "rules": [
            {
                "t": "set",
                "p": "#:(file)::tableSort",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3c7c3eadaffd6355",
        "type": "debug",
        "z": "9a56025e8414a3d5",
        "name": "Table output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "0ec87ff34a660692",
        "type": "debug",
        "z": "9a56025e8414a3d5",
        "name": "Table init",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 320,
        "wires": []
    },
    {
        "id": "0f61c07cc7630837",
        "type": "debug",
        "z": "9a56025e8414a3d5",
        "name": "Table manager",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 120,
        "wires": []
    },
    {
        "id": "fcf8b936f83d85a5",
        "type": "ui_ui_control",
        "z": "9a56025e8414a3d5",
        "name": "Refresh",
        "events": "all",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "929c2e6d31291d23"
            ]
        ]
    },
    {
        "id": "4462413a63e4b79f",
        "type": "switch",
        "z": "9a56025e8414a3d5",
        "name": "Non-empty sorter?",
        "property": "payload.sorters.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 180,
        "wires": [
            [
                "9abb64c652472d61"
            ]
        ],
        "outputLabels": [
            "Yes"
        ]
    },
    {
        "id": "8ac7c8d417c703dd",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Process",
        "func": "const tokens = msg.payload.split(\",\").map((item) => item.trim())\nmsg.payload = { city: tokens[0], state: tokens[1], delete: true }\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "d7974a7d5a52bbfa"
            ]
        ]
    },
    {
        "id": "8e6c70000f600c13",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Process",
        "func": "const tokens = msg.payload.split(\",\").map((item) => item.trim())\nmsg.payload = {\n  city: tokens[0],\n  state: tokens[1],\n  temperature: Math.round(-20 + 140 * Math.random()),\n  humidity: Math.round(100 * Math.random()),\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "d7974a7d5a52bbfa"
            ]
        ]
    },
    {
        "id": "a6d043a9b6a363b0",
        "type": "ui_text",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Table #2 header",
        "label": "Table 2",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 320,
        "wires": []
    },
    {
        "id": "31bc4bfda3c76ad9",
        "type": "ui_text",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Table #1 header",
        "label": "Table 1",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 280,
        "wires": []
    },
    {
        "id": "a02a8d1ae54e84f1",
        "type": "ui_button",
        "z": "9a56025e8414a3d5",
        "name": "Sample",
        "group": "241a7fce59ba6ffb",
        "order": 8,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Sample",
        "tooltip": "Generate new data",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "9f2cb0d80444b4ab"
            ]
        ]
    },
    {
        "id": "b106ce5bec21c7bb",
        "type": "promptinput",
        "z": "9a56025e8414a3d5",
        "name": "City to delete",
        "datatype": "str",
        "prompt": "What city to delete?",
        "property": "payload",
        "propertyType": "msg",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "8ac7c8d417c703dd"
            ]
        ]
    },
    {
        "id": "8d4de88d88908211",
        "type": "promptinput",
        "z": "9a56025e8414a3d5",
        "name": "City to add",
        "datatype": "str",
        "prompt": "City to add?",
        "property": "payload",
        "propertyType": "msg",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "8e6c70000f600c13"
            ]
        ]
    },
    {
        "id": "4048f14b0d7195b5",
        "type": "ui_table",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "name": "Table #2",
        "order": 5,
        "width": 16,
        "height": 3,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "3c7c3eadaffd6355",
                "4462413a63e4b79f"
            ]
        ]
    },
    {
        "id": "7ddd4c1bce5dfe32",
        "type": "ui_table",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "name": "Table #1",
        "order": 2,
        "width": 16,
        "height": 3,
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "city",
                "title": "City",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "state",
                "title": "State",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "temperature",
                "title": "Temperature [*F]",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "humidity",
                "title": "Humidity [%]",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 720,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3a8f4976ca221093",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 3,
        "width": 16,
        "height": 1
    },
    {
        "id": "e98db34282e0c536",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 6,
        "width": 16,
        "height": 1
    },
    {
        "id": "a523f545ff4acaad",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "42f8fed5bc823a7b",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "241a7fce59ba6ffb",
        "type": "ui_group",
        "name": "Table demo",
        "tab": "e7f9786e501c07b5",
        "order": 3,
        "disp": false,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7f9786e501c07b5",
        "type": "ui_tab",
        "name": "Tech Exchange (table)",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    }
]