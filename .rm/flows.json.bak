[
    {
        "id": "f73e1552a28ba393",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b85317fd.d210f8",
        "type": "tab",
        "label": "Big Long Pipe- Magnum SWD",
        "disabled": true,
        "info": ""
    },
    {
        "id": "b10ce2d2.81d18",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": ""
    },
    {
        "id": "8c6df8cfab7f5ae0",
        "type": "tab",
        "label": "Flow 5",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1946f35c2b6b141e",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43a1a9dc54dbd2b5",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "652f4e57.e3d538",
        "type": "tab",
        "label": "Modbus Flex Suite",
        "disabled": false,
        "info": ""
    },
    {
        "id": "773d005b.cd22d8",
        "type": "tab",
        "label": "Flex Server as Slave",
        "disabled": false,
        "info": ""
    },
    {
        "id": "42ed18ca.652838",
        "type": "tab",
        "label": "MB-Read-Write-Servers",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c88a71c9.688818",
        "type": "tab",
        "label": "Modbus Simple Servers",
        "disabled": false,
        "info": "simple flows to show what you \ncan do with the package\n\nthink about organization of reads and \nwrites and try to simplify these flows"
    },
    {
        "id": "5b26a23d.a8a06c",
        "type": "tab",
        "label": "Modbus Server Reading",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7d09e02b.55be3",
        "type": "tab",
        "label": "Modbus Server Writing",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f819cc75.23b27",
        "type": "tab",
        "label": "Modbus Flex Server Reading",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3f96c5b3.72cd02",
        "type": "tab",
        "label": "Modbus Flex Server Writing",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f0cfd0c1.8a4f48",
        "type": "tab",
        "label": "Modbus Sequencer",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6fa9b5ff.4dc4dc",
        "type": "subflow",
        "name": "R_TRIG",
        "info": "Detecta borda de subida.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "ed7124e5.9438f8"
                    },
                    {
                        "id": "862fae71.c4977"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 40,
                "wires": [
                    {
                        "id": "53fbb67b.1a5918",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "74b12084.0a8358",
        "type": "subflow",
        "name": "Iterate",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 219,
                "wires": [
                    {
                        "id": "626a4668.5aa3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 454,
                "y": 174,
                "wires": [
                    {
                        "id": "626a4668.5aa3",
                        "port": 0
                    }
                ]
            },
            {
                "x": 455,
                "y": 259,
                "wires": [
                    {
                        "id": "626a4668.5aa3",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1b40ef83a0652010",
        "type": "subflow",
        "name": "Oauth2 Refresh",
        "info": "",
        "category": "Google API",
        "in": [
            {
                "x": 240,
                "y": 80,
                "wires": [
                    {
                        "id": "ae3bb5af57217834"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 80,
                "wires": [
                    {
                        "id": "89eff7bbb77b98c4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Client_id",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Secret",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            }
        ],
        "meta": {},
        "color": "#C0DEED",
        "icon": "font-awesome/fa-lock"
    },
    {
        "id": "c516bb43d26b1e4d",
        "type": "subflow",
        "name": "Google Oauth2",
        "info": "",
        "category": "Google API",
        "in": [
            {
                "x": 480,
                "y": 320,
                "wires": [
                    {
                        "id": "0e032ab54e41c7f9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 80,
                "wires": [
                    {
                        "id": "4bbcc28955c3b685",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 320,
                "wires": [
                    {
                        "id": "0e032ab54e41c7f9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Client_id",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Secret",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Scope",
                "type": "str",
                "value": "calendar.events",
                "ui": {
                    "icon": "font-awesome/fa-angle-double-right",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Redirect",
                "type": "str",
                "value": "http://127.0.0.1:1880/Google/oauth2",
                "ui": {
                    "icon": "font-awesome/fa-globe",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Dashboard",
                "type": "str",
                "value": "http://127.0.0.1:1880/ui",
                "ui": {
                    "icon": "font-awesome/fa-globe",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "google_oauth2",
            "version": "1.0.0",
            "author": "farmer.eds.shed@gmail.com",
            "desc": "Authentication Node for Google API",
            "keywords": "google api, google oauth2",
            "license": "GPL-3.0"
        },
        "color": "#C0DEED",
        "icon": "font-awesome/fa-lock"
    },
    {
        "id": "9b4597e814fa6b80",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "Setup Variables - initial config / site config",
        "style": {
            "stroke": "#3f3f3f",
            "label": true,
            "color": "#92d04f",
            "label-position": "sw",
            "fill": "#b797cf"
        },
        "nodes": [
            "8ae0a126.b0158",
            "791c3eb3.43a59",
            "5f82febe.8b3a6",
            "521d8d6b.7a69f4",
            "df65f46b.2339c8"
        ],
        "x": 94,
        "y": 19
    },
    {
        "id": "d64a04f5415c9100",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "twilio req and res with sms controls",
        "style": {
            "label": true,
            "fill": "#7fb7df",
            "fill-opacity": "0.62",
            "label-position": "sw"
        },
        "nodes": [
            "eb21619b.8dc98",
            "481728ad.855f28",
            "aaa2a383.f473e",
            "e05d9fa5.d34af",
            "5b6d958.65b156c",
            "bda2a9b5.1984f8",
            "f550fd1d.dc116",
            "a1faa439.d863c8",
            "90991055.062b5"
        ],
        "x": 154,
        "y": 4019
    },
    {
        "id": "3256f3d20f743958",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "WIP- grafana charts ",
        "style": {
            "fill": "#7f8faf",
            "label": true,
            "label-position": "sw",
            "color": "#92d04f"
        },
        "nodes": [
            "60e4a5ba.57abdc",
            "34bb7d02.a950b2",
            "71ba5523.f1fecc",
            "c443b502.c13bb8",
            "80c7946a.fb9568",
            "432d2210.0f14dc",
            "f36c5c61.19ab6",
            "7fb95ba0.714274",
            "80ae3e19.7650e",
            "a38a94b9.979288",
            "a23789a7.17e4b8"
        ],
        "x": 234,
        "y": 4319
    },
    {
        "id": "eba090c28ae5aca2",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "alarms and comms to db",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "5e2dafa7.4cf2a",
            "836e0e10.f5a5e",
            "a10155e0.393488",
            "2286ac5dce57aae6"
        ],
        "x": 1614,
        "y": 99
    },
    {
        "id": "06984437f42dc90f",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "loop cached points in MB getter",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "ac09b416.996498",
            "f9483d84.1557b",
            "4271d079.65ae8",
            "10a91d231dbb6c45",
            "0cf18ca28e0e8d06"
        ],
        "x": 619,
        "y": 317.4
    },
    {
        "id": "dee095830ed30cb2",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "send callouts to twilio",
        "style": {
            "fill": "#addb7b",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "bc34f20d.485b8",
            "b8f94385.fd468",
            "e6d8eecf.3b127",
            "5eb12a7.27ed2d4",
            "26a0550e.10c0ba",
            "4929dc09d4ce3353",
            "63fe41cfa5a1d5e0",
            "a9934d66d003dfe9"
        ],
        "x": 1614,
        "y": 219
    },
    {
        "id": "c3bea051f32498d5",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "modbus reg parsed to alarms / status ",
        "style": {
            "fill": "#bfdbef",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "5dda8c17.63bd44",
            "60da4970.5f4558",
            "6c95aea3.be54d",
            "520152bd.4b653c",
            "354611c93850b5f3",
            "04d627f9fe12e209",
            "ac2d6aea2348fb53",
            "1431912494666899"
        ],
        "x": 659,
        "y": 424.59999999999997
    },
    {
        "id": "c922fdd64185d453",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "comms failure alarm and log",
        "style": {
            "fill": "#ffdf7f",
            "label": true,
            "color": "#3f3f3f"
        },
        "nodes": [
            "2707fb49.587a84",
            "52b4cee1.5db81",
            "b60417d1.1799c8",
            "3c5f80fa372c5c08",
            "227b14c0436fdaf8",
            "18ceb04c36ad1b77"
        ],
        "x": 584,
        "y": 79
    },
    {
        "id": "d3e67b58f47aee3d",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "clear comms alarms",
        "style": {
            "label": true,
            "fill": "#b797cf",
            "fill-opacity": "0.6",
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "92b11aed.346308",
            "dce4ed75.4a233",
            "5f496222.da1bdc",
            "76e231eb.291cc",
            "982d94ce.4eb368",
            "2f9bcedc.dd8862",
            "8c003262.b7ef2",
            "1986c9ca.224c16"
        ],
        "x": 14,
        "y": 1039
    },
    {
        "id": "6da7c391d0d66ed5",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "read register list and cache ",
        "style": {
            "fill": "#c8e7a7",
            "label": true,
            "color": "#3f3f3f"
        },
        "nodes": [
            "d9e5d3fc.c0bbe",
            "68303bc2.c6e234",
            "56ff9dce.fd5a64",
            "0ba2f66d71b0418f"
        ],
        "x": 694,
        "y": 218.2
    },
    {
        "id": "36122bf6498d685a",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "get modbus status",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "label-position": "sw",
            "color": "#3f3f3f"
        },
        "nodes": [
            "c5a71b5c.eb4368",
            "dc5acda3.605a2"
        ],
        "x": 114,
        "y": 761.8571428571428
    },
    {
        "id": "4f66432309b7e893",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "Clear flow variables",
        "style": {
            "fill": "#7fb7df",
            "fill-opacity": "0.55",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "81b19a94.4fb538",
            "dbbf7780.d23f98"
        ],
        "x": 54,
        "y": 653.2857142857142
    },
    {
        "id": "86ea6e018e953b27",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "mqtt keepalive ",
        "style": {
            "fill": "#7fb7df",
            "label": true
        },
        "nodes": [
            "a32c404b.b1508",
            "59c42fc3.08a1a",
            "56938ebd5a583666"
        ],
        "x": 1614,
        "y": 419
    },
    {
        "id": "59688b15fc5c84db",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "Check CSV 3 mins, Poll mb- 3 sec",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "label-position": "sw",
            "color": "#3f3f3f"
        },
        "nodes": [
            "50c225a4.05f7dc",
            "d81dfd16.3de66",
            "fcd770a9a9243640",
            "0f63fcd0baa79913",
            "776ab548.8115fc",
            "54450e6bb280ffca"
        ],
        "x": 214,
        "y": 359
    },
    {
        "id": "b3265ac240b7ade3",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "comms fail manual set status",
        "style": {
            "fill": "#7f8faf",
            "fill-opacity": "0.6",
            "label": true,
            "label-position": "sw",
            "color": "#ff7f7f"
        },
        "nodes": [
            "4776cf31.05c64",
            "24d73f62.39bcb",
            "c8eef8e17b6714ab"
        ],
        "x": 184,
        "y": 207.57142857142858
    },
    {
        "id": "3fdfab0545a44031",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "mqtt value publish ",
        "style": {
            "fill": "#c8e7a7",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "958a2454.e49d18",
            "ad2f96c.91fcf68",
            "aa40f44a04082d45",
            "48da3f59755776b1"
        ],
        "x": 1614,
        "y": 539
    },
    {
        "id": "d169b886dc33fcc2",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "parse status vlaues",
        "style": {
            "label": true,
            "fill": "#7f8faf",
            "label-position": "sw"
        },
        "nodes": [
            "d2f53522.66e3d8",
            "952f6a6c.5ff658",
            "eb6fa914.5b89e8",
            "5e6ae2e91d50a9a6",
            "e6313b41ff123d71",
            "e94e349e74d3e364",
            "014c8788401cd6da",
            "ad93da2a63649bb8",
            "0324396004ed7c52",
            "1b9114fdf5aca82f",
            "e7efcb4b98f398a3"
        ],
        "x": 54,
        "y": 1999
    },
    {
        "id": "0f078245a19912d2",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "setpoints parsed to dash",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "8f7c2e96.89d55",
            "9699d993.93d4a8",
            "5ca8dc3e.e077f4",
            "a8b5274e1abca354",
            "6652d2e7403e0e35",
            "9ae5b08c6e24a33f",
            "cadf5bd0a132c6ef",
            "9b68bbb1d9944cad",
            "27b03b8e6d3332c0"
        ],
        "x": 64,
        "y": 1399
    },
    {
        "id": "2143acf0eb8484ae",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "setpoints dash widgets labels",
        "style": {
            "label": true,
            "fill": "#7fb7df",
            "label-position": "sw"
        },
        "nodes": [
            "6e31aa5d.ff35b4",
            "ce33d25f.78702",
            "aff23c20.30361",
            "796a3e31.de573",
            "5a020519.dad6bc",
            "6dc444c.62013bc",
            "4fae6a27.905bc4",
            "89bb9d82.0972e",
            "8d731697.3f9118",
            "62b86acd.7f0ec4",
            "b2b94ebb.31d0e",
            "17add590.4185ca",
            "26ba2ecc17ab3f7e",
            "9f7311b340e47e32",
            "1ea3eadf5018ae3d",
            "5cfb7520921b9c6f",
            "72196870621ff467",
            "ff5cf5d0f53015ad"
        ],
        "x": 1754,
        "y": 1439
    },
    {
        "id": "bc3c6213dc365e4f",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "tank levels parsed ",
        "style": {
            "fill": "#ffdf7f",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "276e73f1.a0cefc",
            "8ba0c31e.1b66",
            "46b12033.cf537",
            "284211e2761593a3",
            "97e9348cb7a044a6"
        ],
        "x": 104,
        "y": 1779
    },
    {
        "id": "828ef96339a42740",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "tank level chart / ind",
        "style": {
            "fill": "#ffdf7f",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "222382fc.6250de",
            "8920b965.8fb5e8",
            "35de6870.6953a8",
            "3ca4711.bd0ea8e",
            "e45d527.fc713b",
            "a7ec70576cd9087c",
            "f81c051a304f83f2",
            "95ed90bb63da0230"
        ],
        "x": 1844,
        "y": 1719
    },
    {
        "id": "ed5a2f0ec76b67b3",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "status vals dash",
        "style": {
            "fill": "#7f8faf",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "4ebf7234.2a9c3c",
            "79cfefcb.91fde",
            "b74ea700.c4f408",
            "728e9578.ace71c",
            "8d26b892.40a968",
            "ca29d06b.38db1",
            "2a2508db.2a6218",
            "723d2724.f0e208",
            "af466545.e49cf8",
            "9a1b3476.978e38",
            "6c63a803.d0a508",
            "68c8f1ec.c26ab",
            "91732b590420d1c8",
            "939ff2b17647b3f0",
            "b77872fcfea09269",
            "9346cf2093322d69",
            "2687fb62cffb8430",
            "5740d03b912c09b1",
            "729480155445fe76",
            "6b363c9ba5cd6ace"
        ],
        "x": 1853.25,
        "y": 1980.5
    },
    {
        "id": "fdfde33ff181cd2b",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "dash totals",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "2e18150.e7b05ec",
            "6678e6e7.02f818",
            "588a0678.ce1cf8",
            "1c2287f.5fece78",
            "ad87652fd99e3d96",
            "3b2989a1941f8779"
        ],
        "x": 1784,
        "y": 2399
    },
    {
        "id": "3595b63b79c9bd12",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "parse totals",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "d5f5eac4.b1e018",
            "59db9ee9.df222",
            "c077d794.6a4d78",
            "80f0ada24ba5fee6",
            "8fe8feb113295da9"
        ],
        "x": 84,
        "y": 2399
    },
    {
        "id": "df8942c9d7c6c335",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "flow vals",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "14ef8d8a.7db982",
            "206926de.e4acea",
            "6840823ee191abbd"
        ],
        "x": 74,
        "y": 2599
    },
    {
        "id": "ac905f8eacdfaa65",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "dash flow vals",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "bce38183.5f26a",
            "bb2b198cd7361905"
        ],
        "x": 1894,
        "y": 2599
    },
    {
        "id": "df76d03756526c49",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "pressures ",
        "style": {
            "label": true,
            "fill": "#addb7b",
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "ac5a58bf.d7e708",
            "2b756bf2.f148c4",
            "27fdc543.4ee55a",
            "845b1e0ae44652f1",
            "60acc09545fae7cf"
        ],
        "x": 94,
        "y": 2759
    },
    {
        "id": "6d854dd836e19c95",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "",
        "style": {
            "fill": "#addb7b",
            "label": true
        },
        "nodes": [
            "bdf16e02.61d18",
            "d37542b6.e08c8",
            "5b9066de.3eca58",
            "66aa194e.dbac48",
            "4efc3fe80f5cb76a",
            "2e754d99f5a46d83"
        ],
        "x": 1834,
        "y": 2759
    },
    {
        "id": "f353cac4e20a6b2c",
        "type": "group",
        "z": "b85317fd.d210f8",
        "style": {
            "stroke": "#44475a",
            "stroke-opacity": "1",
            "fill": "#21222c",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#f8f8f2"
        },
        "nodes": [
            "d9b0e8e3.6c1218",
            "9f4dda42.8fbbc8",
            "5c7abb22.74e744",
            "5e5b754a4ae4669c",
            "30360c7846e4eef2",
            "2836fe5f5a9433ed",
            "e9d9cfb0c96689c9",
            "0afb0b1fac47c409",
            "a40480fd923b4665",
            "96f5e4df031a1ab2",
            "9825fb911bb45260",
            "406d270152d15332",
            "6f621ac004584f2d",
            "799f5ebabe12024c",
            "4d898f6b81897e58",
            "13fe9e158dd3dcca",
            "0b5553aa4e3a78a9",
            "dce38ee1225239c7",
            "2ac74fb9f53557fa",
            "2cb57cce7129311b",
            "b3a3ccc4d4fed124",
            "881f975828e9be85",
            "36dec759085a255c",
            "38b4684888f5dc4e",
            "97e6dc9ff8221ae0"
        ],
        "x": 84,
        "y": 2959
    },
    {
        "id": "1833fc4e49ad5614",
        "type": "group",
        "z": "b85317fd.d210f8",
        "style": {
            "stroke": "#44475a",
            "stroke-opacity": "1",
            "fill": "#21222c",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#f8f8f2"
        },
        "nodes": [
            "feb9beb.fb9a44",
            "cc9e6b2b.e034a8",
            "87ee2495.dc1488",
            "9b6f4fa0.a2dbb",
            "442f7cb2.180444",
            "7e232743.48d498",
            "7d60ba8f.5c9804",
            "fd5008.7c9b8ff8",
            "b8fe5f8b.0e193",
            "8013760.fcc8488",
            "e1e69ca2.5171c",
            "e8820602.e33008",
            "f0ed21f3.22929",
            "dcdd1789.879bc8",
            "485459.f09fbba8",
            "9c249ab.a506168",
            "b3fbcd75.2facb",
            "698b6ba7.fbd924",
            "ac867cee.40e7b",
            "b09d86eb.714888",
            "8b31492e.ca48c8",
            "d3e8bfc7db9de8f3",
            "d8c15282677e6ca5",
            "ae6399ba6d06eeae",
            "27ac15768667330b",
            "9d9a28b4432101e8",
            "029db1078abcbe36",
            "ad4b269b1e8ef692",
            "8fa69d3b02a2f326",
            "dfdcf64952f06b7d",
            "ef7c6e0fd0c7d201",
            "c49866b07965f9f4",
            "72b549797c242c2c",
            "afefb387786f1a96",
            "480556b05ca8fbee",
            "78177268ee09acac",
            "05f3436c1504ed15",
            "335d1881bcf33d27",
            "f56acbe31627e5eb",
            "06560b43e3e97da8",
            "c9814c039e75fe8a",
            "c5fb837dd86e96da",
            "91ddada67f20ac80",
            "1cbd43377263f8d5",
            "3e762a80d255fe55",
            "67ac412eb2c6b3a7",
            "779231e02c319535",
            "f765e01ebedcab65",
            "e15636c924fc8be3"
        ],
        "x": 1804,
        "y": 2959
    },
    {
        "id": "3b36e4354c9ce7a2",
        "type": "group",
        "z": "b85317fd.d210f8",
        "style": {
            "stroke": "#44475a",
            "stroke-opacity": "1",
            "fill": "#21222c",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#f8f8f2"
        },
        "nodes": [
            "85f6c17f.b7c5",
            "e278a1be.a308b",
            "36610690.70db3a"
        ],
        "x": 1254,
        "y": 3819
    },
    {
        "id": "decab09fba30224a",
        "type": "group",
        "z": "b85317fd.d210f8",
        "style": {
            "stroke": "#44475a",
            "stroke-opacity": "1",
            "fill": "#21222c",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#f8f8f2"
        },
        "nodes": [
            "c0850a9.149e2f8",
            "ed417b26.fb25e8",
            "87d590cd.b1c22",
            "1898b4e5.003c0b",
            "ffaf3ec1.c4fb5",
            "64b28107.a63e8",
            "67c11bfa.521234",
            "5547fead.1383e",
            "8b41cf74.03251",
            "d44d0e14.c254c",
            "6501d850.455b28",
            "8fa1592b.6c5ac8",
            "271c6294.09d63e",
            "15a0e9c4.7dc6c6",
            "9e0a8759.ce2018",
            "55260d28.3f9f34",
            "8f6ba7d8.c9d008",
            "ea0a36a6.178c68",
            "30e50eab.d875a2",
            "5c584f0e.11dca"
        ],
        "x": 64,
        "y": 3739
    },
    {
        "id": "bc2dcb3e7b0e250a",
        "type": "group",
        "z": "b85317fd.d210f8",
        "style": {
            "stroke": "#44475a",
            "stroke-opacity": "1",
            "fill": "#21222c",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#f8f8f2"
        },
        "nodes": [
            "b8493ce2.6d67e",
            "b6e8af46.4099c",
            "166f6e32.878662",
            "77c20baf.137324",
            "c3386145.672fc",
            "7b9bbb9f.477ab4",
            "465bebfe.aa7ee4",
            "b3d5b11c.78296",
            "d550c641.e87bc8",
            "b9394fbf.beddd",
            "7682d9.3e03ed28",
            "32594716.fb5458",
            "2494ad41.681b12"
        ],
        "x": 175.25783920288086,
        "y": 4579
    },
    {
        "id": "fe3261ed3b3d4d41",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "callout loop delay ",
        "style": {
            "label": true,
            "fill": "#dbcbe7",
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "63c360c3.2e474",
            "266a2cbe.255004",
            "9e81343a.ab8438",
            "e8eef4bd.d4abd8",
            "06efecca68f9c439",
            "59fb732fa6a1afc7",
            "fcb9360490101464",
            "6dcd62b2842c79ef",
            "af890975e6ef59b8",
            "ea11f5cc314e28f6"
        ],
        "x": 754,
        "y": 719
    },
    {
        "id": "dc7b1897e1eca11f",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "voice Callout TwiMil ",
        "style": {
            "fill": "#bfdbef",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "5681c1c3.86255",
            "79c3a856.6f6ee8",
            "86c9085b.3b3318",
            "cc3af731.6782c8",
            "1b0cad1d.f92c33",
            "0735bbaa317d6c0c"
        ],
        "x": 1614,
        "y": 659
    },
    {
        "id": "aaec627d95cf77d0",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "manual alarm reset ",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "c8638a53.559358",
            "e27baa17.4a2908",
            "697e26dc2f2e446b"
        ],
        "x": 64,
        "y": 544.7142857142857
    },
    {
        "id": "6ce8ee2e1bee7658",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "send machine / site reset",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "label-position": "sw",
            "color": "#000000"
        },
        "nodes": [
            "70fcd267.8afe8c",
            "1b91cf13.126aa1",
            "75f29d8a.0d60b4",
            "a0f1a5c8.953598",
            "9f78e0f85e8ebfaf"
        ],
        "x": 594,
        "y": 611.8
    },
    {
        "id": "58eddbe133f3fd8e",
        "type": "group",
        "z": "b85317fd.d210f8",
        "name": "manual test callouts",
        "style": {
            "fill": "#0070c0",
            "fill-opacity": "0.54",
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "f7062b98.b28fd8",
            "35295e9d.977902",
            "dfb59801.564ef8",
            "be63e6ef14c3af79",
            "398fbb503690357f"
        ],
        "x": 74,
        "y": 870.4285714285713
    },
    {
        "id": "c99a08d82f68a416",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "docker-influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "2394da76.e09106",
        "type": "ui_tab",
        "name": "Tanks & Status",
        "icon": "dashboard",
        "order": 1,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "3b976e99.98f6d2",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            },
            "customTheme": {
                "baseColor": "#7b7474",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "default": "#4B7930",
                "name": "Untitled Theme 1",
                "reset": false
            },
            "darkTheme": {
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "default": "#097479",
                "edited": false,
                "reset": false
            },
            "lightTheme": {
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "default": "#0094CE",
                "edited": true,
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#808080",
                    "value": "#7b7474",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#121111",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#716060",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#7b7474",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#808080",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                }
            }
        },
        "site": {
            "allowSwipe": "false",
            "allowTempTheme": "true",
            "dateFormat": "YYYY-MM-DD",
            "hideToolbar": "false",
            "name": "Big Pipe Midstream - Magnum",
            "sizes": {
                "cx": 3,
                "cy": 3,
                "gx": 20,
                "gy": 20,
                "px": 0,
                "py": 0,
                "sx": 45,
                "sy": 48
            },
            "lockMenu": "true"
        }
    },
    {
        "id": "b77c53f.84b19b",
        "type": "ui_group",
        "name": "Alarms",
        "tab": "2394da76.e09106",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c870e4f4.c54aa8",
        "type": "ui_group",
        "name": "Status",
        "tab": "2394da76.e09106",
        "order": 1,
        "disp": true,
        "width": "11",
        "collapse": false
    },
    {
        "id": "3b932dce.ae2c12",
        "type": "ui_group",
        "name": "Tank Levels ",
        "tab": "2394da76.e09106",
        "order": 2,
        "disp": false,
        "width": "5",
        "collapse": false
    },
    {
        "id": "fa648ea3.2abee",
        "type": "ui_group",
        "name": "Chart",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "18"
    },
    {
        "id": "187e60b.cb4fa9f",
        "type": "ui_group",
        "name": "Flow Rate",
        "tab": "42b301ed.7ba54",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7b966023.ecbdb",
        "type": "ui_group",
        "name": "LACT2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "b6adeca6.d51f8",
        "type": "ui_group",
        "name": "LACT3",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "aae5fd56.bcbbb",
        "type": "ui_group",
        "name": "Trends",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "48",
        "collapse": false
    },
    {
        "id": "979f1bd5.ce3318",
        "type": "ui_group",
        "name": "Setpoints",
        "tab": "2394da76.e09106",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7e8a6750.007f08",
        "type": "ui_group",
        "name": "Flow",
        "tab": "42b301ed.7ba54",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ce4da90c.ba04d8",
        "type": "ui_group",
        "name": "HMI:",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "5c028204.e26cec",
        "type": "ui_group",
        "name": "Temp",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c38ef04d.955a6",
        "type": "ui_group",
        "name": "Humidity",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "68a4096e.1a9628",
        "type": "ui_group",
        "name": "Controls",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "90f42034.43bfc",
        "type": "ui_group",
        "name": "Level",
        "tab": "",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6c290129.867ff",
        "type": "ui_group",
        "name": "Air Exchange Cycle ",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "8637fe02.498f6",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "e93c52c7.6d21d",
        "type": "ui_group",
        "name": "Pers 77",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "3273d63.7e4942a",
        "type": "ui_group",
        "name": "HMI:",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a8517d6a.ac2db",
        "type": "ui_group",
        "name": "CP ",
        "tab": "42b301ed.7ba54",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "2f266933.275646",
        "type": "ui_group",
        "name": "PD1",
        "tab": "42b301ed.7ba54",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f40e111.602d0f",
        "type": "ui_group",
        "name": "PD2",
        "tab": "42b301ed.7ba54",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6a2b149d.bcbecc",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "cef99761.d88be8",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "6228a403.3b44cc",
        "type": "ui_group",
        "name": "PSI1",
        "tab": "42b301ed.7ba54",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4fad8b3a.4a5844",
        "type": "twilio-api",
        "name": "SCADABit Twilio Midland",
        "sid": "ACd3d1e28d6055eac9af7579cbe9b2df67",
        "from": "+14323150086"
    },
    {
        "id": "1f9a6fd3.d0635",
        "type": "ui_group",
        "name": "Group 6",
        "tab": "",
        "order": 6,
        "disp": true,
        "width": 6
    },
    {
        "id": "d35d8080.e7599",
        "type": "ui_group",
        "name": "Group 7",
        "tab": "",
        "order": 7,
        "disp": true,
        "width": 6
    },
    {
        "id": "42b301ed.7ba54",
        "type": "ui_tab",
        "name": "Pressure and Flow ",
        "icon": "dashboard",
        "order": 2,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "f972b081.38e9c",
        "type": "ui_group",
        "name": "PSI2",
        "tab": "42b301ed.7ba54",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "efc08c0f.1ea4f",
        "type": "ui_group",
        "name": "PD3",
        "tab": "42b301ed.7ba54",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d93206f4.8e76a8",
        "type": "ui_group",
        "name": "Alarms",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c884544.46deea8",
        "type": "ui_group",
        "name": "Analysis",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "1c67a074.861f4",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "ad9b95d4.4d2718",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d783cb980c3979fc",
        "type": "ui_group",
        "name": "Demo",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9ec8b304.368cc",
        "type": "ui_group",
        "name": "Home Floor Plan",
        "tab": "375ef70099cad3a9",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d634d288.20fb8",
        "type": "ui_group",
        "name": "HMI",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "89db22b6.9aa36",
        "type": "websocket-listener",
        "path": "/ws1",
        "wholemsg": "false"
    },
    {
        "id": "63620788.bda128",
        "type": "websocket-client",
        "path": "ws://localhost:1880/ws1",
        "tls": "",
        "wholemsg": "false",
        "hb": "0",
        "subprotocol": ""
    },
    {
        "id": "4a93a592.39efec",
        "type": "ui_group",
        "name": "Test Messages",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "125f6c81.60151b",
        "type": "mqtt-broker",
        "name": "MOSCA",
        "broker": "localhost",
        "port": "1883",
        "tls": "",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "b0a7fccd.a7aad",
        "type": "ui_group",
        "name": "Game Status",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "dc30a292.d77d98",
        "type": "ui_group",
        "name": "Custom Message",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "325abcce.753554",
        "type": "ui_group",
        "name": "Log",
        "tab": "",
        "order": 7,
        "disp": true,
        "width": 30,
        "collapse": false
    },
    {
        "id": "c832a8dc.9f8ee8",
        "type": "ui_group",
        "name": "Puzzles",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "9aa0302e.bc4c28",
        "type": "ui_group",
        "name": "Hints",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "747cfe9.0910c8",
        "type": "ui_group",
        "name": "Video",
        "tab": "",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "15fe206a.4a0578",
        "type": "ui_group",
        "name": "Audio",
        "tab": "",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8c2aa418.f86c48",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "15fe206a.4a0578",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "cbc47930.f7045",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "325abcce.753554",
        "order": 3,
        "width": 22,
        "height": 1
    },
    {
        "id": "9f69b1e6.70efd8",
        "type": "ui_group",
        "name": "Main",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5f33943f29685898",
        "type": "google-credentials",
        "displayName": ""
    },
    {
        "id": "d60c193dc192336a",
        "type": "ui_group",
        "name": "Google",
        "tab": "926d7dc856d17644",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "926d7dc856d17644",
        "type": "ui_tab",
        "name": "GoogleAPI",
        "icon": "fa-google",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bd4083c85fb19e43",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "dfcadbf7bf2bf679",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": 6
    },
    {
        "id": "abeab8f96bd0938d",
        "type": "ui_group",
        "name": "Group 4",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": 6
    },
    {
        "id": "375ef70099cad3a9",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fa873ff5.42afa",
        "type": "modbus-client",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Read Client",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "15502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectTimeout": 2000
    },
    {
        "id": "883d0976.8296d",
        "type": "modbus-client",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Write Client",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "15502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectTimeout": "2000"
    },
    {
        "id": "4483385.85f9ac8",
        "type": "modbus-client",
        "name": "local",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "11502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectTimeout": "2000"
    },
    {
        "id": "a24bea7c.848da",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "aefcd568.ff81c",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "11502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "a9050e37.a6f618",
        "type": "modbus-client",
        "name": "Modbus Flex Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "15502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "352955bb.be6e6a",
        "type": "modbus-client",
        "name": "Modbus Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "14502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "a286a306.02b04",
        "type": "rbe",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 590,
        "y": 40,
        "wires": [
            [
                "53fbb67b.1a5918"
            ]
        ]
    },
    {
        "id": "cc4a0845.97a0d8",
        "type": "change",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "rules": [
            {
                "p": "payload",
                "pt": "msg",
                "t": "set",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "a286a306.02b04"
            ]
        ]
    },
    {
        "id": "53fbb67b.1a5918",
        "type": "switch",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ed7124e5.9438f8",
        "type": "switch",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 40,
        "wires": [
            [
                "a286a306.02b04"
            ]
        ]
    },
    {
        "id": "862fae71.c4977",
        "type": "switch",
        "z": "6fa9b5ff.4dc4dc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "cc4a0845.97a0d8"
            ]
        ]
    },
    {
        "id": "626a4668.5aa3",
        "type": "function",
        "z": "74b12084.0a8358",
        "name": "Iterate",
        "func": "//Node has 2 outputs - 1 for itteration and 1 for completion\nvar nextObj, out;\nvar itt = msg.iterationInfo;\n\n\n//If the iterating has not yet begun set up the iteration metadata in the msg\nif (typeof itt === 'undefined') {\n    //Make sure payload is an array\n    if( Object.prototype.toString.call(msg.payload) !== '[object Array]' ) {\n       msg.payload = [msg.payload];\n    }\n\n    msg.iterationInfo = itt = {};\n    itt.index = -1;\n    itt.inArray = msg.payload;\n    itt.outArray = [];\n\n//Otherwise just push the input to the output array\n} else {\n    itt.outArray.push(msg.payload)\n}\n\n//Goto next object\nitt.index ++;\n\n//If there are stil objects left to iterate goto the next one in the original array\nif (itt.index < itt.inArray.length) {\n    nextObj = msg;\n    msg.payload = itt.inArray[itt.index];\n\n//otherwise pass the out array as the payload\n} else {\n    out = msg;\n    msg.payload = itt.outArray;\n    delete msg.iterationInfo;\n}\n\nreturn [nextObj, out];",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 347,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ae3bb5af57217834",
        "type": "function",
        "z": "1b40ef83a0652010",
        "name": "Refresh Token",
        "func": "var Google_refresh = global.get('Google_refresh');\n\nmsg.payload ={\n            \"grant_type\": \"refresh_token\",\n            \"client_id\": env.get(\"Client_id\"),\n            \"client_secret\": env.get(\"Secret\"),\n            \"refresh_token\": Google_refresh\n        }\n\nmsg.headers = {};\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "be36287ea0b3eb53"
            ]
        ]
    },
    {
        "id": "be36287ea0b3eb53",
        "type": "http request",
        "z": "1b40ef83a0652010",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://oauth2.googleapis.com/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 80,
        "wires": [
            [
                "89eff7bbb77b98c4"
            ]
        ]
    },
    {
        "id": "89eff7bbb77b98c4",
        "type": "function",
        "z": "1b40ef83a0652010",
        "name": "Save OAuth Tokens",
        "func": "if (msg.payload.access_token) {\n    global.set('Google_token', msg.payload.access_token);\n    //global.set('Google_refresh', msg.payload.refresh_token);\n    Time = new Date()\n    msg.payload = \"Google Access Granted \" + Time;\n    \n} else {\n    msg.payload = \"Google Authorization error.\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cc666f64bb91c238",
        "type": "http in",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "url": "/Google/oauth2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "08ecd8469fb9fe7c"
            ]
        ]
    },
    {
        "id": "9127efc1faccdd28",
        "type": "http response",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "a446508ea873a530",
        "type": "template",
        "z": "c516bb43d26b1e4d",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <style>\n.button {\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.button2 {background-color: #008CBA;} /* Blue */\n</style>\n    </head>\n    <body>\n        <h1>Google Calendar Access Granted, click Continue</h1>\n       <a href=\"{{payload}}\" target=\"_parent\"><button class=\"button button2\">Continue</button></a>\n    </body>\n</html>",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "9127efc1faccdd28"
            ]
        ]
    },
    {
        "id": "4bbcc28955c3b685",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Save OAuth Tokens",
        "func": "if (msg.payload.access_token) {\n    global.set('Google_token', msg.payload.access_token);\n    global.set('Google_refresh', msg.payload.refresh_token);\n    let Time = new Date()\n    msg.result = \"Google Access Granted \" + Time;\n    \n} else {\n    msg.result = \"Google Authorization error.\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9318f97001dde25b",
        "type": "http request",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://oauth2.googleapis.com/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "4bbcc28955c3b685",
                "9a11e2cee582a63b"
            ]
        ]
    },
    {
        "id": "08ecd8469fb9fe7c",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Google Oauth2",
        "func": "msg.payload ={\n            \"grant_type\": \"authorization_code\",\n            \"client_id\": env.get(\"Client_id\"),\n            \"client_secret\": env.get(\"Secret\"),\n            \"code\": msg.payload.code,\n            \"redirect_uri\": env.get(\"Redirect\")\n        }\n\nmsg.headers = {};\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "9318f97001dde25b"
            ]
        ]
    },
    {
        "id": "9a11e2cee582a63b",
        "type": "switch",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "property": "payload.access_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "35a8d42d08ace432"
            ],
            [
                "cb4f3c3b1f8295b1"
            ]
        ]
    },
    {
        "id": "2efeedef766408a3",
        "type": "template",
        "z": "c516bb43d26b1e4d",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <style>\n.button {\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.button2 {background-color: #008CBA;} /* Blue */\n</style>\n    </head>\n    <body>\n        <h1>Google Authorization error</h1>\n        <a href=\"{{payload}}\" target=\"_parent\"><button class=\"button button2\">Return</button></a>\n    </body>\n</html>",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "9127efc1faccdd28"
            ]
        ]
    },
    {
        "id": "0e032ab54e41c7f9",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Generate  URL",
        "func": "msg.payload = \"https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A//www.googleapis.com/auth/\" + env.get(\"Scope\") + \"&access_type=offline&prompt=consent&include_granted_scopes=true&response_type=code&redirect_uri=\" + env.get(\"Redirect\") +\"&client_id=\" + env.get(\"Client_id\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "cb4f3c3b1f8295b1",
        "type": "change",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "2efeedef766408a3"
            ]
        ]
    },
    {
        "id": "35a8d42d08ace432",
        "type": "change",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "a446508ea873a530"
            ]
        ]
    },
    {
        "id": "bb094daaad9aab1d",
        "type": "function",
        "z": "f73e1552a28ba393",
        "name": "",
        "func": "let p = flow.get(\"pTime\")\nlet c = msg.payload\nlet diff = c - p\n\n\nflow.set (\"pTime\", msg.payload)\nmsg.payload = {\"ts\" : c , 'diff' : diff }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 200,
        "wires": [
            [
                "9716ede9087b50d3",
                "cc67acdd997edd40"
            ]
        ]
    },
    {
        "id": "9716ede9087b50d3",
        "type": "debug",
        "z": "f73e1552a28ba393",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "41ac559c07055de4",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.01",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "bb094daaad9aab1d"
            ]
        ]
    },
    {
        "id": "cc67acdd997edd40",
        "type": "influxdb out",
        "z": "f73e1552a28ba393",
        "influxdb": "c99a08d82f68a416",
        "name": "",
        "measurement": "injectLoop0.001",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "us",
        "retentionPolicyV18Flux": "",
        "org": "edge",
        "bucket": "test",
        "x": 760,
        "y": 300,
        "wires": []
    },
    {
        "id": "f369eb92.6c5558",
        "type": "ui_svg_graphics",
        "z": "f73e1552a28ba393",
        "group": "9ec8b304.368cc",
        "order": 0,
        "width": "6",
        "height": "2",
        "svgString": "<!--<svg height=\"100\" width=\"100\"></svg>-->\n\n<svg preserveAspectRatio=\"none\" x=\"0\" y=\"0\" viewBox=\"0 0 900 710\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <text id=\"my_text\" x=\"100\" y=\"50\" font-family=\"FontAwesome\" fill=\"blue\" stroke=\"black\" font-size=\"80\" text-anchor=\"middle\" alignment-baseline=\"middle\" stroke-width=\"1\">fa-thermometer-empty</text>\n</svg>",
        "clickableShapes": [
            {
                "targetId": "#camera_living",
                "action": "click",
                "payload": "#camera_living",
                "payloadType": "str",
                "topic": "#camera_living"
            },
            {
                "targetId": "#camera_balcony",
                "action": "click",
                "payload": "#camera_balcony",
                "payloadType": "str",
                "topic": "#camera_balcony"
            },
            {
                "targetId": "#camera_entry",
                "action": "click",
                "payload": "#camera_entry",
                "payloadType": "str",
                "topic": "#camera_entry"
            }
        ],
        "javascriptHandlers": [],
        "smilAnimations": [],
        "bindings": [
            {
                "selector": "#camera_living",
                "bindSource": "payload.attributeValue",
                "bindType": "attr",
                "attribute": "fill"
            },
            {
                "selector": "#camera_entry",
                "bindSource": "payload.attribueValue",
                "bindType": "attr",
                "attribute": "fill"
            },
            {
                "selector": "#camera_balcony",
                "bindSource": "payload.attributeVale",
                "bindType": "attr",
                "attribute": "fill"
            }
        ],
        "showCoordinates": true,
        "autoFormatAfterEdit": false,
        "showBrowserErrors": false,
        "showBrowserEvents": false,
        "enableJsDebugging": false,
        "sendMsgWhenLoaded": false,
        "noClickWhenDblClick": false,
        "outputField": "anotherField",
        "editorUrl": "",
        "directory": "",
        "panning": "disabled",
        "zooming": "disabled",
        "panOnlyWhenZoomed": false,
        "doubleClickZoomEnabled": false,
        "mouseWheelZoomEnabled": false,
        "dblClickZoomPercentage": "150",
        "cssString": "div.ui-svg svg{\n    color: var(--nr-dashboard-widgetColor);\n    fill: currentColor !important;\n}\ndiv.ui-svg path {\n    fill: inherit;\n}",
        "name": "Home Floor Plan",
        "x": 690,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "866e2e46.ba033",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "fa-thermometer-three-quarters",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"command\":\"update_text\",\"selector\":\"#my_text\",\"textContent\":\"fa-thermometer-three-quarters\"}",
        "payloadType": "json",
        "x": 380,
        "y": 560,
        "wires": [
            [
                "f369eb92.6c5558"
            ]
        ]
    },
    {
        "id": "68c4730b.af00bc",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "fa-thermometer-full ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"command\":\"update_text\",\"selector\":\"#my_text\",\"textContent\":\"fa-thermometer-full\"}",
        "payloadType": "json",
        "x": 350,
        "y": 600,
        "wires": [
            [
                "f369eb92.6c5558"
            ]
        ]
    },
    {
        "id": "46183ab5.42fd54",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "fa-thermometer-empty",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"command\":\"update_text\",\"selector\":\"#my_text\",\"textContent\":\"fa-thermometer-empty\"}",
        "payloadType": "json",
        "x": 360,
        "y": 440,
        "wires": [
            [
                "f369eb92.6c5558"
            ]
        ]
    },
    {
        "id": "501c7f9a.08ac4",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "fa-thermometer-half ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"command\":\"update_text\",\"selector\":\"#my_text\",\"textContent\":\"fa-thermometer-half\"}",
        "payloadType": "json",
        "x": 350,
        "y": 520,
        "wires": [
            [
                "f369eb92.6c5558"
            ]
        ]
    },
    {
        "id": "d3ea2538.fa9458",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "fa-thermometer-quarter",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"command\":\"update_text\",\"selector\":\"#my_text\",\"textContent\":\"fa-thermometer-quarter\"}",
        "payloadType": "json",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "f369eb92.6c5558"
            ]
        ]
    },
    {
        "id": "db080335.91c06",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 920,
        "wires": [
            [
                "d874352a.1495e8"
            ]
        ]
    },
    {
        "id": "d874352a.1495e8",
        "type": "function",
        "z": "f73e1552a28ba393",
        "name": "random mode generator",
        "func": "let r1 = Math.floor(Math.random() * 5000) + 1000;  \n\nfunction randomItem(arr){\n    var len = arr.length;\n    var rand = Math.floor(Math.random() * len);\n    return arr[rand]\n}\n\nlet station = randomItem([\"STN10\",\"STN20\",\"STN30\",\"STN40\",\"STN50\",\"STN60\",\"STN70\",\"STN80\"]);\nlet mode = randomItem([\"auto\",\"manual\",\"fault\",\"auto\",\"other\",\"auto\",\"fault\",\"auto\"]);\nlet fault = randomItem([\"sensor fault\",\"coolant empty\",\"CP tripped\",\"over speed\",\"E-Stop\",\"Safety Mat\"]);\nlet other = randomItem([\"full\",\"waiting\",\"over cycle\"]);\n\nlet statusText = mode == \"other\" ? other : (mode == \"fault\" ? fault : mode);\n\nlet state = flow.get(\"state\") || {}\nif(!state[station]){\n    state[station] = {mode:\"manual\", status:\"manual\", count:0}    \n}\nstate[station].mode = mode;\nstate[station].status = statusText;\nflow.set(\"state\",state)\n\n//$(\"#STN50 > .background\").attr(\"fill\",\"url('#fault')\")\n//$(\"#STN50 > .status\").text(\"hi\")\n\nlet newmsg = {payload:[\n        {\n            \"command\": \"update_attribute\",\n            \"selector\": \"#\" + station + \" > .background\",\n            \"attributeName\": \"fill\",\n            \"attributeValue\": \"url('#\" + mode + \"')\"\n        },\n        {\n            \"command\": \"update_text\",\n            selector: \"#\" + station + \" > .status\",\n            textContent: statusText\n        },\n        {\n            \"command\": \"update_text\",\n            selector: \"#\" + station + \" > .count\",\n            textContent: state[station].count\n        }\n    ]\n}\n\n\nsetTimeout(function () {\n    node.send(newmsg)\n}, r1 - 100);\n\n    \n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 920,
        "wires": [
            [
                "9ae97533.8f9bc8"
            ]
        ]
    },
    {
        "id": "9ae97533.8f9bc8",
        "type": "ui_svg_graphics",
        "z": "f73e1552a28ba393",
        "group": "9ec8b304.368cc",
        "order": 1,
        "width": "12",
        "height": "9",
        "svgString": "<svg id=\"svghmi\"  viewBox=\"0 0 320 180\" width=\"80%\" height=\"80%\" xmlns=\"http://www.w3.org/2000/svg\">\n <defs>\n  <linearGradient spreadMethod=\"repeat\" y1=\"0\" x1=\"0.5\" y2=\"1\" x2=\"0.5\" id=\"auto\">\n   <stop offset=\"0\" stop-color=\"#00aa00\"/>\n   <stop offset=\"0.5\" stop-color=\"#00ff00\"/>\n   <stop offset=\"1\" stop-color=\"#00aa00\"/>\n  </linearGradient>\n  <linearGradient spreadMethod=\"repeat\" y1=\"0\" x1=\"0.5\" y2=\"1\" x2=\"0.5\" id=\"fault\">\n   <stop offset=\"0\" stop-color=\"#aa0000\"/>\n   <stop offset=\"0.5\" stop-color=\"#ff0000\"/>\n   <stop offset=\"1\" stop-color=\"#aa0000\"/>\n  </linearGradient>\n  <linearGradient spreadMethod=\"repeat\" y1=\"0\" x1=\"0.5\" y2=\"1\" x2=\"0.5\" id=\"other\">\n   <stop offset=\"0\" stop-color=\"#aaaa00\"/>\n   <stop offset=\"0.5\" stop-color=\"#ffff00\"/>\n   <stop offset=\"1\" stop-color=\"#aaaa00\"/>\n  </linearGradient>\n    <linearGradient spreadMethod=\"repeat\" y1=\"0\" x1=\"0.5\" y2=\"1\" x2=\"0.5\" id=\"manual\">\n   <stop offset=\"0\" stop-color=\"#0000aa\"/>\n   <stop offset=\"0.5\" stop-color=\"#0000ff\"/>\n   <stop offset=\"1\" stop-color=\"#0000aa\"/>\n  </linearGradient>\n </defs>\n \n \n <g display=\"inline\">\n  <title>background</title>\n  <rect x=\"0\" fill=\"#000000\" stroke-dasharray=\"null\" stroke-linejoin=\"null\" stroke-linecap=\"null\" y=\"0.70313\" width=\"320\" height=\"180\" id=\"svg_5\" stroke=\"#000000\"/>\n </g>\n \n \n <g display=\"inline\" id=\"page1\">\n  <title>Main Overview</title>\n  <g id=\"STN10\">\n   <rect class=\"background\" fill=\"url(#manual)\" x=\"3.20313\" y=\"28.83594\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\" id=\"box_1\"/>\n   <text class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"-39.92712\" y=\"62.62216\" id=\"svg_2\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 10</text>\n   <text class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"-39.37879\" y=\"175.82813\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\" id=\"Status_STN10\">Manual</text>\n   <text class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" id=\"count_1\" y=\"72.78907\" x=\"41.82814\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"STN20\">\n   <rect id=\"svg_24\" class=\"background\" fill=\"url(#manual)\" x=\"82.65625\" y=\"28.83594\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text id=\"svg_25\" class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"150.36079\" y=\"62.62215\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 20</text>\n   <text id=\"svg_26\" class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"150.90912\" y=\"175.82812\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Manual</text>\n   <text id=\"svg_27\" class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" y=\"72.78907\" x=\"121.28127\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"STN30\">\n   <rect id=\"svg_29\" class=\"background\" fill=\"url(#manual)\" x=\"161.54688\" y=\"28.83594\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text id=\"svg_30\" class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"339.30151\" y=\"62.62216\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 30</text>\n   <text id=\"svg_31\" class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"339.84985\" y=\"175.82813\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Manual</text>\n   <text id=\"svg_32\" class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" y=\"72.78907\" x=\"200.17189\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"STN40\">\n   <rect id=\"svg_3\" class=\"background\" fill=\"url(#manual)\" x=\"240.43751\" y=\"28.83594\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text id=\"svg_4\" class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"528.24226\" y=\"62.62216\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 40</text>\n   <text id=\"svg_6\" class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"528.7906\" y=\"175.82813\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Manual</text>\n   <text id=\"svg_7\" class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" y=\"72.78907\" x=\"279.06252\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"STN50\">\n   <rect id=\"svg_57\" class=\"background\" fill=\"url(#manual)\" x=\"3.20313\" y=\"102.24219\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text id=\"svg_58\" class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"-39.92712\" y=\"222.78125\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 50</text>\n   <text id=\"svg_59\" class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"-39.37879\" y=\"335.98722\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Manual</text>\n   <text id=\"svg_60\" class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" y=\"146.19532\" x=\"41.82814\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"STN60\">\n   <rect id=\"svg_62\" class=\"background\" fill=\"url(#manual)\" x=\"82.65625\" y=\"102.24219\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text id=\"svg_63\" class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"150.36079\" y=\"222.78124\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 60</text>\n   <text id=\"svg_64\" class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"150.90912\" y=\"335.98721\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Manual</text>\n   <text id=\"svg_65\" class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" y=\"146.19532\" x=\"121.28127\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"STN70\">\n   <rect id=\"svg_67\" class=\"background\" fill=\"url(#manual)\" x=\"161.54688\" y=\"102.24219\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text id=\"svg_68\" class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"339.30151\" y=\"222.78124\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 70</text>\n   <text id=\"svg_69\" class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"339.84985\" y=\"335.98721\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Manual</text>\n   <text id=\"svg_70\" class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" y=\"146.19532\" x=\"200.17189\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"STN80\">\n   <rect id=\"svg_72\" class=\"background\" fill=\"url(#manual)\" x=\"240.43751\" y=\"102.24219\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text id=\"svg_73\" class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"528.24226\" y=\"222.78124\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 80</text>\n   <text id=\"svg_74\" class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"528.7906\" y=\"335.98721\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Manual</text>\n   <text id=\"svg_75\" class=\"count\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Sans-serif\" font-size=\"24\" y=\"146.19532\" x=\"279.06252\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-dasharray=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">0</text>\n  </g>\n  <g id=\"MAIN_HEADER\"  class=\"header_bar\">\n   <rect stroke=\"#000000\" class=\"background\" fill=\"url(#manual)\" x=\"0\" y=\"0\" width=\"320\" height=\"22\" id=\"svg_14\"/>\n   <text class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"237.32815\" y=\"5.23012\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\" id=\"svg_15\">Main Overview</text>\n  </g>\n </g>\n \n <g id=\"page2\" display=\"none\">\n  <title>Station 10 Overview</title>\n  <g id=\"STN10_HEADER\" class=\"header_bar\">\n   <rect stroke=\"#000000\" class=\"background\" fill=\"url(#manual)\" x=\"0\" y=\"0\" width=\"320\" height=\"22\"/>\n   <text class=\"name\" fill=\"#ffffff\" stroke-width=\"0\" x=\"236.24292\" y=\"6.73012\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Station 10</text>\n  </g>\n  <g id=\"STN10_Air\">\n   <rect class=\"background\" fill=\"url(#auto)\" x=\"119.51562\" y=\"61.65625\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"236.15508\" y=\"186.68609\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Air Supply</text>\n  </g>\n  <g id=\"STN10_Water\">\n   <rect class=\"background\" fill=\"url(#auto)\" x=\"208.51562\" y=\"61.65625\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"449.30747\" y=\"186.68609\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Water Supply</text>\n  </g>\n  <g id=\"STN10_ControlPower\">\n   <rect class=\"background\" fill=\"url(#fault)\" x=\"32.51562\" y=\"61.65625\" width=\"77.25\" height=\"70.625\" rx=\"10\" ry=\"10\" stroke=\"#000000\"/>\n   <text class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"27.79263\" y=\"186.68609\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Control Power</text>\n  </g>\n  <g id=\"STN10_home_button\">\n    <rect stroke=\"#000000\" class=\"home_button\" fill=\"#333333\" x=\"215.375\" y=\"147.6875\" width=\"77.25\" height=\"19.625\" rx=\"10\" ry=\"10\"/>\n    <text class=\"status\" fill=\"#ffffff\" stroke-width=\"0\" x=\"469.9828\" y=\"321.04688\" font-size=\"24\" font-family=\"Sans-serif\" text-anchor=\"middle\" xml:space=\"preserve\" font-weight=\"bold\" transform=\"matrix(0.41754164704216323,0,0,0.4583333432674408,58.471179716401295,13.575520584359765) \" stroke=\"#ffffff\">Close</text>\n  </g>\n </g>\n</svg>",
        "clickableShapes": [
            {
                "targetId": "STN10",
                "action": "click",
                "payload": "page2",
                "payloadType": "str",
                "topic": "page2"
            },
            {
                "targetId": "STN10_home_button",
                "action": "click",
                "payload": "page1",
                "payloadType": "str",
                "topic": "page1"
            }
        ],
        "javascriptHandlers": [],
        "smilAnimations": [
            {
                "id": "hide_page1",
                "targetId": "page1",
                "classValue": "",
                "attributeName": "display",
                "transformType": "rotate",
                "fromValue": "inline",
                "toValue": "none",
                "trigger": "cust",
                "duration": "500",
                "durationUnit": "ms",
                "repeatCount": "1",
                "end": "restore",
                "delay": "1",
                "delayUnit": "s",
                "custom": "STN10.click; "
            },
            {
                "id": "show_page2",
                "targetId": "page2",
                "classValue": "",
                "attributeName": "display",
                "transformType": "rotate",
                "fromValue": "none",
                "toValue": "inline",
                "trigger": "cust",
                "duration": "500",
                "durationUnit": "ms",
                "repeatCount": "1",
                "end": "restore",
                "delay": "1",
                "delayUnit": "s",
                "custom": "STN10.click; "
            },
            {
                "id": "hide_page2",
                "targetId": "page2",
                "classValue": "",
                "attributeName": "display",
                "transformType": "rotate",
                "fromValue": "inline",
                "toValue": "none",
                "trigger": "cust",
                "duration": "500",
                "durationUnit": "ms",
                "repeatCount": "1",
                "end": "restore",
                "delay": "1",
                "delayUnit": "s",
                "custom": "STN10_home_button.click; "
            },
            {
                "id": "show_page1",
                "targetId": "page1",
                "classValue": "",
                "attributeName": "display",
                "transformType": "rotate",
                "fromValue": "none",
                "toValue": "inline",
                "trigger": "cust",
                "duration": "500",
                "durationUnit": "ms",
                "repeatCount": "1",
                "end": "restore",
                "delay": "1",
                "delayUnit": "s",
                "custom": "STN10_home_button.click; "
            },
            {
                "id": "show_page1_copy",
                "targetId": "page1",
                "classValue": "",
                "attributeName": "display",
                "transformType": "rotate",
                "fromValue": "none",
                "toValue": "inline",
                "trigger": "cust",
                "duration": "500",
                "durationUnit": "ms",
                "repeatCount": "1",
                "end": "restore",
                "delay": "1",
                "delayUnit": "s",
                "custom": "STN10_home_button.click; "
            }
        ],
        "bindings": [],
        "showCoordinates": false,
        "autoFormatAfterEdit": false,
        "showBrowserErrors": false,
        "showBrowserEvents": false,
        "enableJsDebugging": false,
        "sendMsgWhenLoaded": false,
        "noClickWhenDblClick": false,
        "outputField": "payload",
        "editorUrl": "http://drawsvg.org/drawsvg.html",
        "directory": "",
        "panning": "disabled",
        "zooming": "disabled",
        "panOnlyWhenZoomed": false,
        "doubleClickZoomEnabled": false,
        "mouseWheelZoomEnabled": false,
        "dblClickZoomPercentage": "150",
        "cssString": "div.ui-svg svg{\n    color: var(--nr-dashboard-widgetColor);\n    fill: currentColor !important;\n}\ndiv.ui-svg path {\n    fill: inherit;\n}",
        "name": "",
        "x": 780,
        "y": 920,
        "wires": [
            [
                "16c10ad9.ea5c75"
            ]
        ]
    },
    {
        "id": "289594d4.e955ac",
        "type": "function",
        "z": "f73e1552a28ba393",
        "name": "random count generator",
        "func": "function randomInc(station, delayms){\n\n    setTimeout(function () {\n        var state = flow.get(\"state\") || {};\n        if(!state[station]){\n            state[station] = {count: 0}    \n        }\n        if(state[station].mode == \"auto\"){\n            state[station].count += 1;\n            flow.set(\"state\",state)\n            var newmsg = {\n                payload:{\n                    \"command\": \"update_text\",\n                    selector: \"#\" + station + \" > .count\",\n                    textContent: state[station].count\n                }\n            }\n            node.send(newmsg);\n        }\n        \n    }, delayms-5);\n}\n\nvar stns = [\"STN10\",\"STN20\",\"STN30\",\"STN40\",\"STN50\",\"STN60\",\"STN70\",\"STN80\"]\nvar i = 0;\nfor(i=0; i<stns.length; i++){\n    randomInc(stns[i], Math.floor(Math.random() * 1000) )\n}\n\n    \n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 960,
        "wires": [
            [
                "9ae97533.8f9bc8"
            ]
        ]
    },
    {
        "id": "7e684998.ab7a48",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 960,
        "wires": [
            [
                "289594d4.e955ac"
            ]
        ]
    },
    {
        "id": "429f0a6.a3e31f4",
        "type": "ui_template",
        "z": "f73e1552a28ba393",
        "group": "d634d288.20fb8",
        "name": "Click header bar of SVG for full screen",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<script>\n    \n    /* When the openFullscreen() function is executed, open the video in fullscreen.\n    Note that we must include prefixes for different browsers, as they don't support the requestFullscreen method yet */\n    function openFullscreen() {\n        debugger\n        /* Get the element you want displayed in fullscreen mode (a video in this example): */\n        var elem = document.getElementById(\"svghmi\");\n        if (elem.requestFullscreen) {\n            elem.requestFullscreen();\n        } else if (elem.mozRequestFullScreen) { /* Firefox */\n            elem.mozRequestFullScreen();\n        } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n            elem.webkitRequestFullscreen();\n        } else if (elem.msRequestFullscreen) { /* IE/Edge */\n            elem.msRequestFullscreen();\n        }\n    }\n    \n    //this seems to be too quick\n    $(\".header_bar\").click(openFullscreen);\n    \n    // hack / catch all - something has to work\n    setTimeout(function(){\n        debugger\n        $(\".header_bar\").click(openFullscreen);\n    }, 4000)\n    \n        \n    $(document).ready(function(){\n        //this doesnt seem to work!\n        $('#svghmi').on('load', function() {\n            $(\".header_bar\").click(openFullscreen);\n        }, true);\n        \n        //this seems to be too quick\n        $(\".header_bar\").click(openFullscreen);\n        \n        // hack / catch all - something has to work\n        setTimeout(function(){\n            debugger\n            $(\".header_bar\").click(openFullscreen);\n        }, 2000)\n    })\n\n</script>\n \n \n ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 590,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "16c10ad9.ea5c75",
        "type": "debug",
        "z": "f73e1552a28ba393",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 970,
        "y": 920,
        "wires": []
    },
    {
        "id": "b30ed944.1945b8",
        "type": "function",
        "z": "f73e1552a28ba393",
        "name": "init  mode generator",
        "func": "let stations = [\"STN10\",\"STN20\",\"STN30\",\"STN40\",\"STN50\",\"STN60\",\"STN70\",\"STN80\"];\nlet state = flow.get(\"state\") || {}\n\nfunction buildUpdates(station, state){\n    if(isNaN(state.count)){\n        state.count = 0;\n    }\n    msgData.push({\n                \"command\": \"update_attribute\",\n                \"selector\": \"#\" + station + \" > .background\",\n                \"attributeName\": \"fill\",\n                \"attributeValue\": \"url('#\" + (state.mode || \"manual\") + \"')\"\n            })\n    msgData.push({\n                \"command\": \"update_text\",\n                selector: \"#\" + station + \" > .status\",\n                textContent: state.status || \"manual\"\n            })\n    msgData.push({\n                \"command\": \"update_text\",\n                selector: \"#\" + station + \" > .count\",\n                textContent: state.count || 0\n            })\n}\nlet msgData = [];\n\n[\"STN10\",\"STN20\",\"STN30\",\"STN40\",\"STN50\",\"STN60\",\"STN70\",\"STN80\"].forEach(function(station){\n    if(!state[station]){\n        state[station] = {mode:\"manual\", status:\"manual\", count:0}    \n    }\n    buildUpdates(station, state[station]);\n})\n\nflow.set(\"state\",state)\nmsg.payload = msgData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 880,
        "wires": [
            [
                "9ae97533.8f9bc8",
                "9f176c0.9c6b298"
            ]
        ]
    },
    {
        "id": "e52caa81.e12af8",
        "type": "inject",
        "z": "f73e1552a28ba393",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 880,
        "wires": [
            [
                "b30ed944.1945b8"
            ]
        ]
    },
    {
        "id": "9f176c0.9c6b298",
        "type": "debug",
        "z": "f73e1552a28ba393",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 770,
        "y": 880,
        "wires": []
    },
    {
        "id": "358d15b3.6bf2aa",
        "type": "ui_ui_control",
        "z": "f73e1552a28ba393",
        "name": "",
        "x": 320,
        "y": 840,
        "wires": [
            [
                "b30ed944.1945b8"
            ]
        ]
    },
    {
        "id": "e9f581ab.2a03a",
        "type": "comment",
        "z": "f73e1552a28ba393",
        "name": "HMI Demo with fake data. Click Title bar to full screen, click Station 10 for page 2",
        "info": "",
        "x": 540,
        "y": 760,
        "wires": []
    },
    {
        "id": "2707fb49.587a84",
        "type": "trigger",
        "z": "b85317fd.d210f8",
        "g": "c922fdd64185d453",
        "name": "Comm Fail Message Trigger",
        "op1": "",
        "op2": "bad",
        "op1type": "pay",
        "op2type": "str",
        "duration": "15",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 120,
        "wires": [
            [
                "b60417d1.1799c8"
            ]
        ]
    },
    {
        "id": "52b4cee1.5db81",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "c922fdd64185d453",
        "name": "Comm Status Cache",
        "func": "var site = flow.get('site')\nvar n = flow.get('customerCallout')\nvar m = \"Current Time        \" + msg.timeStamp\nm += \"\\n\"+ site +\"\\n\"\n\n\nvar scadaCommAlarm = flow.get(\"scadaCommAlarm\")\n\nif(msg.payload === \"bad\") {\n        flow.set(\"scadaCommAlarm\", \"Alarm\")\n    if(scadaCommAlarm === \"Normal\") {\n        \n        flow.set(\"scadaCommAlarmDate\", msg.timeStamp)\n        m += \"Alarm Active:   SCADA Communication Offline\"\n        msg.topic = n\n        msg.payload = m\n        return msg\n    }\n    \n} else {\n        flow.set(\"scadaCommAlarm\", \"Normal\")\n    if(scadaCommAlarm === \"Alarm\") {\n        \n        flow.set(\"scadaCommAlarmDate\", msg.timeStamp)\n        m += \"Alarm Cleared:  SCADA Communication Now Online\"\n        msg.topic = n\n        msg.payload = m\n        return msg\n    }  \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "3c5f80fa372c5c08"
            ]
        ]
    },
    {
        "id": "90991055.062b5",
        "type": "http in",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Manual Get Status",
        "url": "/get_status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 4140,
        "wires": [
            [
                "a1faa439.d863c8"
            ]
        ]
    },
    {
        "id": "eb21619b.8dc98",
        "type": "http response",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Respond with Status Msg",
        "statusCode": "200",
        "headers": {
            "content-type": "text/plain"
        },
        "x": 1330,
        "y": 4140,
        "wires": []
    },
    {
        "id": "f550fd1d.dc116",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Check Cmd Add Return Phone",
        "func": "var cmd = msg.payload.Body.toLowerCase() \nnode.error(\"\\n**\\n**RECEIVED PAYLOAD\")\nnode.error(cmd)\nif(cmd.indexOf(\"status\") !== -1 || cmd.indexOf(\"1\") !== -1) {\n    return msg\n} else if(cmd.indexOf(\"reset\") !== -1 || cmd.indexOf(\"2\") !== -1) {\n    return [null, msg]\n} else if(cmd.indexOf(\"setpoints\") !== -1 || cmd.indexOf(\"3\") !== -1) {\n    return [null, null, msg]\n} else if(cmd.indexOf(\"ack\") !== -1 || cmd.indexOf(\"9\") !== -1) {\n    return [null, null, null, null, msg]\n}else if(cmd.indexOf(\"start\") == -1 && cmd.indexOf(\"stop\") == -1) {\n    return [null, null, null, null, null, msg]}",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 4140,
        "wires": [
            [
                "481728ad.855f28"
            ],
            [
                "aaa2a383.f473e"
            ],
            [
                "5b6d958.65b156c"
            ],
            [
                "bda2a9b5.1984f8"
            ],
            [
                "e05d9fa5.d34af"
            ]
        ]
    },
    {
        "id": "481728ad.855f28",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Send Status Message",
        "func": "//var site = flow.get(\"site\")var statusMsg = \"\\n\"statusMsg += \"\\n\"+ site +\"\\n\"var statusRegDate = flow.get(\"statusRegDate\")var alarmRegDate = flow.get(\"alarmRegDate\")var status = flow.get(\"Status\")var alarms = flow.get(\"Alarms\")var tanks = flow.get(\"Levels\")var flowv = flow.get(\"Flow\")var pressure = flow.get(\"Pressure\")var total = flow.get(\"Total\")var scadaCommAlarm = flow.get(\"scadaCommAlarm\")const POINT_HEADER_DEF_LENGTH = 21 statusMsg = statusMsg + \"\\nStatus Time:         \" + statusRegDate status.sort() //spacing+naming var sn = \"\\nTank Levels:\"var spa = \"\\n\"{statusMsg = statusMsg + spa} {statusMsg = statusMsg + sn + spa} //spacing+naming tanks.forEach(function(o){var name = Object.keys(o)[0]var st = \"\\n\" + \"     \" + name + \": \"for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st + \"\"}var whole = o[name]var feet = Math.floor(whole)var part = ((whole - feet) * 12) var inch = Math.floor(part) var part2 = ((inch - part) * 16) var frac = Math.floor(part2) frac = frac * -1 dem = \"/16\" msgFt = feet + \" (ft), \" + inch + \" (\" + frac + dem + \") (in)\"statusMsg = statusMsg + st + msgFt}); status.forEach(function(o){ var name = Object.keys(o)[0] if(name == \"Tank 1 Selected\" && o[name] == \"Selected\"){ var st = \"\\n\" + \"     \" + \"Tank: \"for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st} statusMsg = statusMsg + st + \"Tank 1 \" + o[name]}}); status.forEach(function(o){var name = Object.keys(o)[0] if(name == \"Tank 2 Selected\" && o[name] == \"Selected\"){var st = \"\\n\" + \"     \" + \"Tank: \" for var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st} statusMsg = statusMsg + st \"Tank 2 \" + o[name]}}); //spacing+naming var sn = \"\\nPressure:\" var spa = \"\\n\" {statusMsg = statusMsg + spa}{statusMsg = statusMsg + sn + spa}//spacing+naming pressure.forEach(function(o){var name = Object.keys(o)[0] var st = \"\\n\" + \"     \" + name + \": \" for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) { st = st } statusMsg = statusMsg + st + o[name] + \" (PSI)\" }); //spacing+naming var sn = \"\\nStatus:\" var spa = \"\\n\" {statusMsg = statusMsg + spa }{statusMsg = statusMsg + sn + spa}//spacing+naming status.forEach(function(o){var name = Object.keys(o)[0] var st = \"\\n\" + \"      \" + name + \": \" if(name == \"Head Switch Status\"){for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st } statusMsg = statusMsg + st + o[name]}}); status.forEach(function(o) {var name = Object.keys(o)[0] if(name == \"AC Power OK\"){var st = \"\\n\" + \"      \" + name + \": \"for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st} statusMsg = statusMsg + st + o[name]  }}); status.forEach(function(o){var name = Object.keys(o)[0] if(name == \"Charge Pump Running\") { var st = \"\\n\" + \"   \" + \"Charge Pump Status\" + \": \" for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st} statusMsg = statusMsg + st + o[name] }}); status.forEach(function(o) { var name = Object.keys(o)[0] if(name == \"PD1 Run Status\"){var st = \"\\n\" + \"      \" + name + \": \" for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st}statusMsg = statusMsg + st + o[name]  }}); status.forEach(function(o){ var name = Object.keys(o)[0] if(name == \"PD2 Run Status\"){ var st = \"\\n\" + \"      \" + name + \": \" for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st} statusMsg = statusMsg + st + o[name]}});status.forEach(function(o){var name = Object.keys(o)[0] if(name == \"PD3 Run Status\") { var st = \"\\n\" + \"      \" + name + \": \" for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st}statusMsg = statusMsg + st + o[name] }});//spacing+naming ar sn = \"\\nFlow:\" var spa = \"\\n\" statusMsg = statusMsg + spa {statusMsg = statusMsg + sn + spa} //spacing+naming flowv.forEach(function(o) { var name = Object.keys(o)[0] var st = \"\\n\" + \"     \" + name + \": \" if(name == \"Flow\"){for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st} statusMsg = statusMsg + st + o[name] + \" (BPD)\" }}); total.forEach(function(o){ var name = Object.keys(o)[0] var st = \"\\n\" + \"     \" + name + \": \" for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st}statusMsg = statusMsg + st + o[name] + \" (BBL)\"}); flowv.forEach(function(o){ var name = Object.keys(o)[0] var st = \"\\n\" + \"     \" + name + \": \" for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {st = st} if(name == \"Totalizer\"){statusMsg = statusMsg + st + o[name] + \" (BBL)\"} else if (name == \"Flow Rate\") {                                         statusMsg = statusMsg + st + o[name] + \" (BBL/D)\" } });//spacing var sp = \"\\n\" statusMsg = statusMsg + sp //spacing  var foundAlarm = false alarms.forEach(function(o){ var name = Object.keys(o)[0]if(o[name] === \"Alarm\") {if(!foundAlarm) {statusMsg = statusMsg + \"\\n\\nActive Alarms: \"foundAlarm = true}var st = \"\\n\" + name //  for(var i = st.length; i POINT_HEADER_DEF_LENGTH; i++) {//st = st + \" \"//}statusMsg = statusMsg + st }});if scadaCommAlarm === \"Alarm\") {if(!foundAlarm) {statusMsg = statusMsg + \"\\n\\nActive Alarms: \"}//statusMsg = statusMsg + \"\\nActive:  \" + scadaCommAlarmDate statusMsg = statusMsg + \"\\nSCADA Communication Offline\" foundAlarm = true} msg.payload = statusMsg return msg;\n\nvar site = flow.get(\"site\")\nvar statusMsg = \"\\n\"\nstatusMsg += \"\\n\"+ site +\"\\n\"\n\n    // GET STATUS READ TIMESTAMP\nvar statusRegDate = flow.get(\"statusRegDate\")\nvar alarmRegDate = flow.get(\"alarmRegDate\")\n \nvar status = flow.get(\"Status\")\nvar alarms = flow.get(\"Alarms\")\nvar tanks = flow.get(\"Levels\")\nvar flowv = flow.get(\"Flow\")\nvar pressure = flow.get(\"Pressure\")\nvar total = flow.get(\"Total\")\nvar scadaCommAlarm = flow.get(\"scadaCommAlarm\")\n\nconst POINT_HEADER_DEF_LENGTH = 21\n\nstatusMsg = statusMsg + \"\\nStatus Time:         \" + statusRegDate    \nstatus.sort()\n//spacing+naming\nvar sn = \"\\nTank Levels:\"\nvar spa = \"\\n\"\n{\n    statusMsg = statusMsg + spa\n}\n\n{\n    statusMsg = statusMsg + sn + spa\n}\n//spacing+naming\n\n\n    tanks.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n\n         var st = \"\\n\" + \"     \" + name + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st + \" \"\n        }\n        \n        var whole = o[name]\n        var feet = Math.floor(whole)\n        var part = ((whole - feet) * 12)\n        var inch = Math.floor(part)\n        var part2 = ((inch - part) * 16)\n        var frac = Math.floor(part2)\n        frac = frac * -1\n        dem = \"/16\"\n        \n        msgFt = feet + \" (ft), \" + inch + \" (\" + frac + dem + \") (in)\"\n        \n        statusMsg = statusMsg + st + msgFt        \n    \n\n    });\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        if(name == \"Tank 1 Selected\" && o[name] == \"Selected\"){\n         var st = \"\\n\" + \"     \" + \"Tank: \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + \"Tank 1 \" + o[name]        \n    \n        }\n    });\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        if(name == \"Tank 2 Selected\" && o[name] == \"Selected\"){\n         var st = \"\\n\" + \"     \" + \"Tank: \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + \"Tank 2 \" + o[name]        \n    \n        }\n    });\n\n\n//spacing+naming\nvar sn = \"\\nPressure:\"\nvar spa = \"\\n\"\n{\n    statusMsg = statusMsg + spa\n}\n\n{\n    statusMsg = statusMsg + sn + spa\n}\n//spacing+naming\n\n    pressure.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        \n\n              var st = \"\\n\" + \"     \" + name + \": \"\n            for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n                st = st\n            }\n            statusMsg = statusMsg + st + o[name] + \" (PSI)\"               \n        \n\n       \n    });    \n\n//spacing+naming\nsn = \"\\nStatus:\"\nspa = \"\\n\"\n{\n    statusMsg = statusMsg + spa\n}\n\n{\n    statusMsg = statusMsg + sn + spa\n}\n//spacing+naming\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        \n         var st = \"\\n\" + \"      \" + name + \": \"\n         if(name == \"Head Switch Status\"){\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + o[name]           \n         }\n\n    });\n    \n        status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        if(name == \"AC Power OK\"){\n         var st = \"\\n\" + \"      \" + name + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + o[name]           \n        }\n\n    });\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        if(name == \"Charge Pump Running\"){\n         var st = \"\\n\" + \"      \" + \"Charge Pump Status\" + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + o[name]           \n        }\n\n    });\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        if(name == \"PD1 Run Status\"){\n         var st = \"\\n\" + \"      \" + name + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + o[name]           \n        }\n\n    });\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        if(name == \"PD2 Run Status\"){\n         var st = \"\\n\" + \"      \" + name + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + o[name]           \n        }\n\n    });\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        if(name == \"PD3 Run Status\"){\n         var st = \"\\n\" + \"      \" + name + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + o[name]           \n        }\n\n    });\n\n//spacing+naming\nsn = \"\\nFlow:\"\nspa = \"\\n\"\n{\n    statusMsg = statusMsg + spa\n}\n\n{\n    statusMsg = statusMsg + sn + spa\n}\n//spacing+naming\n\n    flowv.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        \n\n              var st = \"\\n\" + \"     \" + name + \": \"\n              if(name == \"Flow\"){\n            for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n                st = st\n            }\n            statusMsg = statusMsg + st + o[name] + \" (BPD)\"\n              }\n        \n\n       \n    });    \n\n    total.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n\n         var st = \"\\n\" + \"     \" + name + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st\n        }\n        statusMsg = statusMsg + st + o[name] + \" (BBL)\"          \n    \n\n    });\n    \n        flowv.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        \n\n              var st = \"\\n\" + \"     \" + name + \": \"\n              \n            for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n                st = st\n            }\n            if(name == \"Totalizer\"){\n            statusMsg = statusMsg + st + o[name] + \" (BBL)\"              \n              } else if (name == \"Flow Rate\") {\n             statusMsg = statusMsg + st + o[name] + \" (BBL/D)\"            \n              }\n       \n    });\n\n//spacing\nvar sp = \"\\n\"\nstatusMsg = statusMsg + sp\n//spacing\n\n    var foundAlarm = false\n\n    alarms.forEach(function(o){\n        var name = Object.keys(o)[0]\n        if(o[name] === \"Alarm\") {\n\n            if(!foundAlarm) {\n            statusMsg = statusMsg + \"\\n\\nActive Alarms: \"\n            foundAlarm = true\n            }\n\n        var st = \"\\n\" + name\n      //  for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n     //       st = st + \" \"\n     //   }\n\n        statusMsg = statusMsg + st \n        }\n        \n    });\n\n\n\n\n    if(scadaCommAlarm === \"Alarm\") {\n    if(!foundAlarm) {\n    statusMsg = statusMsg + \"\\n\\nActive Alarms: \"\n    }\n\n    //statusMsg = statusMsg + \"\\nActive:  \" + scadaCommAlarmDate\n    statusMsg = statusMsg + \"\\nSCADA Communication Offline\"\n    foundAlarm = true  \n    }  \n\n  msg.payload = statusMsg\n  return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 4060,
        "wires": [
            [
                "eb21619b.8dc98"
            ]
        ]
    },
    {
        "id": "e27baa17.4a2908",
        "type": "ui_button",
        "z": "b85317fd.d210f8",
        "g": "aaec627d95cf77d0",
        "name": "Alarm Reset",
        "group": "b77c53f.84b19b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "RESET ALARMS",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "2",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 320,
        "y": 585.7142857142857,
        "wires": [
            [
                "697e26dc2f2e446b"
            ]
        ]
    },
    {
        "id": "70fcd267.8afe8c",
        "type": "trigger",
        "z": "b85317fd.d210f8",
        "g": "6ce8ee2e1bee7658",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 652.8,
        "wires": [
            [
                "1b91cf13.126aa1"
            ]
        ]
    },
    {
        "id": "1b91cf13.126aa1",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "6ce8ee2e1bee7658",
        "name": "Reset Cache",
        "func": "//if(msg.payload == 0) {flow.set(\"resetButton\", 0)} else {flow.set(\"resetButton\",1)} return msg\n\nif(msg.payload == 0) {\nflow.set(\"resetButton\", 0)\n} else {\nflow.set(\"resetButton\", 1)   \n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 652.8,
        "wires": [
            [
                "a0f1a5c8.953598"
            ]
        ]
    },
    {
        "id": "aaa2a383.f473e",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Send Reset Confirmation",
        "func": "//var site = flow.get(\"site\") var statusMsg = \"Current Time        \" + msg.timeStamp statusMsg += \"\\n\"+ site + \"\\nAlarm Reset executed.\" // alarms = flow.get(\"Alarms\") // alarm_names = Object.keys(alarms)  // var foundAlarm = false // alarm_names.forEach(function(a){ // if(alarms) // if(!foundAlarm) { // statusMsg = statusMsg + \"\\n\\nReset Alarms:\" // } // statusMsg = statusMsg + \"\\nTank High-High Level\" // foundAlarm = true// }); // if(!foundAlarm) {// statusMsg = statusMsg + \"  There were no alarms to reset.\" // } msg.payload = statusMsg return msg;\n\n\nvar site = flow.get(\"site\")\nvar statusMsg = \"Current Time        \" + msg.timeStamp\nstatusMsg += \"\\n\"+ site + \"\\nAlarm Reset executed.\"\n    \n    // alarms = flow.get(\"Alarms\")\n    // alarm_names = Object.keys(alarms)\n    // var foundAlarm = false\n    \n    // alarm_names.forEach(function(a){\n\n        \n    // if(alarms)\n    \n    // if(!foundAlarm) {\n    // statusMsg = statusMsg + \"\\n\\nReset Alarms:\"\n    // }    \n    // statusMsg = statusMsg + \"\\nTank High-High Level\"\n    // foundAlarm = true\n        \n        \n        \n    // });\n\n    // if(!foundAlarm) {\n    // statusMsg = statusMsg + \"  There were no alarms to reset.\"\n    // }\n\n  msg.payload = statusMsg\n  return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 4100,
        "wires": [
            [
                "eb21619b.8dc98"
            ]
        ]
    },
    {
        "id": "75f29d8a.0d60b4",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "6ce8ee2e1bee7658",
        "name": "Send and Set Cache",
        "func": "//var resetButton = flow.get(\"resetButton\") if(resetButton != 1) { flow.set(\"resetButton\", 1) return msg } \n\nvar resetButton = flow.get(\"resetButton\")\n\nif(resetButton != 1) {\nflow.set(\"resetButton\", 1)     \nreturn msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 652.8,
        "wires": [
            [
                "70fcd267.8afe8c"
            ]
        ]
    },
    {
        "id": "4776cf31.05c64",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "b3265ac240b7ade3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "good",
        "payloadType": "str",
        "x": 280,
        "y": 288.57142857142856,
        "wires": [
            [
                "c8eef8e17b6714ab"
            ]
        ]
    },
    {
        "id": "e05d9fa5.d34af",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Send Help Menu",
        "func": "//var statusMsg = \"Current Time        \" + msg.timeStamp statusMsg += \"\\nError: Command not recognized.\\nView Status=1\\nReset Alarms=2\\nSetpoints=3\\nAckAlarm=9\" msg.payload = statusMsg return msg;\n\nvar statusMsg = \"Current Time        \" + msg.timeStamp\nstatusMsg += \"\\nError: Command not recognized.\\nView Status=1\\nReset Alarms=2\\nSetpoints=3\\nAckAlarm=9\"\n    \nmsg.payload = statusMsg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 4220,
        "wires": [
            [
                "eb21619b.8dc98"
            ]
        ]
    },
    {
        "id": "ac09b416.996498",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "06984437f42dc90f",
        "name": "Loop Through Points",
        "func": "//var points = flow.get('points') var modbusStatus = flow.get('modbusStatus') if(points && (modbusStatus.indexOf('active') != -1 || modbusStatus.indexOf('timeout') != -1)) {var numPoints = Object.keys(points).length var idx = flow.get('idx') if (idx === undefined || idx >= numPoints) {idx = 0} var names = Object.keys(points) msg.points = points[names[idx]].points msg.name = names[idx] msg.parse = points[names[idx]].parse msg.group = points[names[idx]].group //node.error(msg.name) //node.error(points[names[idx]].address) //node.error(points[names[idx]].quantity) msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': points names[idx]].address, 'quantity': points[names[idx]].quantity } if(idx <= numPoints-1) {idx += 1 flow.set('idx', idx)} else {flow.set('idx', 0)} return msg;}\n\nvar points = flow.get('points')\nvar modbusStatus = flow.get('modbusStatus')\nif(points && (modbusStatus.indexOf('active') != -1 || modbusStatus.indexOf('timeout') != -1)) {\nvar numPoints = Object.keys(points).length\nvar idx = flow.get('idx')\n\nif (idx === undefined || idx >= numPoints) {\n    idx = 0\n}\n\nvar names = Object.keys(points)\nmsg.points = points[names[idx]].points\nmsg.name = names[idx]\nmsg.parse = points[names[idx]].parse\nmsg.group = points[names[idx]].group\n//node.error(msg.name)\n//node.error(points[names[idx]].address)\n//node.error(points[names[idx]].quantity)\n\nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': points[names[idx]].address, 'quantity': points[names[idx]].quantity }\n\nif(idx <= numPoints-1) {\n    idx += 1\n    flow.set('idx', idx)\n      \n} else {\nflow.set('idx', 0)  \n}\nreturn msg;  \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1065,
        "y": 358.4,
        "wires": [
            [
                "f9483d84.1557b"
            ]
        ]
    },
    {
        "id": "c8638a53.559358",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "aaec627d95cf77d0",
        "name": "man reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 585.7142857142857,
        "wires": [
            [
                "e27baa17.4a2908"
            ]
        ]
    },
    {
        "id": "c5a71b5c.eb4368",
        "type": "status",
        "z": "b85317fd.d210f8",
        "g": "36122bf6498d685a",
        "name": "",
        "scope": [
            "f9483d84.1557b"
        ],
        "x": 200,
        "y": 802.8571428571428,
        "wires": [
            [
                "dc5acda3.605a2"
            ]
        ]
    },
    {
        "id": "dc5acda3.605a2",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "36122bf6498d685a",
        "name": "modbus status",
        "func": "flow.set(\"modbusStatus\", msg.status.text)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 802.8571428571428,
        "wires": [
            []
        ]
    },
    {
        "id": "8ae0a126.b0158",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "9b4597e814fa6b80",
        "name": "ts 5 min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "791c3eb3.43a59",
                "df65f46b.2339c8"
            ]
        ]
    },
    {
        "id": "5dda8c17.63bd44",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "Parse Result",
        "func": "if (msg.name == \"Status\") {\n  return msg\n} else if(msg.name.indexOf(\"Alarms\") != -1) {\nreturn [null,msg]    \n} else {\nreturn [null,null,msg]\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 925,
        "y": 505.59999999999997,
        "wires": [
            [
                "60da4970.5f4558"
            ],
            [
                "6c95aea3.be54d"
            ],
            [
                "520152bd.4b653c"
            ]
        ]
    },
    {
        "id": "60da4970.5f4558",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "Parse Status",
        "func": "//flow.set(\"statusRegDate\", msg.timeStamp) var status = flow.get(\"Status\")||[]var names = []status.forEach(function(o){names.push(Object.keys(o)[0])}) // var names = Object.keys(status)var r = msg.payload[0]msg.points.forEach(function(p){ var val = \"\" if((r & Math.pow(2,p.bit)) > 0) { // var obj = {} val = p.alias_on // status.push(obj) } else { // var obj = {} val = p.alias_off // status.push(obj) } var idx = names.indexOf(p.name) var o = {} o[p.name] = val if(idx == -1) { status.push(o) } else { status[idx] = o } }); flow.set(\"Status\", status)\n\nflow.set(\"statusRegDate\", msg.timeStamp)\nvar status = flow.get(\"Status\")||[]\nvar names = []\nstatus.forEach(function(o){\n    names.push(Object.keys(o)[0])\n})\n// var names = Object.keys(status)\nvar r = msg.payload[0]\n\nmsg.points.forEach(function(p){\n    var val = \"\"\n    if((r & Math.pow(2,p.bit)) > 0) {\n        // var obj = {}\n        val = p.alias_on\n        // status.push(obj)\n    } else {\n        // var obj = {}\n        val = p.alias_off\n        // status.push(obj)\n    }\n    var idx = names.indexOf(p.name)\n    var o = {}\n    o[p.name] = val\n    if(idx == -1) {\n        status.push(o)\n    } else {\n        status[idx] = o\n    }\n});\n\nflow.set(\"Status\", status) ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1185,
        "y": 465.59999999999997,
        "wires": [
            []
        ]
    },
    {
        "id": "6c95aea3.be54d",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "Parse Alarms",
        "func": "var site = flow.get('site')\nvar n = flow.get('customerCallout')\nvar alarmMsg = \"Current Time        \" + msg.timeStamp\nalarmMsg += \"\\n\"+ site +\"\\n\"\nvar voiceMsg = \"Hello. There are active alarms at location.\"+ site +\".\"\n\nvar newAlarm = false\n\nflow.set(\"alarmRegDate\", msg.timeStamp)\nvar alarms = flow.get(\"Alarms\")||[]\nvar old_names = []\nalarms.forEach(function(a){\n  old_names.push(Object.keys(a)[0]) \n});\n\n// var new_alarms = []\nvar r = msg.payload[0]\n\nmsg.points.forEach(function(p){\n\n     if((r & Math.pow(2,p.bit)) > 0) {\n      var obj = {}\n      obj[p.name] = p.alias_on\n    //   new_alarms.push(obj)\n     } else {\n      var obj = {}\n      obj[p.name] = p.alias_off\n    //   new_alarms.push(obj)\n     }\n    \n    // node.error(old_names)\n    var idx = old_names.indexOf(p.name)\n    // node.error('INDEX OF NAME')\n    // node.error(idx)\n    \n    \n    \n        \n    \n    if (idx != -1) {\n        // node.error('obj[p.name]')\n        // node.error(obj[p.name])\n        // node.error('alarms[idx][p.name]')\n        // node.error(alarms[idx][p.name])        \n        \n        if(alarms[idx][p.name] != obj[p.name]) {\n          if(obj[p.name] == p.alias_on) {\n             alarmMsg = alarmMsg + \"\\nAlarm Active:   \" + p.name\n             voiceMsg = voiceMsg + \"Active. \" + p.name + \".\"\n          } else {\n             alarmMsg = alarmMsg + \"\\nAlarm Cleared:  \" + p.name\n          }\n        //   if((p.name == \"Tank High-High Level\") || (p.name == \"Charge 1 Fail to Start\") || (p.name == \"PD 2 Fail to Start\")){\n          newAlarm = true\n        //   }\n        } \n        \n        alarms[idx][p.name] = obj[p.name]\n        \n    } else {\n        alarms.push(obj)\n    }\n    \n    \n});\n\n\n\nflow.set(\"Alarms\", alarms)\nif(newAlarm) {\n    var alarmActive = false\n    alarms.forEach(function(a){\n        var val = Object.keys(a)[0]\n        val = a[val]\n        val = val.toLowerCase()\n        if(val.indexOf(\"alarm\") !== -1) {\n            alarmActive = true\n        }\n    });\n    flow.set('alarmActive', alarmActive)\n    // if active alarm, call and text\n    if(alarmMsg.indexOf('Alarm Active') != -1) {\n        voiceMsg = voiceMsg + \". Press any key to acknowledge the alarm.\"\n        flow.set('voiceMsg', voiceMsg)\n        return [{\"payload\": alarmMsg}, {\"payload\": voiceMsg, 'reset': true}]\n    } else {\n    return {\"payload\": alarmMsg}     \n    }\n    // if alarm clear, just text\n   \n} \n\n\n\n\n\n\n\n\n\n\n\n// var alarmMsg = \"Current Time        \" + msg.timeStamp\n// alarmMsg += \"\\nConroe\"\n\n// var voiceMessage = \"Hello. There are active alarms at location. Conroe. \"\n\n// var newAlarm = false\n\n// flow.set(\"alarmRegDate\", msg.timeStamp)\n// var old_alarms = flow.get(\"Alarms\")||[]\n// var old_names = []\n// old_alarms.forEach(function(a){\n//   old_names.push(Object.keys(a)[0]) \n// });\n\n// var new_alarms = []\n// var r = msg.payload[0]\n\n// msg.points.forEach(function(p){\n\n//      if((r & Math.pow(2,p.bit)) > 0) {\n//       var obj = {}\n//       obj[p.name] = p.alias_on\n//       new_alarms.push(obj)\n//      } else {\n//       var obj = {}\n//       obj[p.name] = p.alias_off\n//       new_alarms.push(obj)\n//      }\n    \n//     // node.error(old_names)\n//     var idx = old_names.indexOf(p.name)\n//     // node.error('INDEX OF NAME')\n//     // node.error(idx)\n    \n//     if (idx != -1) {\n//         // node.error('obj[p.name]')\n//         // node.error(obj[p.name])\n//         // node.error('old_alarms[idx][p.name]')\n//         // node.error(old_alarms[idx][p.name])        \n        \n//         if(old_alarms[idx][p.name] != obj[p.name]) {\n//           if(obj[p.name] == p.alias_on) {\n//              alarmMsg = alarmMsg + \"\\nAlarm Active:   \" + p.name\n//              voiceMsg = voiceMsg + \"Active:   \" + p.name + \".\"\n//           } else {\n//              alarmMsg = alarmMsg + \"\\nAlarm Cleared:  \" + p.name\n//           }\n//           newAlarm = true\n//         } \n//     }\n    \n// });\n\n\n\n// flow.set(\"Alarms\", new_alarms)\n\n// if(newAlarm) {\n//     // if active alarm, call and text\n//     if(alarmMsg.indexOf('Alarm Active') != -1) {\n//         return [{\"payload\": alarmMsg}, {\"payload\": voiceMsg, 'reset': true}]\n//     } else {\n//     return {\"payload\": alarmMsg}     \n//     }\n//     // if alarm clear, just text\n   \n// } ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1185,
        "y": 505.59999999999997,
        "wires": [
            [
                "354611c93850b5f3",
                "04d627f9fe12e209"
            ],
            [
                "ac2d6aea2348fb53"
            ]
        ]
    },
    {
        "id": "520152bd.4b653c",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "Parse Register Value",
        "func": "//if(msg.parse.length > 0) { var parse = JSON.parse(msg.parse) var val = msg.payload parse.forEach(function(p){ switch(p.func) { case \"float32ToNum\": //node.error(\"val before\") //node.error(val) if(val[0] === 0 && val[1] === 0) { val = 0.0 } else { var bits = (val[0] << 16 | val[1]); var sign = ((bits >>> 31) === 0) ? 1.0 : -1.0; var e = ((bits >>> 23) & 0xff); var m = (e === 0) ? (bits & 0x7fffff) << 1 : (bits & 0x7fffff) | 0x800000; var f = sign * m * Math.pow(2, e - 150); f = Math.fround(f); // f = parseFloat(f) //node.error(\"f before\") //node.error(f) f = parseFloat(f) //node.error(\"f after\") //node.error(f) f = f.toFixed(2) //node.error(\"f after\") //node.error(f) val = f } break; case \"scale\": if(val.constructor == Array) { val = val[0] } val = val * p.param break; case \"lact1SelectTank\": if(val.constructor == Array) { val = val[0] } for(var i = 1; i <= 3; i++) { if((val & Math.pow(2,i)) > 0) { var num = i + 1; val = \"Tank \" + num i = 16 } } if(val.constructor == Number) { val = \"Error\" } // val = val * p.param break; case \"lact2SelectTank\": if(val.constructor == Array) { val = val[0] } for(i = 4; i <= 5; i++) { if((val & Math.pow(2,i)) > 0) { num = i + 1; val = \"Tank \" + num i = 16 } } if(val.constructor == Number) { val = \"Error\" } // val = val * p.param break; case \"lact3SelectTank\": if(val.constructor == Array) { val = val[0] } for(i = 6; i <= 8; i++) { if((val & Math.pow(2,i)) > 0) { num = i + 1; val = \"Tank \" + num i = 16 } } if(val.constructor == Number) { val = \"Error\" } // val = val * p.param break; case \"alias\": if(val.constructor == Array) { val = val[0] } val = p.param[val] break; case \"int32ABCD\": if(val.constructor == Array) { val = (val[0] << 16) + val[1] } else { val = val } break; // LACT 1: 2,3,4 // LACT 2: 5,6 // LACT 3: 7,8,9 default: //node.error('DIDNT FIND PARSER') val = msg.payload[0] break; } }); } else { // default for no parser is single reg value int val = msg.payload[0] } // cache value //ode.error(msg.group) var status = flow.get(msg.group)||[] //node.error(\"PREVIOUS STATUS\") //node.error(status) var names = [] status.forEach(function(o){ names.push(Object.keys(o)[0]) }) var idx = names.indexOf(msg.name) var o = {} o[msg.name] = val if(idx == -1) { status.push(o) } else { status[idx] = o } flow.set(msg.group, status) \n\nif(msg.parse.length > 0) {\nvar parse = JSON.parse(msg.parse)\nvar val = msg.payload\n\n\nparse.forEach(function(p){\n    \nswitch(p.func) {\n    \ncase \"float32ToNum\":\n//node.error(\"val before\")\n//node.error(val)\nif(val[0] === 0 && val[1] === 0) {\n val = 0.0   \n} else {\nvar bits = (val[0] << 16 | val[1]);\nvar sign = ((bits >>> 31) === 0) ? 1.0 : -1.0;\nvar e = ((bits >>> 23) & 0xff);\nvar m = (e === 0) ? (bits & 0x7fffff) << 1 : (bits & 0x7fffff) | 0x800000;\nvar f = sign * m * Math.pow(2, e - 150);\nf = Math.fround(f);\n// f = parseFloat(f)\n//node.error(\"f before\")\n//node.error(f)\n\nf = parseFloat(f)\n//node.error(\"f after\")\n//node.error(f)\nf = f.toFixed(2)\n//node.error(\"f after\")\n//node.error(f)\nval = f\n}\nbreak;\n\ncase \"scale\":\n    if(val.constructor == Array) {\n        val = val[0]    \n    } \n    \n    val = val * p.param\nbreak;  \n\ncase \"lact1SelectTank\":\n    if(val.constructor == Array) {\n        val = val[0]    \n    } \n    for(var i = 1; i <= 3; i++) {\n        if((val & Math.pow(2,i)) > 0) {\n            var num = i + 1;\n            val = \"Tank \" + num\n            i = 16\n        }\n    }\n    \n    if(val.constructor == Number) {\n        val = \"Error\"\n    }\n    // val = val * p.param\n\nbreak;   \n\ncase \"lact2SelectTank\":\n    if(val.constructor == Array) {\n        val = val[0]    \n    } \n    for(i = 4; i <= 5; i++) {\n        if((val & Math.pow(2,i)) > 0) {\n            num = i + 1;\n            val = \"Tank \" + num\n            i = 16\n        }\n    }\n    \n    if(val.constructor == Number) {\n        val = \"Error\"\n    }\n    // val = val * p.param\n\nbreak;  \n\ncase \"lact3SelectTank\":\n    if(val.constructor == Array) {\n        val = val[0]    \n    } \n    for(i = 6; i <= 8; i++) {\n        if((val & Math.pow(2,i)) > 0) {\n            num = i + 1;\n            val = \"Tank \" + num\n            i = 16\n        }\n    }\n    \n    if(val.constructor == Number) {\n        val = \"Error\"\n    }\n    // val = val * p.param\n\nbreak;  \n\n\ncase \"alias\":\n    if(val.constructor == Array) {\n        val = val[0]    \n    } \n    \n    val = p.param[val]\n    \nbreak;\n\ncase \"int32ABCD\":\n    if(val.constructor == Array) {\n        val = (val[0] << 16) + val[1]   \n    } else {\n        val = val\n    }\n    \nbreak;\n\n// LACT 1: 2,3,4\n// LACT 2: 5,6\n// LACT 3: 7,8,9\n\n\ndefault:\n//node.error('DIDNT FIND PARSER')\n    val = msg.payload[0]\n    break;\n\n}\n\n});\n} else {\n    // default for no parser is single reg value int\n    val = msg.payload[0]\n}\n\n\n// cache value\n//ode.error(msg.group)\nvar status = flow.get(msg.group)||[]\n//node.error(\"PREVIOUS STATUS\")\n//node.error(status)\nvar names = []\nstatus.forEach(function(o){\n    names.push(Object.keys(o)[0])\n})\n\nvar idx = names.indexOf(msg.name)\nvar o = {}\no[msg.name] = val\nif(idx == -1) {\n    status.push(o)\n} else {\n    status[idx] = o\n}\n\n\nflow.set(msg.group, status)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1215,
        "y": 545.5999999999999,
        "wires": [
            [
                "354611c93850b5f3"
            ]
        ]
    },
    {
        "id": "81b19a94.4fb538",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "4f66432309b7e893",
        "name": "clear flow.vars",
        "func": "flow.set('Status', undefined) \nflow.set('Setpoints', undefined) \nflow.set('Alarms', undefined) \nflow.set('Levels', undefined) \nflow.set(\"Total\", undefined) \n//flow.set(\"Setpoints.Pump\", undefined) \nflow.set(\"Flow\", undefined) \nflow.set(\"Running\", undefined) \nflow.set(\"Tank\", undefined) \nflow.set(\"Pressure\", undefined) \nflow.set(\"Pressure\", undefined) \nflow.set(\"Other\", undefined) \n// flow.set('Alarms', undefined) \nflow.set('points', undefined) \nflow.set('numidx', undefined)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 694.2857142857142,
        "wires": [
            []
        ],
        "info": "********************************************************* ______ ______ | /\\ ___\\ /\\__ _\\ | Copyright 2020 Rights Reserved \\ \\___ \\\\/_/\\ \\/ | Sean Terrell \\/\\_____\\ \\ \\_\\ | Senior SCADA developer \\/_____/ \\/_/ | Cowan Consulting, Midland TX *********************************************************"
    },
    {
        "id": "dbbf7780.d23f98",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "4f66432309b7e893",
        "name": "man Clr Vars",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 694.2857142857142,
        "wires": [
            [
                "81b19a94.4fb538"
            ]
        ]
    },
    {
        "id": "5b6d958.65b156c",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Send Setpoints",
        "func": "var site = flow.get(\"site\")\n    var statusMsg = \"Current Time        \" + msg.timeStamp\n    statusMsg += \"\\nLocation: \" + site + \"\\nSetpoints Update:\"\n\n    // GET STATUS READ TIMESTAMP\n    var statusRegDate = flow.get(\"statusRegDate\")\n    var status = flow.get(\"Setpoints\")\n    var pump = flow.get(\"Setpoints.Pump\")\n\n    const POINT_HEADER_DEF_LENGTH = 21\n\n    statusMsg = statusMsg + \"\\nSetpoints Time         \" + statusRegDate\n    status.sort()\n\n//spacing+naming\nvar sn = \"\\nTanks:\"\nvar spa = \"\\n\"\n{\n    statusMsg = statusMsg + spa\n}\n\n{\n    statusMsg = statusMsg + sn + spa\n}\n//spacing+naming\n\n    status.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n        var st = \"\\n\" + \"     \" + name + \": \"\n    for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n        st = st + \" \"\n        }\n    statusMsg = statusMsg + st + o[name]           \n\n    });\n\n//spacing+naming\nvar sn = \"\\n Pumps:\"\nvar spa = \"\\n\"\n{\n    statusMsg = statusMsg + spa\n}\n\n{\n    statusMsg = statusMsg + sn + spa\n}\n//spacing+naming\n\n    pump.forEach(function(o){\n\n        var name = Object.keys(o)[0]\n\n         var st = \"\\n\" + \"     \" + name + \": \"\n        for(var i = st.length; i < POINT_HEADER_DEF_LENGTH; i++) {\n            st = st + \" \"\n        }\n        statusMsg = statusMsg + st + o[name]           \n    \n    });\n\n  msg.payload = statusMsg\n  return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 4140,
        "wires": [
            [
                "eb21619b.8dc98"
            ]
        ]
    },
    {
        "id": "5681c1c3.86255",
        "type": "http in",
        "z": "b85317fd.d210f8",
        "g": "dc7b1897e1eca11f",
        "name": "Alarm Call Pickup",
        "url": "/call_answered",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1730,
        "y": 700,
        "wires": [
            [
                "86c9085b.3b3318"
            ]
        ]
    },
    {
        "id": "79c3a856.6f6ee8",
        "type": "http response",
        "z": "b85317fd.d210f8",
        "g": "dc7b1897e1eca11f",
        "name": "Send TwiML",
        "statusCode": "200",
        "headers": {},
        "x": 2190,
        "y": 700,
        "wires": []
    },
    {
        "id": "86c9085b.3b3318",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "dc7b1897e1eca11f",
        "name": "Process Call",
        "func": "// node.error(\"CALL PICKED UP\") // var twiml_response = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?> \\ // <Response> \\ // <Gather action=\\\"http://ec2-13-59-107-160.us-east-2.compute.amazonaws.com:1880/operator_response\\\" numDigits=\\\"1\\\"> \\ // <Say voice=\\\"woman\\\">Hello, there is an active alarm at the Conroe Location. Press 1 to acknowledge and prevent the next operator from being notified.</Say> \\ // </Gather> \\ // <Say voice=\\\"woman\\\">Sorry, that choice is invalid.</Say> \\ // </Response>\" var voiceMsg = flow.get('voiceMsg') var url = flow.get('url') var twiml_response = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?> \\ <Response> \\ <Gather action=\"+url+\"\\\"operator_response\\\" numDigits=\\\"1\\\"> \\ <Say voice=\\\"woman\\\">\"+voiceMsg+\"</Say> \\ </Gather> \\ <Say voice=\\\"woman\\\">Sorry, I didn't get your response. You can still acknowledge the alarm by texting 9 or a. c. k. to this number. Goodbye.</Say> \\ </Response>\"; msg.payload = twiml_response; return msg; // <Gather action=\\\"http://ec2-18-218-144-146.us-east-2.compute.amazonaws.com:1880/operator_response\\\" numDigits=\\\"1\\\"> \\ // </Gather> \\ // <Say voice=\\\"woman\\\">Sorry, that choice is invalid.</Say> \\\n\n\nnode.error(\"CALL PICKED UP\")\n// var twiml_response = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?> \\\n//     <Response> \\\n//     <Gather action=\\\"http://ec2-13-59-107-160.us-east-2.compute.amazonaws.com:1880/operator_response\\\" numDigits=\\\"1\\\"> \\\n//         <Say voice=\\\"woman\\\">Hello, there is an active alarm at the Conroe Location.  Press 1 to acknowledge and prevent the next operator from being notified.</Say> \\\n//         </Gather> \\\n//         <Say voice=\\\"woman\\\">Sorry, that choice is invalid.</Say> \\\n//     </Response>\"\n      var voiceMsg = flow.get('voiceMsg')\n      var url = flow.get('url')\nvar twiml_response = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?> \\\n    <Response> \\\n      <Gather action=\"+url+\"\\\"operator_response\\\" numDigits=\\\"1\\\"> \\\n        <Say voice=\\\"woman\\\">\"+voiceMsg+\"</Say> \\\n      </Gather> \\\n      <Say voice=\\\"woman\\\">Sorry, I didn't get your response. You can still acknowledge the alarm by texting 9 or a. c. k. to this number. Goodbye.</Say> \\\n    </Response>\";\n\nmsg.payload = twiml_response;\nreturn msg;      \n      \n\n// <Gather action=\\\"http://ec2-18-218-144-146.us-east-2.compute.amazonaws.com:1880/operator_response\\\" numDigits=\\\"1\\\"> \\\n\n    //   </Gather> \\\n    //   <Say voice=\\\"woman\\\">Sorry, that choice is invalid.</Say> \\",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 700,
        "wires": [
            [
                "79c3a856.6f6ee8"
            ]
        ]
    },
    {
        "id": "cc3af731.6782c8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "dc7b1897e1eca11f",
        "name": "handleGather",
        "func": "// Use 2 outputs, 2nd is for mqtt topic/payload combination // Could be useful to post other caller info to a topic // var mqttOut = null; // var responseMsg = \"\"; node.error('INSIDE GATHER') // var name = \"wholehouse\"; // var reading = context.global[name]; var twiml_response = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?> \\ <Response><Say voice=\\\"woman\\\"> \\ You have acknowledged the alarm. No other operators will be called. Check text message for alarm details. Goodbye.\\ </Say>\\ </Response>\" msg.payload = twiml_response flow.set('alarmAcked', true) return [msg,msg] if\n\n// Use 2 outputs, 2nd is for mqtt topic/payload combination\n// Could be useful to post other caller info to a topic\n// var mqttOut = null;\n// var responseMsg = \"\";\nnode.error('INSIDE GATHER')\n// var name = \"wholehouse\";\n// var reading = context.global[name];\n\nvar twiml_response = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?> \\\n        <Response><Say voice=\\\"woman\\\"> \\\n\tYou have acknowledged the alarm.  No other operators will be called.  Check text message for alarm details. Goodbye.\\\n</Say>\\\n</Response>\"\nmsg.payload = twiml_response\nflow.set('alarmAcked', true)\nreturn [msg,msg]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 740,
        "wires": [
            [
                "79c3a856.6f6ee8"
            ],
            []
        ]
    },
    {
        "id": "8c003262.b7ef2",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "CLEAR ALARM CONTACTS",
        "func": "flow.set('alarmContacts', undefined)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "1986c9ca.224c16",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "ts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1200,
        "wires": [
            [
                "8c003262.b7ef2"
            ]
        ]
    },
    {
        "id": "1b0cad1d.f92c33",
        "type": "http in",
        "z": "b85317fd.d210f8",
        "g": "dc7b1897e1eca11f",
        "name": "Operator Input",
        "url": "/operator_response",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1740,
        "y": 740,
        "wires": [
            [
                "cc3af731.6782c8",
                "0735bbaa317d6c0c"
            ]
        ]
    },
    {
        "id": "63c360c3.2e474",
        "type": "trigger",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "op1": "",
        "op2": "call_next",
        "op1type": "nul",
        "op2type": "str",
        "duration": "1",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 930,
        "y": 800,
        "wires": [
            [
                "fcb9360490101464"
            ]
        ]
    },
    {
        "id": "266a2cbe.255004",
        "type": "delay",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 760,
        "wires": [
            [
                "af890975e6ef59b8"
            ]
        ]
    },
    {
        "id": "9e81343a.ab8438",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "send ack text message to other users",
        "func": "node.error(\"SEND ACK TEXT MESSAGE FUNCTION\")\nvar users = flow.get('alarmContacts')\nvar nums = Object.keys(users)\nnode.error(\"MSG PAYLOAD TO\")\nnode.error(msg.payload.To)\nvar idx = nums.indexOf(msg.payload.To)\nvar userName = users[nums[idx]]\nnums.splice(idx,1)\nvar activeAlarms = \"\"\nvar count = 0\nvar alarms = flow.get(\"Alarms\")\nvar scadaCommAlarm = flow.get(\"scadaCommAlarm\")||\"Normal\"\nif(scadaCommAlarm == \"Alarm\") {\n    activeAlarms += \"SCADA Comm Alarm, \"\n    count += 1\n}\n\n\nnode.error(\"BEFORE LOOP\")\n    alarms.forEach(function(a){\n        var name = Object.keys(a)[0]\n        var val = a[name]\n        val = val.toLowerCase()\n        if(val.indexOf(\"alarm\") !== -1) {\n            activeAlarms += name + \", \"\n            count += 1\n        }\n    });\n    activeAlarms = activeAlarms.substring(0,activeAlarms.length-2)\nnode.error(\"AFTER LOOP\")\nif(count > 1) {\nvar msg = \"The alarms: \" + activeAlarms + \" were acknowledged by: \" + userName    \n} else {\nvar msg = \"The alarm: \" + activeAlarms + \" was acknowledged by: \" + userName    \n}\n\nvar n = \"\"\nnums.forEach(function(num){\n   n = n + num + \",\" \n});\nn = n.substring(0,n.length-1)\nvar obj = {\"payload\": msg, \"topic\": n, \"reset\": true}\nnode.error(obj)\nreturn obj;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 840,
        "wires": [
            [
                "ea11f5cc314e28f6"
            ]
        ]
    },
    {
        "id": "bda2a9b5.1984f8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Alarm Acknowledge",
        "func": "\n   var statusMsg = \"Current Time        \" + msg.timeStamp\n   var alarms = flow.get(\"Alarms\")\n   var scadaCommAlarm = flow.get(\"scadaCommAlarm\")||\"Normal\"\n   var updateOtherUsersMsg = null\n   var alarmAcked = flow.get(\"alarmAcked\")||false\n    if(alarms && !alarmAcked) {\n        \n    var activeAlarms = \"\"\n    if(scadaCommAlarm == \"Alarm\") {\n        activeAlarms = \"SCADA Comm Alarm, \"\n    }\n    \n        alarms.forEach(function(a){\n        var name = Object.keys(a)[0]\n        var val = a[name]\n        val = val.toLowerCase()\n        if(val.indexOf(\"alarm\") !== -1) {\n            activeAlarms = activeAlarms + name + \", \"\n        }\n    });\n    if ((activeAlarms.length > 0)) {\n        updateOtherUsersMsg = {\"payload\": {}}\n        updateOtherUsersMsg.payload.To = msg.payload.From\n        // node.error(\"updateOtherUsersMsg\", updateOtherUsersMsg)\n        // node.error(\"updateOtherUsersMsg.payload.To\", updateOtherUsersMsg.payload.To)\n        // node.error(\"updateOtherUsersMsg.payload.From\", updateOtherUsersMsg.payload.From)\n        \n     activeAlarms = activeAlarms.substring(0,activeAlarms.length-2)\n     statusMsg += \"\\n\"+ site +\"\\nAlarms Acknowledged: \" + activeAlarms  \n     flow.set(\"alarmAcked\", true)\n    } else {\n     statusMsg += \"\\n\"+ site +\"\\nNo Active Alarms to Acknowledge\"       \n    }\n\n    } else {\n        statusMsg += \"\\n\"+ site +\"\\nNo Active Alarms to Acknowledge\" \n    }\n    \n    // alarms = flow.get(\"Alarms\")\n    // alarm_names = Object.keys(alarms)\n    // var foundAlarm = false\n    \n    // alarm_names.forEach(function(a){\n\n        \n    // if(alarms)\n    \n    // if(!foundAlarm) {\n    // statusMsg = statusMsg + \"\\n\\nReset Alarms:\"\n    // }    \n    // statusMsg = statusMsg + \"\\nTank High-High Level\"\n    // foundAlarm = true\n        \n        \n        \n    // });\n\n    // if(!foundAlarm) {\n    // statusMsg = statusMsg + \"  There were no alarms to reset.\"\n    // }\n\n  msg.payload = statusMsg\n  if(updateOtherUsersMsg) {\n     return [msg, updateOtherUsersMsg]; \n  } else {\n      return [msg];\n  }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 4180,
        "wires": [
            [
                "eb21619b.8dc98"
            ]
        ]
    },
    {
        "id": "92b11aed.346308",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "CLEAR COMM ALM CNT",
        "func": "flow.set(\"scadaCommAlarmCount\",0)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "dce4ed75.4a233",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "ts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1080,
        "wires": [
            [
                "92b11aed.346308"
            ]
        ]
    },
    {
        "id": "5f496222.da1bdc",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "ALM ACKED FALSE",
        "func": "flow.set(\"alarmAcked\",false)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "76e231eb.291cc",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "ts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "5f496222.da1bdc"
            ]
        ]
    },
    {
        "id": "f7062b98.b28fd8",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "58eddbe133f3fd8e",
        "name": "man- test sms",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 911.4285714285713,
        "wires": [
            [
                "be63e6ef14c3af79"
            ]
        ]
    },
    {
        "id": "bc34f20d.485b8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "Add alarm message",
        "func": "var site=flow.get('site') \nvar alarmMsg = \"Current Time \" + msg.timeStamp \nalarmMsg += \"\\n\"+site+\"\\n\" \nalarmMsg += \"\\nAlarm Active: PD2 FTS\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 260,
        "wires": [
            [
                "5eb12a7.27ed2d4"
            ]
        ],
        "info": "********************************************************* ______ ______ | /\\ ___\\ /\\__ _\\ | Copyright 2020 Rights Reserved \\ \\___ \\\\/_/\\ \\/ | Sean Terrell \\/\\_____\\ \\ \\_\\ | Senior SCADA developer \\/_____/ \\/_/ | Cowan Consulting, Midland TX *********************************************************"
    },
    {
        "id": "958a2454.e49d18",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "3fdfab0545a44031",
        "name": "MQTT Parse",
        "func": "//This takes the cache of point and iterates over it //to make it an object so tha tags come in \"pretty\" // and standardized into Ignition //Vals mqtopic = flow.get('mqtopic') object = flow.get(\"points\") points = Object.keys(object) alarms = flow.get(\"Alarms\") flows = flow.get(\"Flow\") levels = flow.get(\"Levels\") pressures = flow.get(\"Pressure\") runnings = flow.get(\"Running\") setpoints = flow.get(\"Setpoints\") totals = flow.get(\"Total\") status= flow.get(\"Status\") newPoints = {} //Levels lenPoints = levels.length index = 0 for (r = 0; r < lenPoints; r++){ tag = levels[index] key = Object.keys(tag) label = key[0] value = tag[label] units = \"ft\" point = {label: label, value: value, units: units } newPoints[label] = point index++ } //Pressures lenPoints = pressures.length index = 0 for (r = 0; r < lenPoints; r++){ tag = pressures[index] key = Object.keys(tag) label = key[0] value = tag[label] units = \"psi\" point = {label: label, value: value, units: units } newPoints[label] = point index++ } //Flow lenPoints = flows.length index = 0 for (r = 0; r < lenPoints; r++){ tag = flows[index] key = Object.keys(tag) label = key[0] value = tag[label] units = \"bpd\" point = {label: label, value: value, units: units } newPoints[label] = point index++ } //Totals lenPoints = totals.length index = 0 for (r = 0; r < lenPoints; r++){ tag = totals[index] key = Object.keys(tag) label = key[0] value = tag[label] units = \"bpd\" point = {label: label, value: value, units: units } newPoints[label] = point index++ } //Setpoints lenPoints = setpoints.length index = 0 for (r = 0; r < lenPoints; r++){ tag = setpoints[index] key = Object.keys(tag) label = key[0] value = tag[label] units = \"none\" point = {label: label, value: value, units: units } newPoints[label] = point index++ } //Status lenPoints = status.length index = 0 for (r = 0; r < lenPoints; r++){ tag = status[index] key = Object.keys(tag) label = key[0] value = tag[label] units = \"none\" //Tank Selected removal for easier dev testing, less data if (label.includes(\"Tank\")){ index++ } else { point = {label: label, value: value, units: units } newPoints[label] = point index++ } } //Alarms lenPoints = alarms.length index = 0 for (r = 0; r < lenPoints; r++){ tag = alarms[index] key = Object.keys(tag) label = key[0] value = tag[label] units = \"none\" //Bool the alarms for esier pipelines in Ignition if (value == \"Alarm\"){ value = true } else if (value == \"Normal\"){ value = false } else { value = value } //Remove Tanks since we have the setpoints for the pipeline if (label.includes(\"Tank\")){ index++ } else { point = {label: label, value: value, units: units } newPoints[label] = point index++ } } //Payload msg.topic = mqtopic msg.payload = newPoints return msg;\n\n//This takes the cache of point and iterates over it\n//to make it an object so tha tags come in \"pretty\"\n// and standardized into Ignition\n\n//Vals\nmqtopic = flow.get('mqtopic')\nobject = flow.get(\"points\")\npoints = Object.keys(object)\nalarms = flow.get(\"Alarms\")\nflows = flow.get(\"Flow\")\nlevels = flow.get(\"Levels\")\npressures = flow.get(\"Pressure\")\nrunnings = flow.get(\"Running\")\nsetpoints = flow.get(\"Setpoints\")\ntotals = flow.get(\"Total\")\nstatus= flow.get(\"Status\")\nnewPoints = {}\n\n//Levels\n\nlenPoints = levels.length\nindex = 0\nfor (r = 0; r < lenPoints; r++){\n   tag = levels[index]\n   key = Object.keys(tag)\n   label = key[0]\n   value = tag[label]\n   units = \"ft\"\n   point = {label: label, value: value, units: units }\n   newPoints[label] = point\n   index++\n}\n\n\n//Pressures\n\nlenPoints = pressures.length\nindex = 0\nfor (r = 0; r < lenPoints; r++){\n   tag = pressures[index]\n   key = Object.keys(tag)\n   label = key[0]\n   value = tag[label]\n   units = \"psi\"\n   point = {label: label, value: value, units: units }\n   newPoints[label] = point\n   index++\n}\n\n//Flow\n\nlenPoints = flows.length\nindex = 0\nfor (r = 0; r < lenPoints; r++){\n   tag = flows[index]\n   key = Object.keys(tag)\n   label = key[0]\n   value = tag[label]\n   units = \"bpd\"\n   point = {label: label, value: value, units: units }\n   newPoints[label] = point\n   index++\n}\n\n//Totals\n\nlenPoints = totals.length\nindex = 0\nfor (r = 0; r < lenPoints; r++){\n   tag = totals[index]\n   key = Object.keys(tag)\n   label = key[0]\n   value = tag[label]\n   units = \"bpd\"\n   point = {label: label, value: value, units: units }\n   newPoints[label] = point\n   index++\n}\n\n//Setpoints\n\nlenPoints = setpoints.length\nindex = 0\nfor (r = 0; r < lenPoints; r++){\n   tag = setpoints[index]\n   key = Object.keys(tag)\n   label = key[0]\n   value = tag[label]\n   units = \"none\"\n   point = {label: label, value: value, units: units }\n   newPoints[label] = point\n   index++\n}\n\n//Status\n\nlenPoints = status.length\nindex = 0\nfor (r = 0; r < lenPoints; r++){\n   tag = status[index]\n   key = Object.keys(tag)\n   label = key[0]\n   value = tag[label]\n   units = \"none\"\n   \n   //Tank Selected removal for easier dev testing, less data\n   \n   if (label.includes(\"Tank\")){\n       index++\n   } else {\n       point = {label: label, value: value, units: units }\n       newPoints[label] = point\n       index++\n   }\n}\n\n//Alarms\n\nlenPoints = alarms.length\nindex = 0\nfor (r = 0; r < lenPoints; r++){\n   tag = alarms[index]\n   key = Object.keys(tag)\n   label = key[0]\n   value = tag[label]\n   units = \"none\"\n   \n   //Bool the alarms for esier pipelines in Ignition\n   \n   if (value == \"Alarm\"){\n       value = true\n   } else if (value == \"Normal\"){\n       value = false\n   } else {\n       value = value\n   }\n   \n   //Remove Tanks since we have the setpoints for the pipeline\n   \n   if (label.includes(\"Tank\")){\n       index++\n   } else {\n       point = {label: label, value: value, units: units }\n       newPoints[label] = point\n       index++\n   }\n}\n\n//Payload\nmsg.topic = mqtopic\nmsg.payload = newPoints\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 580,
        "wires": [
            [
                "48da3f59755776b1"
            ]
        ],
        "info": "********************************************************* ______ ______ | /\\ ___\\ /\\__ _\\ | Copyright 2020 Rights Reserved \\ \\___ \\\\/_/\\ \\/ | Sean Terrell \\/\\_____\\ \\ \\_\\ | [https://scadawarriors.com](SCADA Warrior) \\/_____/ \\/_/ | Cowan Consulting Services, Midland TX | ********************************************************* Find me on [https://www.linkedin.com/in/sean-terrell-1837a312/](Linkedin) # What the Hell is this one for??! The MQTT parse node is essential for the Node Red NAMESPACE and moving data into the UNIVERSAL Namespace "
    },
    {
        "id": "287e8226.ef8abe",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "status",
        "payloadType": "flow",
        "x": 180,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "a32c404b.b1508",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "86ea6e018e953b27",
        "name": "mqtt top set ",
        "func": "var src= flow.get('site') \nmsg.src= src; \nmsg.payload= src; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 460,
        "wires": [
            [
                "59c42fc3.08a1a"
            ]
        ]
    },
    {
        "id": "791c3eb3.43a59",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "9b4597e814fa6b80",
        "name": "Setup Variables",
        "func": "//var customer = \"BigLongPipe Midstream \" var sitename = \"LongPipe Magnum\" var mqttsite = 'MagnumSWD' var fieldRegion = \"Jawl/ New Mex\" var geo = { 'vlat': 'lat', 'vlong': 'long' } //comma separated list of sms phone numbers var ccsCallout = '+13375229291, +14322084818, +18324556922' var customerCallout = \"+13375229291\" //list of customer voice callout numbers and names var contacts = {'+18324556922': 'Wally' , '+18172473760': 'Mark E Mark' } //the url this instance is located at var url = \" \" //db name in the public schema // var db = \"steelriver_brazos_historian\" //twilio callout number - must be purchased prior var twiNum= \"+14323484419\" // var i = 0, strLength = customer.length for(i; i < strLength; i++) { ucust = customer.replace(\" \", \"_\"); } i = 0, strLength = sitename.length for(i; i < strLength; i++) { usite = sitename.replace(\" \", \"_\"); } i = 0, strLength = mqttsite.length for(i; i < strLength; i++) { mqttsite = mqttsite.replace(\" \", \"_\"); } var mqtopic = ucust + '/' + mqttsite flow.set('alarmContacts', contacts) //error.log(contacts) flow.set('cutomerCallout', customerCallout) flow.set('ccsCallout', ccsCallout) flow.set('twiNum', twiNum) flow.set('mqtopic', mqtopic) flow.set('site', sitename) flow.set('url', url) flow.set('customer', customer) flow.set('area', fieldRegion) flow.set('mqttsite', mqttsite) flow.set('modbusStatus', 'active') return msg;\n\n\nvar customer = \"BigLongPipe Midstream \"\nvar sitename = \"LongPipe Magnum\"\nvar mqttsite = 'MagnumSWD'\nvar fieldRegion = \"Jawl/ New Mex\"\nvar geo = { 'vlat': 'lat', 'vlong': 'long' }\n//comma separated list of sms phone numbers\nvar ccsCallout = '+13375229291, +14322084818, +18324556922'\nvar customerCallout = \"+13375229291\"\n//list of customer voice callout numbers and names\nvar contacts = {'+18324556922': 'Wally' , '+18172473760': 'Mark E Mark' }\n//the url this instance is located at\nvar url = \"  \"\n//db name in the public schema\n// var db = \"steelriver_brazos_historian\"\n//twilio callout number - must be purchased prior\nvar twiNum= \"+14323484419\"\n//\n\nvar i = 0, strLength = customer.length\nfor(i; i < strLength; i++) {\n ucust = customer.replace(\" \", \"_\");\n}\ni = 0, strLength = sitename.length\nfor(i; i < strLength; i++) {\n usite = sitename.replace(\" \", \"_\");\n}\ni = 0, strLength = mqttsite.length\nfor(i; i < strLength; i++) {\n mqttsite = mqttsite.replace(\" \", \"_\");\n}\nvar mqtopic = ucust + '/' + mqttsite\n\nflow.set('alarmContacts', contacts)\n//error.log(contacts)\nflow.set('cutomerCallout', customerCallout)\nflow.set('ccsCallout', ccsCallout)\nflow.set('twiNum', twiNum)\nflow.set('mqtopic', mqtopic)\nflow.set('site', sitename)\nflow.set('url', url)\nflow.set('customer', customer)\nflow.set('area', fieldRegion)\nflow.set('mqttsite', mqttsite)\nflow.set('modbusStatus', 'active')\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            []
        ],
        "info": "********************************************************* ______ ______ | /\\ ___\\ /\\__ _\\ | Copyright 2020 Rights Reserved \\ \\___ \\\\/_/\\ \\/ | Sean Terrell \\/\\_____\\ \\ \\_\\ | Senior SCADA developer \\/_____/ \\/_/ | Cowan Consulting, Midland TX *********************************************************"
    },
    {
        "id": "24d73f62.39bcb",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "b3265ac240b7ade3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "bad",
        "payloadType": "str",
        "x": 280,
        "y": 248.57142857142858,
        "wires": [
            [
                "c8eef8e17b6714ab"
            ]
        ]
    },
    {
        "id": "5f82febe.8b3a6",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "9b4597e814fa6b80",
        "name": "clear setup",
        "func": "//flow.set('alarmContacts', undefined) flow.set('cutomerCallout', undefined) flow.set('ccsCallout', undefined) flow.set('twiNum', undefined) flow.set('mqtopic', undefined) flow.set('site', undefined) flow.set('url', undefined) // global.set('twilio', 'twilio') //flow.set('Setpoints) return msg;\n\n\nflow.set('alarmContacts', undefined)\nflow.set('cutomerCallout', undefined)\nflow.set('ccsCallout', undefined)\nflow.set('twiNum', undefined)\nflow.set('mqtopic', undefined)\nflow.set('site', undefined)\nflow.set('url', undefined)\n// global.set('twilio', 'twilio')\n//flow.set('Setpoints)\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            []
        ],
        "info": "********************************************************* ______ ______ | /\\ ___\\ /\\__ _\\ | Copyright 2020 Rights Reserved \\ \\___ \\\\/_/\\ \\/ | Sean Terrell \\/\\_____\\ \\ \\_\\ | Senior SCADA developer \\/_____/ \\/_/ | Cowan Consulting, Midland TX *********************************************************"
    },
    {
        "id": "b8f94385.fd468",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "add cust",
        "func": "var n = flow.get('customerCallout') \nmsg.topic = n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 300,
        "wires": [
            [
                "5eb12a7.27ed2d4"
            ]
        ]
    },
    {
        "id": "521d8d6b.7a69f4",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "9b4597e814fa6b80",
        "name": "ts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "5f82febe.8b3a6"
            ]
        ]
    },
    {
        "id": "df65f46b.2339c8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "9b4597e814fa6b80",
        "name": "twilio acct",
        "func": "//var twiAccount = \"ACd3d1e28d6055eac9af7579cbe9b2df67\" var twiToken= \"a1de8f81bff3964a68b73ecc8f4aa84e\" flow.set('twiAccount', twiAccount) flow.set('twiToken', twiToken) return msg; //. 07/2020 set twi account vars in this field //. copyright 2020 Sean Terrell - Cowan Consulting Midland TX //. TFA Waco Tx. Rights Reserved.\n\nvar twiAccount = \"ACd3d1e28d6055eac9af7579cbe9b2df67\"\nvar twiToken= \"a1de8f81bff3964a68b73ecc8f4aa84e\"\n\nflow.set('twiAccount', twiAccount)\nflow.set('twiToken', twiToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            []
        ],
        "info": "********************************************************* ______ ______ | /\\ ___\\ /\\__ _\\ | Copyright 2020 Rights Reserved \\ \\___ \\\\/_/\\ \\/ | Sean Terrell \\/\\_____\\ \\ \\_\\ | Senior SCADA developer \\/_____/ \\/_/ | Cowan Consulting, Midland TX *********************************************************"
    },
    {
        "id": "5e2dafa7.4cf2a",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "eba090c28ae5aca2",
        "name": "mod stat gate",
        "func": "var modbus = flow.get('modbusStatus') \nif (modbus === 'active'){ \n    return msg;\n    \n} else { \n    \n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 140,
        "wires": [
            [
                "a10155e0.393488"
            ]
        ]
    },
    {
        "id": "e6d8eecf.3b127",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "add serv",
        "func": "var n = flow.get('ccsCallout') \nmsg.topic = n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 340,
        "wires": [
            [
                "26a0550e.10c0ba"
            ]
        ]
    },
    {
        "id": "59c42fc3.08a1a",
        "type": "mqtt out",
        "z": "b85317fd.d210f8",
        "g": "86ea6e018e953b27",
        "name": "",
        "topic": "keepAlive",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "",
        "x": 1930,
        "y": 460,
        "wires": []
    },
    {
        "id": "ad2f96c.91fcf68",
        "type": "mqtt out",
        "z": "b85317fd.d210f8",
        "g": "3fdfab0545a44031",
        "name": "mqtt sender",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "",
        "x": 2110,
        "y": 580,
        "wires": []
    },
    {
        "id": "50c225a4.05f7dc",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "59688b15fc5c84db",
        "name": "ts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 480,
        "wires": [
            [
                "0f63fcd0baa79913"
            ]
        ]
    },
    {
        "id": "d9e5d3fc.c0bbe",
        "type": "file in",
        "z": "b85317fd.d210f8",
        "g": "6da7c391d0d66ed5",
        "name": "Read Modbus Point Config",
        "filename": "/data/modbus_points.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 910,
        "y": 259.2,
        "wires": [
            [
                "56ff9dce.fd5a64"
            ]
        ]
    },
    {
        "id": "68303bc2.c6e234",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "6da7c391d0d66ed5",
        "name": "cacheConfig",
        "func": "//var pts = msg.payload var points_lookup = {} pts.forEach(function(p){ if (points_lookup[p.reg_name]) { points_lookup[p.reg_name].points.push({'bit': parseInt(p.bit), 'name': p.point_name, 'alias_on': p.alias_on, 'alias_off': p.alias_off, 'parse': p.parse}) } else { points_lookup[p.reg_name] = {} points_lookup[p.reg_name].name = p.reg_name points_lookup[p.reg_name].parse = p.parse points_lookup[p.reg_name].group = p.group points_lookup[p.reg_name].quantity = p.quantity points_lookup[p.reg_name].address = parseInt(p.reg_address) points_lookup[p.reg_name].points = [] points_lookup[p.reg_name].points.push({'bit': parseInt(p.bit), 'name': p.point_name, 'alias_on': p.alias_on, 'alias_off': p.alias_off}) } }); flow.set('points', points_lookup) \n\nvar pts = msg.payload\nvar points_lookup = {}\npts.forEach(function(p){\n    \n    if (points_lookup[p.reg_name]) {\n      points_lookup[p.reg_name].points.push({'bit': parseInt(p.bit), 'name': p.point_name, 'alias_on': p.alias_on, 'alias_off': p.alias_off, 'parse': p.parse})\n    } else {\n      points_lookup[p.reg_name] = {}\n      points_lookup[p.reg_name].name = p.reg_name\n      points_lookup[p.reg_name].parse = p.parse\n      points_lookup[p.reg_name].group = p.group\n      points_lookup[p.reg_name].quantity = p.quantity\n      points_lookup[p.reg_name].address = parseInt(p.reg_address)\n      points_lookup[p.reg_name].points = []\n      points_lookup[p.reg_name].points.push({'bit': parseInt(p.bit), 'name': p.point_name, 'alias_on': p.alias_on, 'alias_off': p.alias_off})\n    } \n});\n\nflow.set('points', points_lookup)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 259.2,
        "wires": [
            []
        ]
    },
    {
        "id": "5eb12a7.27ed2d4",
        "type": "sms",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "customer alerts",
        "message": "",
        "numbers": "",
        "throttle": "5000",
        "twilio": "",
        "x": 2110,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "26a0550e.10c0ba",
        "type": "sms",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "SCADA Tech Twilio",
        "message": "",
        "numbers": "",
        "throttle": "5000",
        "twilio": "",
        "x": 2120,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f9483d84.1557b",
        "type": "modbus-flex-getter",
        "z": "b85317fd.d210f8",
        "g": "06984437f42dc90f",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "x": 1285,
        "y": 358.4,
        "wires": [
            [
                "10a91d231dbb6c45"
            ],
            []
        ]
    },
    {
        "id": "a0f1a5c8.953598",
        "type": "modbus-write",
        "z": "b85317fd.d210f8",
        "g": "6ce8ee2e1bee7658",
        "name": "Set/Reset Alarm Bit 0",
        "showStatusActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "50",
        "quantity": "1",
        "server": "",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1370,
        "y": 652.8,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b60417d1.1799c8",
        "type": "moment",
        "z": "b85317fd.d210f8",
        "g": "c922fdd64185d453",
        "name": "Inject timeStamp",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "MM/DD/YY hh:mm A",
        "locale": "POSIX",
        "output": "timeStamp",
        "outputType": "msg",
        "outTz": "America/Chicago",
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "52b4cee1.5db81"
            ]
        ]
    },
    {
        "id": "a1faa439.d863c8",
        "type": "moment",
        "z": "b85317fd.d210f8",
        "g": "d64a04f5415c9100",
        "name": "Inject timeStamp",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "MM/DD/YY hh:mm A",
        "locale": "POSIX",
        "output": "timeStamp",
        "outputType": "msg",
        "outTz": "America/Chicago",
        "x": 490,
        "y": 4140,
        "wires": [
            [
                "f550fd1d.dc116"
            ]
        ]
    },
    {
        "id": "4271d079.65ae8",
        "type": "moment",
        "z": "b85317fd.d210f8",
        "g": "06984437f42dc90f",
        "name": "Inject timeStamp",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "MM/DD/YY hh:mm A",
        "locale": "POSIX",
        "output": "timeStamp",
        "outputType": "msg",
        "outTz": "America/Chicago",
        "x": 855,
        "y": 358.4,
        "wires": [
            [
                "ac09b416.996498"
            ]
        ]
    },
    {
        "id": "836e0e10.f5a5e",
        "type": "moment",
        "z": "b85317fd.d210f8",
        "g": "eba090c28ae5aca2",
        "name": "inject time",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "x",
        "locale": "POSIX",
        "output": "timeStamp",
        "outputType": "msg",
        "outTz": "America/Chicago",
        "x": 1770,
        "y": 140,
        "wires": [
            [
                "5e2dafa7.4cf2a"
            ]
        ]
    },
    {
        "id": "d81dfd16.3de66",
        "type": "cron",
        "z": "b85317fd.d210f8",
        "g": "59688b15fc5c84db",
        "name": "3min cron",
        "crontab": "0 */3 * * * *",
        "x": 300,
        "y": 400,
        "wires": [
            [
                "fcd770a9a9243640"
            ]
        ]
    },
    {
        "id": "776ab548.8115fc",
        "type": "cron",
        "z": "b85317fd.d210f8",
        "g": "59688b15fc5c84db",
        "name": "3sec cron",
        "crontab": "*/3 * * * * *",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "54450e6bb280ffca"
            ]
        ]
    },
    {
        "id": "56ff9dce.fd5a64",
        "type": "fastcsv",
        "z": "b85317fd.d210f8",
        "g": "6da7c391d0d66ed5",
        "name": "fastcsv",
        "headers": true,
        "headerstr": "",
        "ignoreEmpty": true,
        "discardUnmappedColumns": true,
        "strictColumnHandling": false,
        "delimiter": ",",
        "quote": "\"",
        "escape": "\"",
        "comment": "#",
        "ltrim": false,
        "rtrim": false,
        "rowDelimiter": "\\n",
        "includeEndRowDelimiter": false,
        "quoteHeaders": false,
        "quoteColumns": false,
        "x": 1130,
        "y": 259.2,
        "wires": [
            [
                "68303bc2.c6e234"
            ]
        ]
    },
    {
        "id": "35295e9d.977902",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "58eddbe133f3fd8e",
        "name": "call tst",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 971.4285714285713,
        "wires": [
            [
                "dfb59801.564ef8"
            ]
        ]
    },
    {
        "id": "e8eef4bd.d4abd8",
        "type": "function-npm",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "func": "//node.error(\"MESSAGE IN CALL\") node.error(msg) var ack = flow.get('alarmAcked')||false if(!ack || msg.reset) { if(msg.reset) { flow.set('alarmAcked', false) } var twilio = global.get('twilio') const accountSid = 'ACd3d1e28d6055eac9af7579cbe9b2df67'; const authToken = 'a1de8f81bff3964a68b73ecc8f4aa84e'; const client = require('twilio')(accountSid, authToken); var users = flow.get('alarmContacts') var nums = Object.keys(users) var numIndex = flow.get('numIndex')||0 if(numIndex >= nums.length) { numIndex = 0 } else if(msg.reset) { numIndex = 0 } node.error(numIndex) var to = nums[numIndex] node.error(\"ALARM CALL NOW\") node.error(to) numIndex = numIndex + 1 flow.set('numIndex', numIndex) client.calls .create({ url: 'http://longpipe-mag.scadadevs.com/call_answered', to: to, from: \"+14323484419\" }) .then(call => node.error(call.sid)) .done(node.error); return {'payload': 0} } \n\nnode.error(\"MESSAGE IN CALL\")\nnode.error(msg)\nvar ack = flow.get('alarmAcked')||false\nif(!ack || msg.reset) {\n    if(msg.reset) {\n        flow.set('alarmAcked', false)\n    }\nvar twilio = global.get('twilio')\nconst accountSid = 'ACd3d1e28d6055eac9af7579cbe9b2df67';\nconst authToken = 'a1de8f81bff3964a68b73ecc8f4aa84e';\nconst client = require('twilio')(accountSid, authToken);\n\nvar users = flow.get('alarmContacts')  \nvar nums = Object.keys(users)\nvar numIndex = flow.get('numIndex')||0\n\nif(numIndex >= nums.length) {\n    numIndex = 0\n} else if(msg.reset) {\n    numIndex = 0\n}\nnode.error(numIndex)\nvar to = nums[numIndex]\nnode.error(\"ALARM CALL NOW\")\nnode.error(to)\nnumIndex = numIndex + 1\nflow.set('numIndex', numIndex)\n\nclient.calls\n      .create({\n         url: 'http://longpipe-mag.scadadevs.com/call_answered',\n         to: to,\n         from: \"+14323484419\"\n\n      })\n      .then(call => node.error(call.sid))\n      .done(node.error);\n      \n      \nreturn {'payload': 0}\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 760,
        "wires": [
            [
                "266a2cbe.255004"
            ]
        ]
    },
    {
        "id": "dfb59801.564ef8",
        "type": "function-npm",
        "z": "b85317fd.d210f8",
        "g": "58eddbe133f3fd8e",
        "name": "test callout",
        "func": "//var voiceMsg = \"Hello. There are active alarms at location. Big. Long. Pipe. line midstream \" + \" Active. pennetration pressure low.\" + \". Press any key to acknowledge the alarm.\" flow.set(\"voiceMsg\", voiceMsg) var msg = {\"payload\": voiceMsg, 'reset': true} return msg;\n\n\nvar voiceMsg = \"Hello. There are active alarms at location\"\nvoiceMsg += \"Big. Long. Pipe. line midstream \" \nvoiceMsg += \" Active. pennetration pressure low.\" \nvoiceMsg += \". Press any key to acknowledge the alarm.\"\nflow.set(\"voiceMsg\", voiceMsg)\nmsg = {\"payload\": voiceMsg, 'reset': true}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 971.4285714285713,
        "wires": [
            [
                "398fbb503690357f"
            ]
        ]
    },
    {
        "id": "222382fc.6250de",
        "type": "ui_chart",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "name": "",
        "group": "c870e4f4.c54aa8",
        "order": 1,
        "width": "11",
        "height": "9",
        "label": "{{msg.site}} Tank Levels",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "11",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#169258",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1970,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "b2a3c2a0.5e4cb",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "name": "Dashboard Update",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "40",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1340,
        "wires": [
            [
                "71ef2a88.0ffd74"
            ]
        ]
    },
    {
        "id": "8f7c2e96.89d55",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "Setpoint Values",
        "func": "//var lact1 = flow.get('Setpoints') // var reA = /[^a-zA-Z]/g; // var reN = /[^0-9]/g; // function sortAlphaNum(a, b) { // var aA = Object.keys(a)[0].replace(reA, \"\"); // var bA = Object.keys(b)[0].replace(reA, \"\"); // if (aA === bA) { // var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10); // var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10); // return aN === bN ? 0 : aN > bN ? 1 : -1; // } else { // return aA > bA ? 1 : -1; // } // } function naturalSorter(as, bs){ var a, b, a1, b1, i= 0, n, L, rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g; if(as=== bs) return 0; a= as.toLowerCase().match(rx); b= bs.toLowerCase().match(rx); L= a.length; while(i<L){ if(!b[i]) return 1; a1= a[i], b1= b[i++]; if(a1!== b1){ n= a1-b1; if(!isNaN(n)) return n; return a1>b1? 1:-1; } } return b[i]? -1:0; } lact1.sort(function(o1, o2) { return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]); }); var msgs = [] lact1.forEach(function(o){ var n = Object.keys(o)[0] msgs.push({'topic': n, 'payload': o[n]}) }); return msgs\n\nvar lact1 = flow.get('Setpoints')\n\n// var reA = /[^a-zA-Z]/g;\n// var reN = /[^0-9]/g;\n\n// function sortAlphaNum(a, b) {\n//   var aA = Object.keys(a)[0].replace(reA, \"\");\n//   var bA = Object.keys(b)[0].replace(reA, \"\");\n//   if (aA === bA) {\n//     var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10);\n//     var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10);\n//     return aN === bN ? 0 : aN > bN ? 1 : -1;\n//   } else {\n//     return aA > bA ? 1 : -1;\n//   }\n// }\n\nfunction naturalSorter(as, bs){\n    var a, b, a1, b1, i= 0, n, L,\n    rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g;\n    if(as===bs) return 0;\n    a= as.toLowerCase().match(rx);\n    b= bs.toLowerCase().match(rx);\n    L= a.length;\n    while(i<L){\n        if(!b[i]) return 1;\n        a1= a[i],\n        b1= b[i++];\n        if(a1!== b1){\n            n= a1-b1;\n            if(!isNaN(n)) return n;\n            return a1>b1? 1:-1;\n        }\n    }\n    return b[i]? -1:0;\n}\n\n\nlact1.sort(function(o1, o2) {\n    return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]);\n});\n\nvar msgs = []\nlact1.forEach(function(o){\n    var n = Object.keys(o)[0]\n    msgs.push({'topic': n, 'payload': o[n]}) \n});\nreturn msgs",
        "outputs": 16,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1560,
        "wires": [
            [
                "9699d993.93d4a8",
                "a8b5274e1abca354"
            ],
            [
                "9699d993.93d4a8",
                "6652d2e7403e0e35"
            ],
            [
                "9699d993.93d4a8",
                "9ae5b08c6e24a33f"
            ],
            [
                "9699d993.93d4a8",
                "cadf5bd0a132c6ef"
            ],
            [
                "9699d993.93d4a8",
                "9b68bbb1d9944cad"
            ],
            [
                "9699d993.93d4a8",
                "27b03b8e6d3332c0"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "276e73f1.a0cefc",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "bc3c6213dc365e4f",
        "name": "Levels",
        "func": "//var site = flow.get('mqtopic') var status = flow.get('Status') var status1 = flow.get('Levels') function naturalSorter(as, bs){ var a, b, a1, b1, i= 0, n, L, rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g; if(as=== bs) return 0; a= as.toLowerCase().match(rx); b= bs.toLowerCase().match(rx); L= a.length; while(i<L){ if(!b[i]) return 1; a1= a[i], b1= b[i++]; if(a1!== b1){ n= a1-b1; if(!isNaN(n)) return n; return a1>b1? 1:-1; } } return b[i]? -1:0; } var arr = status arr.sort(function(o1, o2) { return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]); }); arr = status1.concat(arr) var msgs = [] arr.forEach(function(o){ var n = Object.keys(o)[0] if (o[n].constructor == Number) { msgs.push({'topic': n, 'payload': o[n]}) } else { msgs.push({'topic': n, 'payload': o[n]}) } }); msg.measurements = \"tanklevel\" msg.site = site return msgs\n\nvar site = flow.get('mqtopic')\nvar status = flow.get('Status')\nvar status1 = flow.get('Levels')\nfunction naturalSorter(as, bs){\n    var a, b, a1, b1, i= 0, n, L,\n    rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g;\n    if(as=== bs) return 0;\n    a= as.toLowerCase().match(rx);\n    b= bs.toLowerCase().match(rx);\n    L= a.length;\n    while(i<L){\n        if(!b[i]) return 1;\n        a1= a[i],\n        b1= b[i++];\n        if(a1!== b1){\n            n= a1-b1;\n            if(!isNaN(n)) return n;\n            return a1>b1? 1:-1;\n        }\n    }\n    return b[i]? -1:0;\n}\n\nvar arr = status\n\narr.sort(function(o1, o2) {\n    return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]);\n});\n\narr = status1.concat(arr)\n\nvar msgs = []\narr.forEach(function(o){\n    var n = Object.keys(o)[0]\n    if (o[n].constructor == Number) {\n        msgs.push({'topic': n, 'payload': o[n]})     \n    } else {\n        msgs.push({'topic': n, 'payload': o[n]}) \n    }\n    \n});\nmsg.measurements = \"tanklevel\"\nmsg.site = site\nreturn msgs",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1860,
        "wires": [
            [
                "46b12033.cf537",
                "284211e2761593a3"
            ],
            [
                "46b12033.cf537",
                "97e9348cb7a044a6"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "d9b0e8e3.6c1218",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "Alarm Values",
        "func": "//var status = flow.get('Alarms') function naturalSorter(as, bs){ var a, b, a1, b1, i= 0, n, L, rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g; if(as=== bs) return 0; a= as.toLowerCase().match(rx); b= bs.toLowerCase().match(rx); L= a.length; while(i<L){ if(!b[i]) return 1; a1= a[i], b1= b[i++]; if(a1!== b1){ n= a1-b1; if(!isNaN(n)) return n; return a1>b1? 1:-1; } } return b[i]? -1:0; } status.sort(function(o1, o2) { return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]); }); var msgs = [] status.forEach(function(o){ var n = Object.keys(o)[0] msgs.push({'topic': n, 'payload': o[n]}) }); return msgs\n\nvar status = flow.get('Alarms')\n\nfunction naturalSorter(as, bs){\n    var a, b, a1, b1, i= 0, n, L,\n    rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g;\n    if(as=== bs) return 0;\n    a= as.toLowerCase().match(rx);\n    b= bs.toLowerCase().match(rx);\n    L= a.length;\n    while(i<L){\n        if(!b[i]) return 1;\n        a1= a[i],\n        b1= b[i++];\n        if(a1!== b1){\n            n= a1-b1;\n            if(!isNaN(n)) return n;\n            return a1>b1? 1:-1;\n        }\n    }\n    return b[i]? -1:0;\n}\n\n\nstatus.sort(function(o1, o2) {\n    return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]);\n});\n\nvar msgs = []\nstatus.forEach(function(o){\n    var n = Object.keys(o)[0]\n    msgs.push({'topic': n, 'payload': o[n]}) \n});\nreturn msgs",
        "outputs": 24,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 3200,
        "wires": [
            [
                "5c7abb22.74e744",
                "5e5b754a4ae4669c"
            ],
            [
                "5c7abb22.74e744",
                "30360c7846e4eef2"
            ],
            [
                "5c7abb22.74e744",
                "2836fe5f5a9433ed"
            ],
            [
                "5c7abb22.74e744",
                "e9d9cfb0c96689c9"
            ],
            [
                "5c7abb22.74e744",
                "0afb0b1fac47c409"
            ],
            [
                "5c7abb22.74e744"
            ],
            [
                "5c7abb22.74e744",
                "a40480fd923b4665"
            ],
            [
                "5c7abb22.74e744",
                "96f5e4df031a1ab2"
            ],
            [
                "5c7abb22.74e744",
                "9825fb911bb45260"
            ],
            [
                "5c7abb22.74e744",
                "406d270152d15332"
            ],
            [
                "5c7abb22.74e744",
                "6f621ac004584f2d"
            ],
            [
                "5c7abb22.74e744",
                "799f5ebabe12024c"
            ],
            [
                "5c7abb22.74e744",
                "4d898f6b81897e58"
            ],
            [
                "5c7abb22.74e744",
                "13fe9e158dd3dcca"
            ],
            [
                "5c7abb22.74e744",
                "0b5553aa4e3a78a9"
            ],
            [
                "5c7abb22.74e744",
                "dce38ee1225239c7"
            ],
            [
                "5c7abb22.74e744"
            ],
            [
                "5c7abb22.74e744",
                "2ac74fb9f53557fa"
            ],
            [
                "5c7abb22.74e744",
                "2cb57cce7129311b"
            ],
            [
                "5c7abb22.74e744",
                "b3a3ccc4d4fed124"
            ],
            [
                "881f975828e9be85"
            ],
            [
                "36dec759085a255c"
            ],
            [
                "38b4684888f5dc4e"
            ],
            [
                "97e6dc9ff8221ae0"
            ]
        ]
    },
    {
        "id": "982d94ce.4eb368",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "CLEAR LEVELS AND ALARMS",
        "func": "flow.set(\"Levels\", undefined) \nflow.set(\"Alarms\", undefined) ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "2f9bcedc.dd8862",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "d3e67b58f47aee3d",
        "name": "ts",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1160,
        "wires": [
            [
                "982d94ce.4eb368"
            ]
        ]
    },
    {
        "id": "d5f5eac4.b1e018",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "3595b63b79c9bd12",
        "name": "Total Values",
        "func": "//var lact1 = flow.get('Total') // var reA = /[^a-zA-Z]/g; // var reN = /[^0-9]/g; // function sortAlphaNum(a, b) { // var aA = Object.keys(a)[0].replace(reA, \"\"); // var bA = Object.keys(b)[0].replace(reA, \"\"); // if (aA === bA) { // var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10); // var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10); // return aN === bN ? 0 : aN > bN ? 1 : -1; // } else { // return aA > bA ? 1 : -1; // } // } function naturalSorter(as, bs){ var a, b, a1, b1, i= 0, n, L, rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g; if(as=== bs) return 0; a= as.toLowerCase().match(rx); b= bs.toLowerCase().match(rx); L= a.length; while(i<L){ if(!b[i]) return 1; a1= a[i], b1= b[i++]; if(a1!== b1){ n= a1-b1; if(!isNaN(n)) return n; return a1>b1? 1:-1; } } return b[i]? -1:0; } lact1.sort(function(o1, o2) { return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]); }); var msgs = [] lact1.forEach(function(o){ var n = Object.keys(o)[0] msgs.push({'topic': n, 'payload': o[n]}) }); return msgs\n\nvar lact1 = flow.get('Total')\n\n// var reA = /[^a-zA-Z]/g;\n// var reN = /[^0-9]/g;\n\n// function sortAlphaNum(a, b) {\n//   var aA = Object.keys(a)[0].replace(reA, \"\");\n//   var bA = Object.keys(b)[0].replace(reA, \"\");\n//   if (aA === bA) {\n//     var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10);\n//     var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10);\n//     return aN === bN ? 0 : aN > bN ? 1 : -1;\n//   } else {\n//     return aA > bA ? 1 : -1;\n//   }\n// }\n\nfunction naturalSorter(as, bs){\n    var a, b, a1, b1, i= 0, n, L,\n    rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g;\n    if(as=== bs) return 0;\n    a= as.toLowerCase().match(rx);\n    b= bs.toLowerCase().match(rx);\n    L= a.length;\n    while(i<L){\n        if(!b[i]) return 1;\n        a1= a[i],\n        b1= b[i++];\n        if(a1!== b1){\n            n= a1-b1;\n            if(!isNaN(n)) return n;\n            return a1>b1? 1:-1;\n        }\n    }\n    return b[i]? -1:0;\n}\n\n\nlact1.sort(function(o1, o2) {\n    return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]);\n});\n\nvar msgs = []\nlact1.forEach(function(o){\n    var n = Object.keys(o)[0]\n    msgs.push({'topic': n, 'payload': o[n]}) \n});\nreturn msgs",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2460,
        "wires": [
            [
                "c077d794.6a4d78",
                "80f0ada24ba5fee6"
            ],
            [
                "c077d794.6a4d78",
                "8fe8feb113295da9"
            ],
            [],
            []
        ]
    },
    {
        "id": "feb9beb.fb9a44",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3000,
        "wires": [
            [
                "cc9e6b2b.e034a8"
            ]
        ]
    },
    {
        "id": "85f6c17f.b7c5",
        "type": "influxdb out",
        "z": "b85317fd.d210f8",
        "g": "3b36e4354c9ce7a2",
        "influxdb": "",
        "name": "",
        "measurement": "",
        "precision": "ms",
        "retentionPolicy": "",
        "x": 1560,
        "y": 3860,
        "wires": []
    },
    {
        "id": "d2f53522.66e3d8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "Status Values",
        "func": "//var status = flow.get('Status') var status1 = flow.get('Levels') function naturalSorter(as, bs){ var a, b, a1, b1, i= 0, n, L, rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g; if(as=== bs) return 0; a= as.toLowerCase().match(rx); b= bs.toLowerCase().match(rx); L= a.length; while(i<L){ if(!b[i]) return 1; a1= a[i], b1= b[i++]; if(a1!== b1){ n= a1-b1; if(!isNaN(n)) return n; return a1>b1? 1:-1; } } return b[i]? -1:0; } var arr = status arr.sort(function(o1, o2) { return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]); }); arr = status1.concat(arr) var msgs = [] arr.forEach(function(o){ var n = Object.keys(o)[0] if (o[n].constructor == Number) { msgs.push({'topic': n, 'payload': o[n]}) } else { msgs.push({'topic': n, 'payload': o[n]}) } }); return msgs\n\n\nvar status = flow.get('Status')\nvar status1 = flow.get('Levels')\nfunction naturalSorter(as, bs){\n    var a, b, a1, b1, i= 0, n, L,\n    rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g;\n    if(as=== bs) return 0;\n    a= as.toLowerCase().match(rx);\n    b= bs.toLowerCase().match(rx);\n    L= a.length;\n    while(i<L){\n        if(!b[i]) return 1;\n        a1= a[i],\n        b1= b[i++];\n        if(a1!== b1){\n            n= a1-b1;\n            if(!isNaN(n)) return n;\n            return a1>b1? 1:-1;\n        }\n    }\n    return b[i]? -1:0;\n}\n\nvar arr = status\n\narr.sort(function(o1, o2) {\n    return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]);\n});\n\narr = status1.concat(arr)\n\nvar msgs = []\narr.forEach(function(o){\n    var n = Object.keys(o)[0]\n    if (o[n].constructor == Number) {\n        msgs.push({'topic': n, 'payload': o[n]})     \n    } else {\n        msgs.push({'topic': n, 'payload': o[n]}) \n    }\n    \n});\nreturn msg",
        "outputs": 18,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2160,
        "wires": [
            [],
            [],
            [
                "eb6fa914.5b89e8",
                "5e6ae2e91d50a9a6"
            ],
            [
                "eb6fa914.5b89e8",
                "e6313b41ff123d71"
            ],
            [
                "eb6fa914.5b89e8",
                "e94e349e74d3e364"
            ],
            [
                "eb6fa914.5b89e8",
                "014c8788401cd6da"
            ],
            [
                "eb6fa914.5b89e8",
                "ad93da2a63649bb8"
            ],
            [
                "eb6fa914.5b89e8",
                "0324396004ed7c52"
            ],
            [
                "eb6fa914.5b89e8",
                "1b9114fdf5aca82f"
            ],
            [
                "eb6fa914.5b89e8",
                "e7efcb4b98f398a3"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "4ebf7234.2a9c3c",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "lact1_text3",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2021.5,
        "wires": []
    },
    {
        "id": "79cfefcb.91fde",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "lact1_text4",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2041.5,
        "wires": []
    },
    {
        "id": "b74ea700.c4f408",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "lact1_text5",
        "label": "{{msg.topic}} cp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2061.5,
        "wires": []
    },
    {
        "id": "728e9578.ace71c",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "lact1_text6",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2081.5,
        "wires": []
    },
    {
        "id": "8d26b892.40a968",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 15,
        "width": 0,
        "height": 0,
        "name": "lact1_text7",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2101.5,
        "wires": []
    },
    {
        "id": "ca29d06b.38db1",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 17,
        "width": 0,
        "height": 0,
        "name": "lact1_text8",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2121.5,
        "wires": []
    },
    {
        "id": "2a2508db.2a6218",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 18,
        "width": 0,
        "height": 0,
        "name": "lact1_text9",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2141.5,
        "wires": []
    },
    {
        "id": "723d2724.f0e208",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "c870e4f4.c54aa8",
        "order": 19,
        "width": 0,
        "height": 0,
        "name": "lact1_text10",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2009.25,
        "y": 2161.5,
        "wires": []
    },
    {
        "id": "c0850a9.149e2f8",
        "type": "rbe",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 250,
        "y": 3820,
        "wires": [
            [
                "ed417b26.fb25e8"
            ]
        ]
    },
    {
        "id": "ed417b26.fb25e8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "levels",
        "func": "//var modbus = flow.get('modbusStatus') var cust = flow.get('customer') var site = flow.get(\"mqttsite\") var t = 0 var now = new Date(); if(msg.topic.indexOf(\"1\") > -1){ t = 01 } if(msg.topic.indexOf(\"2\") > -1){ t = 02 } msg.payload = [{ feet: msg.payload, time: now }, { tank: t, customer:cust, location:site }]; msg.measurement = \"tanklevel\" if (modbus == 'active'){ return msg;} else { }\n\nvar modbus = flow.get('modbusStatus')\nvar cust = flow.get('customer')\nvar site = flow.get(\"mqttsite\")\nvar t = 0\nvar now = new Date();\nif(msg.topic.indexOf(\"1\") > -1){\n    t = 01\n}\nif(msg.topic.indexOf(\"2\") > -1){\n    t = 02\n} \nmsg.payload = [{\n    feet: msg.payload,\n    time: now\n},\n{\n    tank: t,\n    customer:cust,\n    location:site\n}];\nmsg.measurement = \"tanklevel\"\n\nif (modbus == 'active'){\n    return msg;}\nelse {\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3820,
        "wires": [
            [
                "8f6ba7d8.c9d008"
            ]
        ]
    },
    {
        "id": "87d590cd.b1c22",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "status values",
        "func": "//var modbus = flow.get('modbusStatus') var cust = flow.get('customer') var site = flow.get(\"mqttsite\") var t = 0 var now = new Date(); //if(msg.topic.indexOf(\"1\") > -1){ // t = 01 //} //if(msg.topic.indexOf(\"2\") > -1){ // t = 02 //} msg.payload = [{ status: msg.payload, time: now }, { valueName: msg.topic, customer:cust, location:site }]; msg.measurement = \"statusValues\" if (modbus == 'active'){ return msg;} else { }\n\nvar modbus = flow.get('modbusStatus')\nvar cust = flow.get('customer')\nvar site = flow.get(\"mqttsite\")\nvar t = 0\nvar now = new Date();\n//if(msg.topic.indexOf(\"1\") > -1){\n//    t = 01\n//}\n//if(msg.topic.indexOf(\"2\") > -1){\n//   t = 02\n//} \nmsg.payload = [{\n    status: msg.payload,\n    time: now\n},\n{\n    valueName: msg.topic, \n    customer:cust,\n    location:site\n}];\nmsg.measurement = \"statusValues\"\n\nif (modbus == 'active'){\n    return msg;}\nelse {\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 3860,
        "wires": [
            [
                "ea0a36a6.178c68"
            ]
        ]
    },
    {
        "id": "1898b4e5.003c0b",
        "type": "rbe",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 250,
        "y": 3860,
        "wires": [
            [
                "87d590cd.b1c22"
            ]
        ]
    },
    {
        "id": "ffaf3ec1.c4fb5",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "func": "var modbus = flow.get('modbusStatus') \nvar cust = flow.get('customer') \nvar site = flow.get(\"mqttsite\") \nvar t = 0 \nvar now = new Date(); \n//if(msg.topic.indexOf(\"1\") > -1){ // t = 01 //} \n//if(msg.topic.indexOf(\"2\") > -1){ // t = 02 //} \nmsg.payload = [{ status: msg.payload, time: now }, { valueName: msg.topic, customer:cust, location:site }];\nmsg.measurement = \"alarmValues\" \nif (modbus == 'active'){ \n    return msg;\n    \n} else { \n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 3940,
        "wires": [
            [
                "5c584f0e.11dca"
            ]
        ]
    },
    {
        "id": "64b28107.a63e8",
        "type": "rbe",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 250,
        "y": 3940,
        "wires": [
            [
                "ffaf3ec1.c4fb5"
            ]
        ]
    },
    {
        "id": "67c11bfa.521234",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "setpoint values",
        "func": "var modbus = flow.get('modbusStatus')\nvar cust = flow.get('customer')\nvar site = flow.get(\"mqttsite\")\nvar t = 0.0\nvar now = new Date();\n\nif (msg.payload === '0'){\n    msg.payload = t \n}\nmsg.payload = [{\n    status: msg.payload,\n    time: now\n},\n{\n    valueName: msg.topic, \n    customer:cust,\n    location:site\n}];\nmsg.measurement = \"setpointValues\"\n\nif (modbus == 'active'){\n    return msg;}\nelse {}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 3780,
        "wires": [
            [
                "6501d850.455b28"
            ]
        ],
        "info": "\n*********************************************************\n ______   ______  | \n/\\  ___\\ /\\__  _\\ | Copyright  \n\\ \\___  \\\\/_/\\ \\/ | Sean Terrell  \n \\/\\_____\\  \\ \\_\\ | FlowForge \n  \\/_____/   \\/_/ | \n*********************************************************"
    },
    {
        "id": "5547fead.1383e",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "func": "var modbus = flow.get('modbusStatus') \nvar cust = flow.get('customer') \nvar site = flow.get(\"mqttsite\") \nvar t = 0 \nvar now = new Date(); \n//if(msg.topic.indexOf(\"1\") > -1){ // t = 01 //} \n//if(msg.topic.indexOf(\"2\") > -1){ // t = 02 //}\nmsg.payload = [{ value: msg.payload, time: now }, { valueName: msg.topic, customer:cust, location:site }]; \nmsg.measurement = \"flowValues\" \nif (modbus == 'active'){ return msg;} else { }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 3900,
        "wires": [
            [
                "30e50eab.d875a2"
            ]
        ]
    },
    {
        "id": "8b41cf74.03251",
        "type": "rbe",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 250,
        "y": 3900,
        "wires": [
            [
                "5547fead.1383e"
            ]
        ]
    },
    {
        "id": "d44d0e14.c254c",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "sp in",
        "links": [
            "9699d993.93d4a8"
        ],
        "x": 105,
        "y": 3780,
        "wires": [
            [
                "67c11bfa.521234"
            ]
        ]
    },
    {
        "id": "9699d993.93d4a8",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "setpoints out",
        "links": [
            "d44d0e14.c254c",
            "6d596863.dd9e28"
        ],
        "x": 305,
        "y": 1700,
        "wires": []
    },
    {
        "id": "6501d850.455b28",
        "type": "rbe",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 470,
        "y": 3780,
        "wires": [
            [
                "55260d28.3f9f34"
            ]
        ]
    },
    {
        "id": "ac5a58bf.d7e708",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "df76d03756526c49",
        "name": "pressure Values",
        "func": "//var lact1 = flow.get('Pressure') // var reA = /[^a-zA-Z]/g; // var reN = /[^0-9]/g; // function sortAlphaNum(a, b) { // var aA = Object.keys(a)[0].replace(reA, \"\"); // var bA = Object.keys(b)[0].replace(reA, \"\"); // if (aA === bA) { // var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10); // var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10); // return aN === bN ? 0 : aN > bN ? 1 : -1; // } else { // return aA > bA ? 1 : -1; // } // } function naturalSorter(as, bs){ var a, b, a1, b1, i= 0, n, L, rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g; if(as=== bs) return 0; a= as.toLowerCase().match(rx); b= bs.toLowerCase().match(rx); L= a.length; while(i<L){ if(!b[i]) return 1; a1= a[i], b1= b[i++]; if(a1!== b1){ n= a1-b1; if(!isNaN(n)) return n; return a1>b1? 1:-1; } } return b[i]? -1:0; } lact1.sort(function(o1, o2) { return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]); }); var msgs = [] lact1.forEach(function(o){ var n = Object.keys(o)[0] msgs.push({'topic': n, 'payload': o[n]}) }); return msgs\n\nvar lact1 = flow.get('Pressure')\n\n// var reA = /[^a-zA-Z]/g;\n// var reN = /[^0-9]/g;\n\n// function sortAlphaNum(a, b) {\n//   var aA = Object.keys(a)[0].replace(reA, \"\");\n//   var bA = Object.keys(b)[0].replace(reA, \"\");\n//   if (aA === bA) {\n//     var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10);\n//     var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10);\n//     return aN === bN ? 0 : aN > bN ? 1 : -1;\n//   } else {\n//     return aA > bA ? 1 : -1;\n//   }\n// }\n\nfunction naturalSorter(as, bs){\n    var a, b, a1, b1, i= 0, n, L,\n    rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g;\n    if(as=== bs) return 0;\n    a= as.toLowerCase().match(rx);\n    b= bs.toLowerCase().match(rx);\n    L= a.length;\n    while(i<L){\n        if(!b[i]) return 1;\n        a1= a[i],\n        b1= b[i++];\n        if(a1!== b1){\n            n= a1-b1;\n            if(!isNaN(n)) return n;\n            return a1>b1? 1:-1;\n        }\n    }\n    return b[i]? -1:0;\n}\n\n\nlact1.sort(function(o1, o2) {\n    return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]);\n});\n\nvar msgs = []\nlact1.forEach(function(o){\n    var n = Object.keys(o)[0]\n    msgs.push({'topic': n, 'payload': o[n]}) \n});\nreturn msgs",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2820,
        "wires": [
            [
                "27fdc543.4ee55a",
                "845b1e0ae44652f1"
            ],
            [
                "27fdc543.4ee55a",
                "60acc09545fae7cf"
            ],
            [],
            []
        ]
    },
    {
        "id": "b8493ce2.6d67e",
        "type": "comment",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "TANK TREND",
        "info": "",
        "x": 330,
        "y": 4620,
        "wires": []
    },
    {
        "id": "b6e8af46.4099c",
        "type": "inject",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "Dashboard Update Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 341.25783920288086,
        "y": 4664.437867164612,
        "wires": [
            [
                "2494ad41.681b12",
                "7b9bbb9f.477ab4",
                "32594716.fb5458",
                "7682d9.3e03ed28"
            ]
        ]
    },
    {
        "id": "166f6e32.878662",
        "type": "comment",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "LOG TANK LEVELS",
        "info": "",
        "x": 310,
        "y": 4700,
        "wires": []
    },
    {
        "id": "77c20baf.137324",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "Weekly Trend All Tanks",
        "func": "var query = \"SELECT name, value, timestamp FROM hannathon_krampf_historian WHERE timestamp > timestamp(now()) * interval '3 days'\" msg.topic = query return msg;",
        "outputs": 1,
        "noerr": 2,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 4720,
        "wires": [
            []
        ]
    },
    {
        "id": "c3386145.672fc",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "Organize Chart Data",
        "func": "// [{ // \"series\": [\"A\", \"B\", \"C\"], // \"data\": [ // [{ \"x\": 1504029632890, \"y\": 5 }, // { \"x\": 1504029636001, \"y\": 4 }, // { \"x\": 1504029638656, \"y\": 2 } // ], // [{ \"x\": 1504029633514, \"y\": 6 }, // { \"x\": 1504029636622, \"y\": 7 }, // { \"x\": 1504029639539, \"y\": 6 } // ], // [{ \"x\": 1504029634400, \"y\": 7 }, // { \"x\": 1504029637959, \"y\": 7 }, // { \"x\": 1504029640317, \"y\": 7 } // ] // ], // \"labels\": [\"\"] // }] const UTC_TO_CST_CONST = 21600 var series = [] var a = msg.payload var records = {} a.forEach(function(o){ if (series.indexOf(o.name) == -1) { series.push(o.name) records[o.name] = [] } var d = new Date((o.timestamp)*1000) records[o.name].push({\"x\": d, \"y\": o.value}) }); // series.sort() // var labels = series var res = {} var data = [] series.forEach(function(s){ data.push(records[s]) }); res.series = series // res.labels = labels res.data = data var result = [res] msg.payload = result node.error(\"REFRESH CHART\") node.error(data) // var TEST = [{ // \"series\": [\"A\", \"B\", \"C\"], // \"data\": [ // [{ \"x\": '2018-02-07T14:33:03.927Z', \"y\": 5 }, // { \"x\": '2018-02-07T14:33:03.927Z', \"y\": 4 }, // { \"x\": '2018-02-07T14:33:03.927Z', \"y\": 2 } // ], // [{ \"x\": '2018-02-07T14:33:03.927Z', \"y\": 6 }, // { \"x\": '2018-02-07T14:33:03.927Z', \"y\": 7 }, // { \"x\": '2018-02-07T14:33:03.927Z', \"y\": 6 } // ], // [{ \"x\": \"2018-03-05T22:27:21.068Z\", \"y\": 7 }, // { \"x\": \"2018-03-05T22:27:21.068Z\", \"y\": 7 }, // { \"x\": \"2018-03-05T22:27:21.068Z\", \"y\": 7 } // ] // ], // \"labels\": [\"\"] // }] // msg.payload = TEST return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 4660,
        "wires": [
            []
        ]
    },
    {
        "id": "7b9bbb9f.477ab4",
        "type": "ui_button",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "Send CSV Report",
        "group": "c870e4f4.c54aa8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Send CSV Report",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 450,
        "y": 4760,
        "wires": [
            [
                "32594716.fb5458",
                "b3d5b11c.78296"
            ]
        ]
    },
    {
        "id": "465bebfe.aa7ee4",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "Organize Chart Data",
        "func": "const UTC_TO_CST_CONST = 21600 var a = msg.payload var records = {} a.forEach(function(o){ var d = new Date((o.timestamp)*1000) if (!records[o.name]) { records[o.name] = \"Value,Time\\n\" } records[o.name] = records[o.name] + o.value + \",\" + d + \"\\n\" records[o.name].push({\"x\": d, \"y\": o.value}) }); node.error(records) var attachments = [] var names = Object.keys(records) names.forEach(function(n){ attachments.push({ filename: n+'.csv', content: records[n], contentType: 'text/plain' }) }); // var today = new Date(); // var dd = today.getDate(); msg.topic = \"Hannathon Krampf Tank Levels Report\" msg.payload = \"CSV Report Generated for Krampf Tank\" msg.attachments = attachments msg.to = flow.get(\"reportEmailAddress\") return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 4760,
        "wires": [
            [
                "b9394fbf.beddd"
            ]
        ]
    },
    {
        "id": "b3d5b11c.78296",
        "type": "ui_text_input",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "Email Address",
        "label": "Email Address",
        "tooltip": "",
        "group": "c870e4f4.c54aa8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 680,
        "y": 4800,
        "wires": [
            [
                "d550c641.e87bc8"
            ]
        ]
    },
    {
        "id": "d550c641.e87bc8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "cahce email",
        "func": "flow.set(\"reportEmailAddress\",msg.payload)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 4800,
        "wires": [
            []
        ]
    },
    {
        "id": "b9394fbf.beddd",
        "type": "debug",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1250,
        "y": 4760,
        "wires": []
    },
    {
        "id": "7682d9.3e03ed28",
        "type": "influxdb in",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "influxdb": "",
        "name": "week",
        "query": "select * from \"tanklevel\" where  time > now() - 1w group by \"tank\"",
        "rawOutput": true,
        "precision": "s",
        "retentionPolicy": "",
        "x": 890,
        "y": 4660,
        "wires": [
            [
                "c3386145.672fc",
                "b9394fbf.beddd"
            ]
        ]
    },
    {
        "id": "32594716.fb5458",
        "type": "influxdb in",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "influxdb": "",
        "name": "weekly",
        "query": "select * from \"tanklevel\" where  time > now() - 1w group by \"tank\"",
        "rawOutput": true,
        "precision": "",
        "retentionPolicy": "",
        "x": 710,
        "y": 4760,
        "wires": [
            [
                "b9394fbf.beddd",
                "465bebfe.aa7ee4"
            ]
        ]
    },
    {
        "id": "71ef2a88.0ffd74",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "name": "",
        "links": [
            "5ca8dc3e.e077f4",
            "59db9ee9.df222",
            "8ba0c31e.1b66",
            "2b756bf2.f148c4",
            "952f6a6c.5ff658",
            "9f4dda42.8fbbc8",
            "206926de.e4acea",
            "f171c21a488d33ac"
        ],
        "x": 415,
        "y": 1340,
        "wires": []
    },
    {
        "id": "5ca8dc3e.e077f4",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "",
        "links": [
            "71ef2a88.0ffd74"
        ],
        "x": 105,
        "y": 1560,
        "wires": [
            [
                "8f7c2e96.89d55"
            ]
        ]
    },
    {
        "id": "59db9ee9.df222",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "3595b63b79c9bd12",
        "name": "",
        "links": [
            "71ef2a88.0ffd74"
        ],
        "x": 125,
        "y": 2460,
        "wires": [
            [
                "d5f5eac4.b1e018"
            ]
        ]
    },
    {
        "id": "8ba0c31e.1b66",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "bc3c6213dc365e4f",
        "name": "",
        "links": [
            "71ef2a88.0ffd74"
        ],
        "x": 145,
        "y": 1860,
        "wires": [
            [
                "276e73f1.a0cefc"
            ]
        ]
    },
    {
        "id": "2b756bf2.f148c4",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "df76d03756526c49",
        "name": "",
        "links": [
            "71ef2a88.0ffd74"
        ],
        "x": 135,
        "y": 2820,
        "wires": [
            [
                "ac5a58bf.d7e708"
            ]
        ]
    },
    {
        "id": "952f6a6c.5ff658",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "",
        "links": [
            "71ef2a88.0ffd74"
        ],
        "x": 95,
        "y": 2160,
        "wires": [
            [
                "d2f53522.66e3d8"
            ]
        ]
    },
    {
        "id": "9f4dda42.8fbbc8",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "links": [
            "71ef2a88.0ffd74"
        ],
        "x": 125,
        "y": 3200,
        "wires": [
            [
                "d9b0e8e3.6c1218"
            ]
        ]
    },
    {
        "id": "c077d794.6a4d78",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "3595b63b79c9bd12",
        "name": "totals",
        "links": [
            "15a0e9c4.7dc6c6"
        ],
        "x": 305,
        "y": 2520,
        "wires": []
    },
    {
        "id": "46b12033.cf537",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "bc3c6213dc365e4f",
        "name": "levels",
        "links": [
            "8fa1592b.6c5ac8"
        ],
        "x": 285,
        "y": 1920,
        "wires": []
    },
    {
        "id": "27fdc543.4ee55a",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "df76d03756526c49",
        "name": "pressure",
        "links": [],
        "x": 325,
        "y": 2880,
        "wires": []
    },
    {
        "id": "eb6fa914.5b89e8",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "271c6294.09d63e"
        ],
        "x": 275,
        "y": 2320,
        "wires": []
    },
    {
        "id": "5c7abb22.74e744",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "alarms",
        "links": [
            "9e0a8759.ce2018"
        ],
        "x": 305,
        "y": 3400,
        "wires": []
    },
    {
        "id": "8fa1592b.6c5ac8",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "46b12033.cf537"
        ],
        "x": 105,
        "y": 3820,
        "wires": [
            [
                "c0850a9.149e2f8"
            ]
        ]
    },
    {
        "id": "6e31aa5d.ff35b4",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "group": "979f1bd5.ce3318",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "lact1_text1",
        "label": "{{msg.topic}}",
        "format": " {{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2090,
        "y": 1480,
        "wires": []
    },
    {
        "id": "ce33d25f.78702",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "group": "979f1bd5.ce3318",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "lact1_text2",
        "label": "{{msg.topic}}",
        "format": " ",
        "layout": "col-center",
        "x": 2090,
        "y": 1500,
        "wires": []
    },
    {
        "id": "aff23c20.30361",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "group": "979f1bd5.ce3318",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "lact1_text3",
        "label": "{{msg.topic}}",
        "format": " ",
        "layout": "col-center",
        "x": 2090,
        "y": 1520,
        "wires": []
    },
    {
        "id": "796a3e31.de573",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "group": "979f1bd5.ce3318",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "lact1_text4",
        "label": "{{msg.topic}}",
        "format": " ",
        "layout": "col-center",
        "x": 2090,
        "y": 1540,
        "wires": []
    },
    {
        "id": "5a020519.dad6bc",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "group": "979f1bd5.ce3318",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "lact1_text5",
        "label": "{{msg.topic}}",
        "format": " ",
        "layout": "col-center",
        "x": 2090,
        "y": 1560,
        "wires": []
    },
    {
        "id": "6dc444c.62013bc",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "group": "979f1bd5.ce3318",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "lact1_text6",
        "label": "{{msg.topic}}",
        "format": " ",
        "layout": "col-center",
        "x": 2090,
        "y": 1580,
        "wires": []
    },
    {
        "id": "4fae6a27.905bc4",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "THH",
        "group": "979f1bd5.ce3318",
        "order": 8,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "16",
        "colors": [
            "#008000",
            "#008000",
            "#008000"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1910,
        "y": 1540,
        "wires": []
    },
    {
        "id": "89bb9d82.0972e",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "TH",
        "group": "979f1bd5.ce3318",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "16",
        "colors": [
            "#008000",
            "#008000",
            "#008000"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1910,
        "y": 1520,
        "wires": []
    },
    {
        "id": "8d731697.3f9118",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "TL",
        "group": "979f1bd5.ce3318",
        "order": 10,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "16",
        "colors": [
            "#008000",
            "#008000",
            "#008000"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1910,
        "y": 1560,
        "wires": []
    },
    {
        "id": "62b86acd.7f0ec4",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "TLL",
        "group": "979f1bd5.ce3318",
        "order": 12,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "16",
        "colors": [
            "#008000",
            "#008000",
            "#008000"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1910,
        "y": 1580,
        "wires": []
    },
    {
        "id": "b2b94ebb.31d0e",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "Suction",
        "group": "979f1bd5.ce3318",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "400",
        "colors": [
            "#008000",
            "#008000",
            "#008000"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1920,
        "y": 1500,
        "wires": []
    },
    {
        "id": "17add590.4185ca",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "Injection",
        "group": "979f1bd5.ce3318",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#008000",
            "#008000",
            "#008000"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1920,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2e18150.e7b05ec",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "fdfde33ff181cd2b",
        "group": "7e8a6750.007f08",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "other_text1",
        "label": "{{msg.topic}}",
        "format": " ",
        "layout": "col-center",
        "x": 2050,
        "y": 2440,
        "wires": []
    },
    {
        "id": "6678e6e7.02f818",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "fdfde33ff181cd2b",
        "group": "7e8a6750.007f08",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "other_text2",
        "label": "{{msg.topic}}",
        "format": " ",
        "layout": "col-center",
        "x": 2050,
        "y": 2460,
        "wires": []
    },
    {
        "id": "588a0678.ce1cf8",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "fdfde33ff181cd2b",
        "name": "TT",
        "group": "7e8a6750.007f08",
        "order": 2,
        "width": "6",
        "height": "7",
        "gtype": "wave",
        "title": "",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "20000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1910,
        "y": 2440,
        "wires": []
    },
    {
        "id": "1c2287f.5fece78",
        "type": "ui_gauge",
        "z": "b85317fd.d210f8",
        "g": "fdfde33ff181cd2b",
        "name": "YT",
        "group": "7e8a6750.007f08",
        "order": 4,
        "width": "6",
        "height": "7",
        "gtype": "donut",
        "title": "",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "20000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1910,
        "y": 2460,
        "wires": []
    },
    {
        "id": "cc9e6b2b.e034a8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "lact1_text1",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "className": "",
        "x": 2130,
        "y": 3000,
        "wires": []
    },
    {
        "id": "87ee2495.dc1488",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "lact1_text2",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "x": 2130,
        "y": 3020,
        "wires": []
    },
    {
        "id": "9b6f4fa0.a2dbb",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "lact1_text3",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "x": 2130,
        "y": 3040,
        "wires": []
    },
    {
        "id": "442f7cb2.180444",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "lact1_text4",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "x": 2130,
        "y": 3060,
        "wires": []
    },
    {
        "id": "7e232743.48d498",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "lact1_text5",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "x": 2130,
        "y": 3080,
        "wires": []
    },
    {
        "id": "7d60ba8f.5c9804",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "lact1_text6",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "x": 2130,
        "y": 3100,
        "wires": []
    },
    {
        "id": "fd5008.7c9b8ff8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "lact1_text7",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "x": 2130,
        "y": 3120,
        "wires": []
    },
    {
        "id": "b8fe5f8b.0e193",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "lact1_text8",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "className": "",
        "x": 2130,
        "y": 3140,
        "wires": []
    },
    {
        "id": "8013760.fcc8488",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "lact1_text9",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "className": "",
        "x": 2130,
        "y": 3160,
        "wires": []
    },
    {
        "id": "e1e69ca2.5171c",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "className": "",
        "x": 1950,
        "y": 3180,
        "wires": []
    },
    {
        "id": "e8820602.e33008",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3200,
        "wires": []
    },
    {
        "id": "f0ed21f3.22929",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3220,
        "wires": []
    },
    {
        "id": "dcdd1789.879bc8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3240,
        "wires": []
    },
    {
        "id": "485459.f09fbba8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3260,
        "wires": []
    },
    {
        "id": "9c249ab.a506168",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3280,
        "wires": []
    },
    {
        "id": "b3fbcd75.2facb",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3300,
        "wires": []
    },
    {
        "id": "698b6ba7.fbd924",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3320,
        "wires": []
    },
    {
        "id": "ac867cee.40e7b",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3340,
        "wires": []
    },
    {
        "id": "b09d86eb.714888",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3360,
        "wires": []
    },
    {
        "id": "8b31492e.ca48c8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "group": "b77c53f.84b19b",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "2",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1950,
        "y": 3380,
        "wires": []
    },
    {
        "id": "8920b965.8fb5e8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "group": "c870e4f4.c54aa8",
        "order": 23,
        "width": 0,
        "height": 0,
        "name": "text1",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1970,
        "y": 1820,
        "wires": []
    },
    {
        "id": "35de6870.6953a8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "group": "c870e4f4.c54aa8",
        "order": 23,
        "width": 0,
        "height": 0,
        "name": "text2",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1970,
        "y": 1860,
        "wires": []
    },
    {
        "id": "bdf16e02.61d18",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "6d854dd836e19c95",
        "group": "6228a403.3b44cc",
        "order": 3,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1970,
        "y": 2800,
        "wires": []
    },
    {
        "id": "d37542b6.e08c8",
        "type": "ui_text",
        "z": "b85317fd.d210f8",
        "g": "6d854dd836e19c95",
        "group": "f972b081.38e9c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1970,
        "y": 2820,
        "wires": []
    },
    {
        "id": "271c6294.09d63e",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "eb6fa914.5b89e8",
            "75c77d85c5a587c2"
        ],
        "x": 105,
        "y": 3860,
        "wires": [
            [
                "1898b4e5.003c0b"
            ]
        ]
    },
    {
        "id": "15a0e9c4.7dc6c6",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "c077d794.6a4d78"
        ],
        "x": 105,
        "y": 3900,
        "wires": [
            [
                "8b41cf74.03251"
            ]
        ]
    },
    {
        "id": "9e0a8759.ce2018",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "5c7abb22.74e744"
        ],
        "x": 105,
        "y": 3940,
        "wires": [
            [
                "64b28107.a63e8"
            ]
        ]
    },
    {
        "id": "3ca4711.bd0ea8e",
        "type": "ui_level",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "group": "3b932dce.ae2c12",
        "order": 1,
        "width": "5",
        "height": "8",
        "name": "",
        "label": "{{msg.topic}}",
        "colorHi": "#e60000",
        "colorWarn": "#ff9900",
        "colorNormal": "#00b33c",
        "colorOff": "#595959",
        "min": 0,
        "max": "16",
        "segWarn": "4",
        "segHigh": "9",
        "unit": "feet",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": "2",
        "animations": "soft",
        "shape": 2,
        "colorschema": "fixed",
        "textoptions": "default",
        "colorText": "#eeeeee",
        "fontLabel": "",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "peaktime": 3000,
        "x": 1970,
        "y": 1800,
        "wires": []
    },
    {
        "id": "e45d527.fc713b",
        "type": "ui_level",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "group": "3b932dce.ae2c12",
        "order": 2,
        "width": "5",
        "height": "8",
        "name": "",
        "label": "{{msg.topic}}",
        "colorHi": "#e60000",
        "colorWarn": "#ff9900",
        "colorNormal": "#00b33c",
        "colorOff": "#595959",
        "min": 0,
        "max": "16",
        "segWarn": "4",
        "segHigh": "9",
        "unit": "feet",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": "2",
        "animations": "soft",
        "shape": 2,
        "colorschema": "fixed",
        "textoptions": "default",
        "colorText": "#eeeeee",
        "fontLabel": "",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 1970,
        "y": 1840,
        "wires": []
    },
    {
        "id": "af466545.e49cf8",
        "type": "ui_statetrail",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "2f266933.275646",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "PD Pump 1",
        "states": [
            {
                "col": "#009933",
                "label": "Running ",
                "state": "Running",
                "t": "str"
            },
            {
                "col": "#999999",
                "label": "Stopped",
                "state": "Stopped ",
                "t": "str"
            }
        ],
        "periodLimit": "24",
        "periodLimitUnit": "3600",
        "timeformat": "HH:mm:ss",
        "tickmarks": "6",
        "persist": true,
        "legend": "3",
        "combine": false,
        "blanklabel": "",
        "x": 1999.25,
        "y": 2221.5,
        "wires": [
            []
        ]
    },
    {
        "id": "9a1b3476.978e38",
        "type": "ui_statetrail",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "f40e111.602d0f",
        "order": 1,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "PD Pump 2",
        "states": [
            {
                "col": "#009933",
                "label": "Running ",
                "state": "Running",
                "t": "str"
            },
            {
                "col": "#ec3636",
                "label": "Stopped",
                "state": "Stopped ",
                "t": "str"
            }
        ],
        "periodLimit": "3",
        "periodLimitUnit": "3600",
        "timeformat": "HH:mm:ss",
        "tickmarks": "6",
        "persist": true,
        "legend": "3",
        "combine": false,
        "blanklabel": "",
        "x": 1999.25,
        "y": 2241.5,
        "wires": [
            []
        ]
    },
    {
        "id": "5b9066de.3eca58",
        "type": "ui_valuetrail",
        "z": "b85317fd.d210f8",
        "g": "6d854dd836e19c95",
        "group": "6228a403.3b44cc",
        "order": 4,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "",
        "unit": "PSI",
        "blur": true,
        "minmax": false,
        "showvalue": true,
        "decimals": "2",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": "5",
        "x": 2080,
        "y": 2800,
        "wires": []
    },
    {
        "id": "66aa194e.dbac48",
        "type": "ui_valuetrail",
        "z": "b85317fd.d210f8",
        "g": "6d854dd836e19c95",
        "group": "f972b081.38e9c",
        "order": 2,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "",
        "unit": "PSI",
        "blur": true,
        "minmax": false,
        "showvalue": true,
        "decimals": "2",
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload",
        "pointcount": 8,
        "x": 2080,
        "y": 2820,
        "wires": []
    },
    {
        "id": "e278a1be.a308b",
        "type": "moment",
        "z": "b85317fd.d210f8",
        "g": "3b36e4354c9ce7a2",
        "name": "inject time",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "x",
        "locale": "POSIX",
        "output": "timeStamp",
        "outputType": "msg",
        "outTz": "Z",
        "x": 1410,
        "y": 3860,
        "wires": [
            [
                "85f6c17f.b7c5"
            ]
        ]
    },
    {
        "id": "2494ad41.681b12",
        "type": "moment",
        "z": "b85317fd.d210f8",
        "g": "bc2dcb3e7b0e250a",
        "name": "",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "en_US",
        "output": "timestamp",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 621.2578392028809,
        "y": 4664.437867164612,
        "wires": [
            [
                "77c20baf.137324"
            ]
        ]
    },
    {
        "id": "55260d28.3f9f34",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "36610690.70db3a"
        ],
        "x": 595,
        "y": 3780,
        "wires": []
    },
    {
        "id": "36610690.70db3a",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "3b36e4354c9ce7a2",
        "name": "",
        "links": [
            "55260d28.3f9f34",
            "8f6ba7d8.c9d008",
            "ea0a36a6.178c68",
            "30e50eab.d875a2",
            "5c584f0e.11dca"
        ],
        "x": 1295,
        "y": 3860,
        "wires": [
            [
                "e278a1be.a308b"
            ]
        ]
    },
    {
        "id": "8f6ba7d8.c9d008",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "36610690.70db3a"
        ],
        "x": 595,
        "y": 3820,
        "wires": []
    },
    {
        "id": "ea0a36a6.178c68",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "36610690.70db3a"
        ],
        "x": 595,
        "y": 3860,
        "wires": []
    },
    {
        "id": "30e50eab.d875a2",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "36610690.70db3a"
        ],
        "x": 595,
        "y": 3900,
        "wires": []
    },
    {
        "id": "5c584f0e.11dca",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "decab09fba30224a",
        "name": "",
        "links": [
            "36610690.70db3a"
        ],
        "x": 595,
        "y": 3940,
        "wires": []
    },
    {
        "id": "6c63a803.d0a508",
        "type": "ui_statetrail",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "a8517d6a.ac2db",
        "order": 1,
        "width": "6",
        "height": "3",
        "name": "",
        "label": "Charge",
        "states": [
            {
                "state": "Running",
                "col": "#009933",
                "t": "str",
                "label": "Running "
            },
            {
                "state": "Stopped ",
                "col": "#999999",
                "t": "str",
                "label": "Stopped"
            }
        ],
        "periodLimit": "12",
        "periodLimitUnit": "3600",
        "timeformat": "HH:mm:ss",
        "tickmarks": "6",
        "persist": true,
        "legend": "3",
        "combine": false,
        "blanklabel": "",
        "x": 1999.25,
        "y": 2201.5,
        "wires": [
            []
        ]
    },
    {
        "id": "68c8f1ec.c26ab",
        "type": "ui_statetrail",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "group": "efc08c0f.1ea4f",
        "order": 1,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "{{msg.topic}}",
        "states": [
            {
                "col": "#009933",
                "label": "Running ",
                "state": "Running",
                "t": "str"
            },
            {
                "col": "#ec3636",
                "label": "Stopped",
                "state": "Stopped ",
                "t": "str"
            }
        ],
        "periodLimit": "3",
        "periodLimitUnit": "3600",
        "timeformat": "HH:mm:ss",
        "tickmarks": "6",
        "persist": true,
        "legend": "3",
        "combine": false,
        "blanklabel": "",
        "x": 1999.25,
        "y": 2261.5,
        "wires": [
            []
        ]
    },
    {
        "id": "a10155e0.393488",
        "type": "influxdb out",
        "z": "b85317fd.d210f8",
        "g": "eba090c28ae5aca2",
        "influxdb": "",
        "name": "hist :ro",
        "measurement": "",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 2090,
        "y": 140,
        "wires": []
    },
    {
        "id": "14ef8d8a.7db982",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "df8942c9d7c6c335",
        "name": "Flow Values",
        "func": "//var lact1 = flow.get('Flow') // var reA = /[^a-zA-Z]/g; // var reN = /[^0-9]/g; // function sortAlphaNum(a, b) { // var aA = Object.keys(a)[0].replace(reA, \"\"); // var bA = Object.keys(b)[0].replace(reA, \"\"); // if (aA === bA) { // var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10); // var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10); // return aN === bN ? 0 : aN > bN ? 1 : -1; // } else { // return aA > bA ? 1 : -1; // } // } function naturalSorter(as, bs){ var a, b, a1, b1, i= 0, n, L, rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g; if(as=== bs) return 0; a= as.toLowerCase().match(rx); b= bs.toLowerCase().match(rx); L= a.length; while(i<L){ if(!b[i]) return 1; a1= a[i], b1= b[i++]; if(a1!== b1){ n= a1-b1; if(!isNaN(n)) return n; return a1>b1? 1:-1; } } return b[i]? -1:0; } lact1.sort(function(o1, o2) { return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]); }); var msgs = [] lact1.forEach(function(o){ var n = Object.keys(o)[0] msgs.push({'topic': n, 'payload': o[n]}) }); return msgs\n\n\nvar lact1 = flow.get('Flow')\n\n// var reA = /[^a-zA-Z]/g;\n// var reN = /[^0-9]/g;\n\n// function sortAlphaNum(a, b) {\n//   var aA = Object.keys(a)[0].replace(reA, \"\");\n//   var bA = Object.keys(b)[0].replace(reA, \"\");\n//   if (aA === bA) {\n//     var aN = parseInt(Object.keys(a)[0].replace(reN, \"\"), 10);\n//     var bN = parseInt(Object.keys(b)[0].replace(reN, \"\"), 10);\n//     return aN === bN ? 0 : aN > bN ? 1 : -1;\n//   } else {\n//     return aA > bA ? 1 : -1;\n//   }\n// }\n\nfunction naturalSorter(as, bs){\n    var a, b, a1, b1, i= 0, n, L,\n    rx=/(\\.\\d+)|(\\d+(\\.\\d+)?)|([^\\d.]+)|(\\.\\D+)|(\\.$)/g;\n    if(as=== bs) return 0;\n    a= as.toLowerCase().match(rx);\n    b= bs.toLowerCase().match(rx);\n    L= a.length;\n    while(i<L){\n        if(!b[i]) return 1;\n        a1= a[i],\n        b1= b[i++];\n        if(a1!== b1){\n            n= a1-b1;\n            if(!isNaN(n)) return n;\n            return a1>b1? 1:-1;\n        }\n    }\n    return b[i]? -1:0;\n}\n\n\nlact1.sort(function(o1, o2) {\n    return naturalSorter(Object.keys(o1)[0], Object.keys(o2)[0]);\n});\n\nvar msgs = []\nlact1.forEach(function(o){\n    var n = Object.keys(o)[0]\n    msgs.push({'topic': n, 'payload': o[n]}) \n});\nreturn msgs",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2660,
        "wires": [
            [
                "6840823ee191abbd"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "206926de.e4acea",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "df8942c9d7c6c335",
        "name": "",
        "links": [
            "71ef2a88.0ffd74"
        ],
        "x": 115,
        "y": 2660,
        "wires": [
            [
                "14ef8d8a.7db982"
            ]
        ]
    },
    {
        "id": "bce38183.5f26a",
        "type": "ui_chart",
        "z": "b85317fd.d210f8",
        "g": "ac905f8eacdfaa65",
        "name": "",
        "group": "187e60b.cb4fa9f",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 2030,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "60e4a5ba.57abdc",
        "type": "ui_button",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "",
        "group": "c884544.46deea8",
        "order": 10,
        "width": "2",
        "height": "1",
        "passthru": true,
        "label": "24 H",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "24",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 550,
        "y": 4400,
        "wires": [
            [
                "71ba5523.f1fecc"
            ]
        ]
    },
    {
        "id": "34bb7d02.a950b2",
        "type": "ui_button",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "",
        "group": "c884544.46deea8",
        "order": 8,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "1 H",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 550,
        "y": 4360,
        "wires": [
            [
                "71ba5523.f1fecc"
            ]
        ]
    },
    {
        "id": "71ba5523.f1fecc",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "SetTimeRange",
        "func": "var p_30d = 1000*60*60*24*30 ; \n//30 Days \nvar p_7d = 1000*60*60*24*7 ; \n//7 Days \nvar p_1d = 1000*60*60*24 ;\n// 1 Day \nvar p_hr = 1000*60*60; \n//1 Hour \nvar d = new Date(); \nvar current = d.getTime();\nmsg.fromdate = \"now-\" + msg.payload +\"h\"; \nmsg.enddate = \"now\"; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 4400,
        "wires": [
            [
                "7fb95ba0.714274"
            ]
        ]
    },
    {
        "id": "c443b502.c13bb8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "SetTimeYesterday",
        "func": "var p_30d = 1000*60*60*24*30 ; \n//30 Days \nvar p_7d = 1000*60*60*24*7 ; \n//7 Days \nvar p_1d = 1000*60*60*24 ; \n// 1 Day \nvar p_hr = 1000*60*60; \n//1 Hour \nvar d = new Date(); \nvar current = d.getTime(); \nvar today0h = d.setHours(0,0,0,0); \n//Timestamp midnight \nmsg.fromdate = today0h - p_1d \nmsg.enddate = today0h\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 4460,
        "wires": [
            [
                "7fb95ba0.714274"
            ]
        ]
    },
    {
        "id": "80c7946a.fb9568",
        "type": "ui_button",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "",
        "group": "c884544.46deea8",
        "order": 11,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Yesterday",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "yesterday",
        "payloadType": "str",
        "topic": "",
        "x": 540,
        "y": 4480,
        "wires": [
            [
                "c443b502.c13bb8"
            ]
        ]
    },
    {
        "id": "432d2210.0f14dc",
        "type": "ui_template",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "group": "c884544.46deea8",
        "name": "Page Got Loaded",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "\n\n<script>\n(function() {\n    (function(scope) {\n        scope.send({payload: \"preload\"}); // this gets sent when the view is opened in the browser\n    })(scope);\n})();\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 350,
        "y": 4400,
        "wires": [
            [
                "60e4a5ba.57abdc"
            ]
        ]
    },
    {
        "id": "f36c5c61.19ab6",
        "type": "ui_template",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "group": "c884544.46deea8",
        "name": "TankLvl",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "\n\n\n<html>\n<iframe id=\"myFrame\" width=\"600px\" height=\"300px\" style = \"overflow:hidden; margin:auto; border:0px solid green;\"></iframe>\n\n<script>\n//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n(function(scope) {\n    // watch msg object from Node-RED\n    scope.$watch('msg', function(msg) {\n        // new message received\n        var x = document.getElementById('myFrame');\n        x.setAttribute('src', msg.payload); \n        });\n})(scope);\n</script>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1160,
        "y": 4400,
        "wires": [
            [
                "a23789a7.17e4b8"
            ]
        ]
    },
    {
        "id": "7fb95ba0.714274",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "BuildTemplate",
        "func": "\n\n\n//NOTE, more then one chart on a page, rename in the second \n//and following templates the \"myframe\" variable so that \n//every template has a unique name.\n\npanelid=10\n\nmsg.payload= \"https://grafana.scada-go.com/d-solo/PJ52or4Gz/hannathon-krampf-swd?orgId=1\"+\n\"&refresh=1m\"+\n\"&theme=dark\"+\n\"&from=\"+ msg.fromdate +\n\"&to=\"+ msg.enddate +\n\"&panelId=\"+panelid\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 4400,
        "wires": [
            [
                "f36c5c61.19ab6"
            ]
        ]
    },
    {
        "id": "80ae3e19.7650e",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "SetTimeTodaySofar",
        "func": "msg.fromdate = \"now/d\"; \nmsg.enddate = \"now\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 4500,
        "wires": [
            [
                "7fb95ba0.714274"
            ]
        ]
    },
    {
        "id": "a38a94b9.979288",
        "type": "ui_button",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "",
        "group": "c884544.46deea8",
        "order": 11,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Today",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "yesterday",
        "payloadType": "str",
        "topic": "",
        "x": 550,
        "y": 4520,
        "wires": [
            [
                "80ae3e19.7650e"
            ]
        ]
    },
    {
        "id": "a23789a7.17e4b8",
        "type": "debug",
        "z": "b85317fd.d210f8",
        "g": "3256f3d20f743958",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 4400,
        "wires": []
    },
    {
        "id": "2286ac5dce57aae6",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "eba090c28ae5aca2",
        "name": "",
        "links": [
            "354611c93850b5f3",
            "3c5f80fa372c5c08"
        ],
        "x": 1655,
        "y": 140,
        "wires": [
            [
                "836e0e10.f5a5e"
            ]
        ]
    },
    {
        "id": "354611c93850b5f3",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "to db",
        "mode": "link",
        "links": [
            "2286ac5dce57aae6"
        ],
        "x": 1390,
        "y": 545.5999999999999,
        "wires": []
    },
    {
        "id": "3c5f80fa372c5c08",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "c922fdd64185d453",
        "name": "",
        "mode": "link",
        "links": [
            "2286ac5dce57aae6",
            "a9934d66d003dfe9"
        ],
        "x": 1465,
        "y": 120,
        "wires": []
    },
    {
        "id": "4929dc09d4ce3353",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "",
        "links": [
            "04d627f9fe12e209"
        ],
        "x": 1655,
        "y": 300,
        "wires": [
            [
                "b8f94385.fd468",
                "e6d8eecf.3b127"
            ]
        ]
    },
    {
        "id": "63fe41cfa5a1d5e0",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "",
        "links": [
            "be63e6ef14c3af79"
        ],
        "x": 1655,
        "y": 260,
        "wires": [
            [
                "bc34f20d.485b8"
            ]
        ]
    },
    {
        "id": "04d627f9fe12e209",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "",
        "mode": "link",
        "links": [
            "4929dc09d4ce3353"
        ],
        "x": 1390,
        "y": 465.59999999999997,
        "wires": []
    },
    {
        "id": "06efecca68f9c439",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "links": [
            "ac2d6aea2348fb53",
            "398fbb503690357f",
            "fcb9360490101464"
        ],
        "x": 795,
        "y": 760,
        "wires": [
            [
                "e8eef4bd.d4abd8"
            ]
        ]
    },
    {
        "id": "ac2d6aea2348fb53",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "",
        "mode": "link",
        "links": [
            "06efecca68f9c439"
        ],
        "x": 1390,
        "y": 505.59999999999997,
        "wires": []
    },
    {
        "id": "be63e6ef14c3af79",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "58eddbe133f3fd8e",
        "name": "",
        "mode": "link",
        "links": [
            "63fe41cfa5a1d5e0"
        ],
        "x": 425,
        "y": 911.4285714285713,
        "wires": []
    },
    {
        "id": "a9934d66d003dfe9",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "dee095830ed30cb2",
        "name": "",
        "links": [
            "3c5f80fa372c5c08"
        ],
        "x": 1655,
        "y": 340,
        "wires": [
            [
                "26a0550e.10c0ba"
            ]
        ]
    },
    {
        "id": "227b14c0436fdaf8",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "c922fdd64185d453",
        "name": "",
        "links": [
            "c8eef8e17b6714ab"
        ],
        "x": 885,
        "y": 160,
        "wires": [
            [
                "b60417d1.1799c8"
            ]
        ]
    },
    {
        "id": "c8eef8e17b6714ab",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "b3265ac240b7ade3",
        "name": "",
        "mode": "link",
        "links": [
            "227b14c0436fdaf8"
        ],
        "x": 425,
        "y": 268.57142857142856,
        "wires": []
    },
    {
        "id": "18ceb04c36ad1b77",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "c922fdd64185d453",
        "name": "",
        "links": [
            "10a91d231dbb6c45"
        ],
        "x": 625,
        "y": 120,
        "wires": [
            [
                "2707fb49.587a84"
            ]
        ]
    },
    {
        "id": "1431912494666899",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "c3bea051f32498d5",
        "name": "",
        "links": [
            "10a91d231dbb6c45"
        ],
        "x": 700,
        "y": 505.59999999999997,
        "wires": [
            [
                "5dda8c17.63bd44"
            ]
        ]
    },
    {
        "id": "10a91d231dbb6c45",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "06984437f42dc90f",
        "name": "",
        "mode": "link",
        "links": [
            "1431912494666899",
            "18ceb04c36ad1b77"
        ],
        "x": 1430,
        "y": 358.4,
        "wires": []
    },
    {
        "id": "0cf18ca28e0e8d06",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "06984437f42dc90f",
        "name": "",
        "links": [
            "54450e6bb280ffca",
            "0f63fcd0baa79913"
        ],
        "x": 660,
        "y": 358.4,
        "wires": [
            [
                "4271d079.65ae8"
            ]
        ]
    },
    {
        "id": "54450e6bb280ffca",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "59688b15fc5c84db",
        "name": "",
        "mode": "link",
        "links": [
            "0cf18ca28e0e8d06",
            "56938ebd5a583666",
            "aa40f44a04082d45"
        ],
        "x": 425,
        "y": 440,
        "wires": []
    },
    {
        "id": "56938ebd5a583666",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "86ea6e018e953b27",
        "name": "",
        "links": [
            "54450e6bb280ffca"
        ],
        "x": 1655,
        "y": 460,
        "wires": [
            [
                "a32c404b.b1508"
            ]
        ]
    },
    {
        "id": "0ba2f66d71b0418f",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "6da7c391d0d66ed5",
        "name": "",
        "links": [
            "fcd770a9a9243640",
            "0f63fcd0baa79913"
        ],
        "x": 735,
        "y": 259.2,
        "wires": [
            [
                "d9e5d3fc.c0bbe"
            ]
        ]
    },
    {
        "id": "fcd770a9a9243640",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "59688b15fc5c84db",
        "name": "",
        "mode": "link",
        "links": [
            "0ba2f66d71b0418f"
        ],
        "x": 425,
        "y": 400,
        "wires": []
    },
    {
        "id": "0f63fcd0baa79913",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "59688b15fc5c84db",
        "name": "",
        "mode": "link",
        "links": [
            "0ba2f66d71b0418f",
            "0cf18ca28e0e8d06"
        ],
        "x": 425,
        "y": 480,
        "wires": []
    },
    {
        "id": "398fbb503690357f",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "58eddbe133f3fd8e",
        "name": "",
        "mode": "link",
        "links": [
            "06efecca68f9c439"
        ],
        "x": 425,
        "y": 971.4285714285713,
        "wires": []
    },
    {
        "id": "0735bbaa317d6c0c",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "dc7b1897e1eca11f",
        "name": "",
        "mode": "link",
        "links": [
            "59fb732fa6a1afc7"
        ],
        "x": 1905,
        "y": 780,
        "wires": []
    },
    {
        "id": "59fb732fa6a1afc7",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "links": [
            "0735bbaa317d6c0c"
        ],
        "x": 795,
        "y": 840,
        "wires": [
            [
                "9e81343a.ab8438"
            ]
        ]
    },
    {
        "id": "fcb9360490101464",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "mode": "link",
        "links": [
            "06efecca68f9c439"
        ],
        "x": 1285,
        "y": 800,
        "wires": []
    },
    {
        "id": "6dcd62b2842c79ef",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "links": [
            "af890975e6ef59b8",
            "ea11f5cc314e28f6"
        ],
        "x": 795,
        "y": 800,
        "wires": [
            [
                "63c360c3.2e474"
            ]
        ]
    },
    {
        "id": "af890975e6ef59b8",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "mode": "link",
        "links": [
            "6dcd62b2842c79ef"
        ],
        "x": 1295,
        "y": 760,
        "wires": []
    },
    {
        "id": "ea11f5cc314e28f6",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "fe3261ed3b3d4d41",
        "name": "",
        "mode": "link",
        "links": [
            "6dcd62b2842c79ef"
        ],
        "x": 1285,
        "y": 840,
        "wires": []
    },
    {
        "id": "a8b5274e1abca354",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "setpoints out",
        "mode": "link",
        "links": [
            "26ba2ecc17ab3f7e"
        ],
        "x": 385,
        "y": 1440,
        "wires": []
    },
    {
        "id": "6652d2e7403e0e35",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "setpoints out",
        "mode": "link",
        "links": [
            "9f7311b340e47e32"
        ],
        "x": 385,
        "y": 1460,
        "wires": []
    },
    {
        "id": "9ae5b08c6e24a33f",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "setpoints out",
        "mode": "link",
        "links": [
            "1ea3eadf5018ae3d"
        ],
        "x": 385,
        "y": 1480,
        "wires": []
    },
    {
        "id": "cadf5bd0a132c6ef",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "setpoints out",
        "mode": "link",
        "links": [
            "5cfb7520921b9c6f"
        ],
        "x": 385,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9b68bbb1d9944cad",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "setpoints out",
        "mode": "link",
        "links": [
            "72196870621ff467"
        ],
        "x": 385,
        "y": 1520,
        "wires": []
    },
    {
        "id": "27b03b8e6d3332c0",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "0f078245a19912d2",
        "name": "setpoints out",
        "mode": "link",
        "links": [
            "ff5cf5d0f53015ad"
        ],
        "x": 385,
        "y": 1540,
        "wires": []
    },
    {
        "id": "26ba2ecc17ab3f7e",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "",
        "links": [
            "a8b5274e1abca354"
        ],
        "x": 1795,
        "y": 1480,
        "wires": [
            [
                "17add590.4185ca",
                "6e31aa5d.ff35b4"
            ]
        ]
    },
    {
        "id": "9f7311b340e47e32",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "",
        "links": [
            "6652d2e7403e0e35"
        ],
        "x": 1795,
        "y": 1500,
        "wires": [
            [
                "b2b94ebb.31d0e",
                "ce33d25f.78702"
            ]
        ]
    },
    {
        "id": "1ea3eadf5018ae3d",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "",
        "links": [
            "9ae5b08c6e24a33f"
        ],
        "x": 1795,
        "y": 1520,
        "wires": [
            [
                "89bb9d82.0972e",
                "aff23c20.30361"
            ]
        ]
    },
    {
        "id": "5cfb7520921b9c6f",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "",
        "links": [
            "cadf5bd0a132c6ef"
        ],
        "x": 1795,
        "y": 1540,
        "wires": [
            [
                "4fae6a27.905bc4",
                "796a3e31.de573"
            ]
        ]
    },
    {
        "id": "72196870621ff467",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "",
        "links": [
            "9b68bbb1d9944cad"
        ],
        "x": 1795,
        "y": 1560,
        "wires": [
            [
                "8d731697.3f9118",
                "5a020519.dad6bc"
            ]
        ]
    },
    {
        "id": "ff5cf5d0f53015ad",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "2143acf0eb8484ae",
        "name": "",
        "links": [
            "27b03b8e6d3332c0"
        ],
        "x": 1795,
        "y": 1580,
        "wires": [
            [
                "62b86acd.7f0ec4",
                "6dc444c.62013bc"
            ]
        ]
    },
    {
        "id": "284211e2761593a3",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "bc3c6213dc365e4f",
        "name": "",
        "mode": "link",
        "links": [
            "a7ec70576cd9087c",
            "f81c051a304f83f2"
        ],
        "x": 365,
        "y": 1820,
        "wires": []
    },
    {
        "id": "a7ec70576cd9087c",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "name": "",
        "links": [
            "284211e2761593a3",
            "97e9348cb7a044a6"
        ],
        "x": 1885,
        "y": 1760,
        "wires": [
            [
                "222382fc.6250de"
            ]
        ]
    },
    {
        "id": "f81c051a304f83f2",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "name": "",
        "links": [
            "284211e2761593a3"
        ],
        "x": 1885,
        "y": 1800,
        "wires": [
            [
                "3ca4711.bd0ea8e",
                "8920b965.8fb5e8"
            ]
        ]
    },
    {
        "id": "95ed90bb63da0230",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "828ef96339a42740",
        "name": "",
        "links": [
            "97e9348cb7a044a6"
        ],
        "x": 1885,
        "y": 1840,
        "wires": [
            [
                "e45d527.fc713b",
                "35de6870.6953a8"
            ]
        ]
    },
    {
        "id": "97e9348cb7a044a6",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "bc3c6213dc365e4f",
        "name": "",
        "mode": "link",
        "links": [
            "95ed90bb63da0230",
            "a7ec70576cd9087c"
        ],
        "x": 365,
        "y": 1840,
        "wires": []
    },
    {
        "id": "5e6ae2e91d50a9a6",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "91732b590420d1c8"
        ],
        "x": 395,
        "y": 2040,
        "wires": []
    },
    {
        "id": "e6313b41ff123d71",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "939ff2b17647b3f0"
        ],
        "x": 395,
        "y": 2060,
        "wires": []
    },
    {
        "id": "e94e349e74d3e364",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "b77872fcfea09269"
        ],
        "x": 395,
        "y": 2080,
        "wires": []
    },
    {
        "id": "014c8788401cd6da",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "9346cf2093322d69"
        ],
        "x": 395,
        "y": 2100,
        "wires": []
    },
    {
        "id": "ad93da2a63649bb8",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "2687fb62cffb8430"
        ],
        "x": 395,
        "y": 2120,
        "wires": []
    },
    {
        "id": "0324396004ed7c52",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "5740d03b912c09b1"
        ],
        "x": 395,
        "y": 2140,
        "wires": []
    },
    {
        "id": "1b9114fdf5aca82f",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "729480155445fe76"
        ],
        "x": 395,
        "y": 2160,
        "wires": []
    },
    {
        "id": "e7efcb4b98f398a3",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "d169b886dc33fcc2",
        "name": "status",
        "mode": "link",
        "links": [
            "6b363c9ba5cd6ace"
        ],
        "x": 395,
        "y": 2180,
        "wires": []
    },
    {
        "id": "91732b590420d1c8",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "5e6ae2e91d50a9a6"
        ],
        "x": 1894.25,
        "y": 2021.5,
        "wires": [
            [
                "4ebf7234.2a9c3c"
            ]
        ]
    },
    {
        "id": "939ff2b17647b3f0",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "e6313b41ff123d71"
        ],
        "x": 1894.25,
        "y": 2041.5,
        "wires": [
            [
                "79cfefcb.91fde",
                "6c63a803.d0a508"
            ]
        ]
    },
    {
        "id": "b77872fcfea09269",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "e94e349e74d3e364"
        ],
        "x": 1894.25,
        "y": 2061.5,
        "wires": [
            [
                "b74ea700.c4f408"
            ]
        ]
    },
    {
        "id": "9346cf2093322d69",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "014c8788401cd6da"
        ],
        "x": 1894.25,
        "y": 2081.5,
        "wires": [
            [
                "728e9578.ace71c",
                "af466545.e49cf8"
            ]
        ]
    },
    {
        "id": "2687fb62cffb8430",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "ad93da2a63649bb8"
        ],
        "x": 1894.25,
        "y": 2101.5,
        "wires": [
            [
                "8d26b892.40a968",
                "9a1b3476.978e38"
            ]
        ]
    },
    {
        "id": "5740d03b912c09b1",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "0324396004ed7c52"
        ],
        "x": 1894.25,
        "y": 2121.5,
        "wires": [
            [
                "ca29d06b.38db1",
                "68c8f1ec.c26ab"
            ]
        ]
    },
    {
        "id": "729480155445fe76",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "1b9114fdf5aca82f"
        ],
        "x": 1894.25,
        "y": 2141.5,
        "wires": [
            [
                "2a2508db.2a6218"
            ]
        ]
    },
    {
        "id": "6b363c9ba5cd6ace",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ed5a2f0ec76b67b3",
        "name": "",
        "links": [
            "e7efcb4b98f398a3"
        ],
        "x": 1894.25,
        "y": 2161.5,
        "wires": [
            [
                "723d2724.f0e208"
            ]
        ]
    },
    {
        "id": "80f0ada24ba5fee6",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "3595b63b79c9bd12",
        "name": "totals",
        "links": [
            "ad87652fd99e3d96"
        ],
        "x": 375,
        "y": 2440,
        "wires": []
    },
    {
        "id": "8fe8feb113295da9",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "3595b63b79c9bd12",
        "name": "totals",
        "links": [
            "3b2989a1941f8779"
        ],
        "x": 375,
        "y": 2460,
        "wires": []
    },
    {
        "id": "ad87652fd99e3d96",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "fdfde33ff181cd2b",
        "name": "",
        "links": [
            "80f0ada24ba5fee6"
        ],
        "x": 1825,
        "y": 2440,
        "wires": [
            [
                "588a0678.ce1cf8",
                "2e18150.e7b05ec"
            ]
        ]
    },
    {
        "id": "3b2989a1941f8779",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "fdfde33ff181cd2b",
        "name": "",
        "links": [
            "8fe8feb113295da9"
        ],
        "x": 1825,
        "y": 2460,
        "wires": [
            [
                "1c2287f.5fece78",
                "6678e6e7.02f818"
            ]
        ]
    },
    {
        "id": "6840823ee191abbd",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "df8942c9d7c6c335",
        "name": "",
        "mode": "link",
        "links": [
            "bb2b198cd7361905"
        ],
        "x": 375,
        "y": 2640,
        "wires": []
    },
    {
        "id": "bb2b198cd7361905",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "ac905f8eacdfaa65",
        "name": "",
        "links": [
            "6840823ee191abbd"
        ],
        "x": 1935,
        "y": 2640,
        "wires": [
            [
                "bce38183.5f26a"
            ]
        ]
    },
    {
        "id": "845b1e0ae44652f1",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "df76d03756526c49",
        "name": "",
        "mode": "link",
        "links": [
            "4efc3fe80f5cb76a"
        ],
        "x": 385,
        "y": 2800,
        "wires": []
    },
    {
        "id": "60acc09545fae7cf",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "df76d03756526c49",
        "name": "",
        "mode": "link",
        "links": [
            "2e754d99f5a46d83"
        ],
        "x": 385,
        "y": 2820,
        "wires": []
    },
    {
        "id": "4efc3fe80f5cb76a",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "6d854dd836e19c95",
        "name": "",
        "links": [
            "845b1e0ae44652f1"
        ],
        "x": 1875,
        "y": 2800,
        "wires": [
            [
                "bdf16e02.61d18",
                "5b9066de.3eca58"
            ]
        ]
    },
    {
        "id": "2e754d99f5a46d83",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "6d854dd836e19c95",
        "name": "",
        "links": [
            "60acc09545fae7cf"
        ],
        "x": 1875,
        "y": 2820,
        "wires": [
            [
                "d37542b6.e08c8",
                "66aa194e.dbac48"
            ]
        ]
    },
    {
        "id": "d3e8bfc7db9de8f3",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3020,
        "wires": [
            [
                "87ee2495.dc1488"
            ]
        ]
    },
    {
        "id": "d8c15282677e6ca5",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3040,
        "wires": [
            [
                "9b6f4fa0.a2dbb"
            ]
        ]
    },
    {
        "id": "ae6399ba6d06eeae",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3060,
        "wires": [
            [
                "442f7cb2.180444"
            ]
        ]
    },
    {
        "id": "27ac15768667330b",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3080,
        "wires": [
            [
                "7e232743.48d498"
            ]
        ]
    },
    {
        "id": "9d9a28b4432101e8",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3100,
        "wires": [
            [
                "7d60ba8f.5c9804"
            ]
        ]
    },
    {
        "id": "029db1078abcbe36",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3120,
        "wires": [
            [
                "fd5008.7c9b8ff8"
            ]
        ]
    },
    {
        "id": "ad4b269b1e8ef692",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3140,
        "wires": [
            [
                "b8fe5f8b.0e193"
            ]
        ]
    },
    {
        "id": "8fa69d3b02a2f326",
        "type": "function",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "Alarm Color",
        "func": "//switch (msg.payload) { case \"Normal\" : msg.color = \"green\"; break; case \"Alarm\" : msg.color = \"red\"; break; default : msg.color = \"black\"; break; } return msg;\n\nswitch (msg.payload) { \n    case \"Normal\" : \n        msg.color = \"green\"; \n        break; \n    case \"Alarm\" : \n        msg.color = \"red\"; \n        break; \n    default : \n        msg.color = \"black\"; \n        break; } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3160,
        "wires": [
            [
                "8013760.fcc8488"
            ]
        ]
    },
    {
        "id": "5e5b754a4ae4669c",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "dfdcf64952f06b7d"
        ],
        "x": 395,
        "y": 3000,
        "wires": []
    },
    {
        "id": "30360c7846e4eef2",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "ef7c6e0fd0c7d201"
        ],
        "x": 395,
        "y": 3020,
        "wires": []
    },
    {
        "id": "2836fe5f5a9433ed",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "c49866b07965f9f4"
        ],
        "x": 395,
        "y": 3040,
        "wires": []
    },
    {
        "id": "e9d9cfb0c96689c9",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "72b549797c242c2c"
        ],
        "x": 395,
        "y": 3060,
        "wires": []
    },
    {
        "id": "0afb0b1fac47c409",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "afefb387786f1a96"
        ],
        "x": 395,
        "y": 3080,
        "wires": []
    },
    {
        "id": "a40480fd923b4665",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "480556b05ca8fbee"
        ],
        "x": 395,
        "y": 3100,
        "wires": []
    },
    {
        "id": "96f5e4df031a1ab2",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "78177268ee09acac"
        ],
        "x": 395,
        "y": 3120,
        "wires": []
    },
    {
        "id": "9825fb911bb45260",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "05f3436c1504ed15"
        ],
        "x": 395,
        "y": 3140,
        "wires": []
    },
    {
        "id": "406d270152d15332",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "335d1881bcf33d27"
        ],
        "x": 395,
        "y": 3160,
        "wires": []
    },
    {
        "id": "6f621ac004584f2d",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "f56acbe31627e5eb"
        ],
        "x": 395,
        "y": 3180,
        "wires": []
    },
    {
        "id": "799f5ebabe12024c",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "06560b43e3e97da8"
        ],
        "x": 395,
        "y": 3200,
        "wires": []
    },
    {
        "id": "4d898f6b81897e58",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "c9814c039e75fe8a"
        ],
        "x": 395,
        "y": 3220,
        "wires": []
    },
    {
        "id": "13fe9e158dd3dcca",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "c5fb837dd86e96da"
        ],
        "x": 395,
        "y": 3240,
        "wires": []
    },
    {
        "id": "0b5553aa4e3a78a9",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "91ddada67f20ac80"
        ],
        "x": 395,
        "y": 3260,
        "wires": []
    },
    {
        "id": "dce38ee1225239c7",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "1cbd43377263f8d5"
        ],
        "x": 395,
        "y": 3280,
        "wires": []
    },
    {
        "id": "2ac74fb9f53557fa",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "3e762a80d255fe55"
        ],
        "x": 395,
        "y": 3300,
        "wires": []
    },
    {
        "id": "2cb57cce7129311b",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "67ac412eb2c6b3a7"
        ],
        "x": 395,
        "y": 3320,
        "wires": []
    },
    {
        "id": "b3a3ccc4d4fed124",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "779231e02c319535"
        ],
        "x": 395,
        "y": 3340,
        "wires": []
    },
    {
        "id": "881f975828e9be85",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "f765e01ebedcab65"
        ],
        "x": 395,
        "y": 3360,
        "wires": []
    },
    {
        "id": "36dec759085a255c",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [
            "e15636c924fc8be3"
        ],
        "x": 395,
        "y": 3380,
        "wires": []
    },
    {
        "id": "38b4684888f5dc4e",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [],
        "x": 395,
        "y": 3400,
        "wires": []
    },
    {
        "id": "97e6dc9ff8221ae0",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "f353cac4e20a6b2c",
        "name": "",
        "mode": "link",
        "links": [],
        "x": 395,
        "y": 3420,
        "wires": []
    },
    {
        "id": "dfdcf64952f06b7d",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "5e5b754a4ae4669c"
        ],
        "x": 1845,
        "y": 3000,
        "wires": [
            [
                "feb9beb.fb9a44"
            ]
        ]
    },
    {
        "id": "ef7c6e0fd0c7d201",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "30360c7846e4eef2"
        ],
        "x": 1845,
        "y": 3020,
        "wires": [
            [
                "d3e8bfc7db9de8f3"
            ]
        ]
    },
    {
        "id": "c49866b07965f9f4",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "2836fe5f5a9433ed"
        ],
        "x": 1845,
        "y": 3040,
        "wires": [
            [
                "d8c15282677e6ca5"
            ]
        ]
    },
    {
        "id": "72b549797c242c2c",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "e9d9cfb0c96689c9"
        ],
        "x": 1845,
        "y": 3060,
        "wires": [
            [
                "ae6399ba6d06eeae"
            ]
        ]
    },
    {
        "id": "afefb387786f1a96",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "0afb0b1fac47c409"
        ],
        "x": 1845,
        "y": 3080,
        "wires": [
            [
                "27ac15768667330b"
            ]
        ]
    },
    {
        "id": "480556b05ca8fbee",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "a40480fd923b4665"
        ],
        "x": 1845,
        "y": 3100,
        "wires": [
            [
                "9d9a28b4432101e8"
            ]
        ]
    },
    {
        "id": "78177268ee09acac",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "96f5e4df031a1ab2"
        ],
        "x": 1845,
        "y": 3120,
        "wires": [
            [
                "029db1078abcbe36"
            ]
        ]
    },
    {
        "id": "05f3436c1504ed15",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "9825fb911bb45260"
        ],
        "x": 1845,
        "y": 3140,
        "wires": [
            [
                "ad4b269b1e8ef692"
            ]
        ]
    },
    {
        "id": "335d1881bcf33d27",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "406d270152d15332"
        ],
        "x": 1845,
        "y": 3160,
        "wires": [
            [
                "8fa69d3b02a2f326"
            ]
        ]
    },
    {
        "id": "f56acbe31627e5eb",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "6f621ac004584f2d"
        ],
        "x": 1845,
        "y": 3180,
        "wires": [
            [
                "e1e69ca2.5171c"
            ]
        ]
    },
    {
        "id": "06560b43e3e97da8",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "799f5ebabe12024c"
        ],
        "x": 1845,
        "y": 3200,
        "wires": [
            [
                "e8820602.e33008"
            ]
        ]
    },
    {
        "id": "c9814c039e75fe8a",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "4d898f6b81897e58"
        ],
        "x": 1845,
        "y": 3220,
        "wires": [
            [
                "f0ed21f3.22929"
            ]
        ]
    },
    {
        "id": "c5fb837dd86e96da",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "13fe9e158dd3dcca"
        ],
        "x": 1845,
        "y": 3240,
        "wires": [
            [
                "dcdd1789.879bc8"
            ]
        ]
    },
    {
        "id": "91ddada67f20ac80",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "0b5553aa4e3a78a9"
        ],
        "x": 1845,
        "y": 3260,
        "wires": [
            [
                "485459.f09fbba8"
            ]
        ]
    },
    {
        "id": "1cbd43377263f8d5",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "dce38ee1225239c7"
        ],
        "x": 1845,
        "y": 3280,
        "wires": [
            [
                "9c249ab.a506168"
            ]
        ]
    },
    {
        "id": "3e762a80d255fe55",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "2ac74fb9f53557fa"
        ],
        "x": 1845,
        "y": 3300,
        "wires": [
            [
                "b3fbcd75.2facb"
            ]
        ]
    },
    {
        "id": "67ac412eb2c6b3a7",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "2cb57cce7129311b"
        ],
        "x": 1845,
        "y": 3320,
        "wires": [
            [
                "698b6ba7.fbd924"
            ]
        ]
    },
    {
        "id": "779231e02c319535",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "b3a3ccc4d4fed124"
        ],
        "x": 1845,
        "y": 3340,
        "wires": [
            [
                "ac867cee.40e7b"
            ]
        ]
    },
    {
        "id": "f765e01ebedcab65",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "881f975828e9be85"
        ],
        "x": 1845,
        "y": 3360,
        "wires": [
            [
                "b09d86eb.714888"
            ]
        ]
    },
    {
        "id": "e15636c924fc8be3",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "1833fc4e49ad5614",
        "name": "",
        "links": [
            "36dec759085a255c"
        ],
        "x": 1845,
        "y": 3380,
        "wires": [
            [
                "8b31492e.ca48c8"
            ]
        ]
    },
    {
        "id": "697e26dc2f2e446b",
        "type": "link out",
        "z": "b85317fd.d210f8",
        "g": "aaec627d95cf77d0",
        "name": "",
        "mode": "link",
        "links": [
            "9f78e0f85e8ebfaf"
        ],
        "x": 425,
        "y": 585.7142857142857,
        "wires": []
    },
    {
        "id": "9f78e0f85e8ebfaf",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "6ce8ee2e1bee7658",
        "name": "",
        "links": [
            "697e26dc2f2e446b"
        ],
        "x": 635,
        "y": 652.8,
        "wires": [
            [
                "75f29d8a.0d60b4"
            ]
        ]
    },
    {
        "id": "aa40f44a04082d45",
        "type": "link in",
        "z": "b85317fd.d210f8",
        "g": "3fdfab0545a44031",
        "name": "",
        "links": [
            "54450e6bb280ffca"
        ],
        "x": 1655,
        "y": 580,
        "wires": [
            [
                "958a2454.e49d18"
            ]
        ]
    },
    {
        "id": "48da3f59755776b1",
        "type": "rbe",
        "z": "b85317fd.d210f8",
        "g": "3fdfab0545a44031",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1950,
        "y": 580,
        "wires": [
            [
                "ad2f96c.91fcf68"
            ]
        ]
    },
    {
        "id": "b802703aba66074d",
        "type": "ui_template",
        "z": "b85317fd.d210f8",
        "group": "d783cb980c3979fc",
        "name": "Node-Red Dashboard Custom CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n\n    /*Main background*/\n    body {\n        background: -webkit-linear-gradient(\n            55deg,\n            #009785 0%,\n            #245aa5 50%,\n            #b800e9 100%\n            );\n    }\n\n    /*Top bar*/\n    body.nr-dashboard-theme md-toolbar,\n    body.nr-dashboard-theme md-content md-card {\n        background-color: transparent !important;\n        color: #FFFFFF !important;\n    }\n\n\n    /*Left menu*/\n    /*Sidebar*/\n    body.nr-dashboard-theme md-sidenav {\n        color: white !important;\n        background-color: rgba(0,0,0,0) !important;\n    }\n    /*Hover selection*/\n    a.md-no-style, button.md-no-style {\n        border-radius: 10px !important;\n    }\n    /*Selected*/\n    .nr-menu-item-active div button {\n        border-right: 4px solid rgb(41 98 255) !important;\n    }\n    /*List*/\n    body.nr-dashboard-theme md-sidenav div.md-list-item-inner {\n        color: white !important;\n        background-color: rgba(40,85,165,1) !important;\n        border-radius: 10px !important;\n    }\n\n\n    /*Groups*/\n    ui-card-panel {\n        background-color: rgba(255,255,255,0.1) !important;\n        border-radius: 10px !important;\n    }\n    .nr-dashboard-theme ui-card-panel {\n        border: none !important;\n    }\n    /*Name groups*/\n    .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n        color: rgba(255, 255, 255, 0.5) !important;\n    }\n\n\n    /*Bouttons*/\n    .nr-dashboard-theme .nr-dashboard-button .md-button {\n        background-color: rgba(255,255,255,.1) !important;\n    }\n    .md-button {\n        border-radius: 10px !important;\n    }\n\n\n    /*Dropdown menu*/\n    .nr-dashboard-theme md-select-menu{\n        background-color: rgba(40,85,165,1) !important;\n    }\n    .nr-dashboard-theme md-select-menu, .nr-dashboard-theme md-select-menu md-option {\n        background-color: transparent !important;\n    }\n    .nr-dashboard-theme .md-select-menu-container {\n        border-radius: 10px !important;\n        border: none !important;\n    }\n    .nr-dashboard-theme md-select-menu md-option[selected] {\n        color: white !important;\n        background-color: #1a3566 !important;\n    }\n\n    /*Template*/\n    md-card>img, md-card>md-card-header img, md-card md-card-title-media img {\n        border-radius: 10px !important;\n    }\n\n    /* Color picker text BG */\n    .nr-dashboard-theme .color-picker-input-wrapper > input {\n        color: white !important;\n        background-color: transparent !important;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 180,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "45d0507e.0576c",
        "type": "http in",
        "z": "b10ce2d2.81d18",
        "name": "Manual Get Status",
        "url": "/get_status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "46b2b631.5405b8",
                "fffb6cde.8a2c5"
            ]
        ]
    },
    {
        "id": "393aa135.56feee",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "VALIDATE INCOMING SUBSCRIBE COMMAND",
        "func": "// first output, add pin to list // second output, remove pin from list // third output, no action, text response var cmd = msg.payload.Body.toLowerCase() var subscribe_pin = flow.get(\"subscribe_pin\")||\"0000\" var incoming_pin = \"9999\" var result = \"\" var test_inc = parseInt(cmd) if(isNaN(test_inc)) { // not a valid pin, check for remove command if(cmd.indexOf(\"remove\") != -1) { // remove incoming number from list msg.payload = msg.payload.From return [null, msg] } else { msg.payload = \"Error: Your command or pin is invalid. Send a numeric pin to subscribe to Americo CRU alarms.\" return [null,null,msg] } } else { // valid pin, check if equal to current subscribe_pin incoming_pin = msg.payload.Body if(incoming_pin == subscribe_pin) { // add number to current list if number is not already in subscribed list msg.payload = msg.payload.From return [msg] } else { // pin doesnt match, return error message msg.payload = \"Error: Your command or pin is invalid. Send a numeric pin to subscribe to Americo CRU alarms.\" return [null, null, msg] } } ",
        "outputs": 3,
        "noerr": 0,
        "x": 760,
        "y": 220,
        "wires": [
            [
                "32d723c5.e1a13c"
            ],
            [
                "6c28e6a8.b7d468"
            ],
            []
        ]
    },
    {
        "id": "dab3500a.7b92a",
        "type": "inject",
        "z": "b10ce2d2.81d18",
        "name": "SUBSCRIBE_PIN",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4837",
        "payloadType": "str",
        "x": 330,
        "y": 400,
        "wires": [
            [
                "aee27d3.c46008"
            ]
        ]
    },
    {
        "id": "aee27d3.c46008",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "SET SUBSCRIBE PIN",
        "func": "flow.set(\"subscribe_pin\", msg.payload)",
        "outputs": 1,
        "noerr": 0,
        "x": 563.5,
        "y": 399.9999978542328,
        "wires": [
            []
        ]
    },
    {
        "id": "32d723c5.e1a13c",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "ADD NUMBER",
        "func": "var smsContacts = flow.get(\"smsContacts\") var alarmContacts = flow.get(\"alarmContacts\") var response = \"\" if(smsContacts.indexOf(msg.payload) == -1) { smsContacts = smsContacts + \",\" + msg.payload flow.set(\"smsContacts\", smsContacts) alarmContacts[msg.payload] = \"Unknown Americo User\" flow.set(\"alarmContacts\", alarmContacts) msg.phoneNumber = msg.payload msg.payload = \"Success: You are now subscribed to sms & voice alarms for Americo CRU. Please enter your first and last name to attach to your account: \" return msg } else { msg.payload = \"You are already subscribed to sms & voice alarms for Americo CRU\" return [null,msg] } ",
        "outputs": 2,
        "noerr": 0,
        "x": 1080,
        "y": 180,
        "wires": [
            [
                "6620809a.0f6a3",
                "5e1d13e2.b00d0c",
                "cea324b3.3ab6d8"
            ],
            []
        ]
    },
    {
        "id": "6c28e6a8.b7d468",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "REMOVE NUMBER",
        "func": "var smsContacts = flow.get(\"smsContacts\") var alarmContacts = flow.get(\"alarmContacts\") var response = \"\" if(smsContacts.indexOf(msg.payload) != -1) { var s1 = \",\" + msg.payload var s2 = msg.payload + \",\" var s3 = msg.payload if(smsContacts.indexOf(s1) != -1) { smsContacts = smsContacts.replace(s1, \"\") } else if(smsContacts.indexOf(s2) != -1) { smsContacts = smsContacts.replace(s2, \"\") } else { smsContacts = smsContacts.replace(s3, \"\") } flow.set(\"smsContacts\", smsContacts) var o = {} var k = Object.keys(alarmContacts) k.forEach(function(key){ if(key != msg.payload) { o[key] = alarmContacts[key] } }); flow.set(\"alarmContacts\", o) msg.payload = \"Success: You are now unsubscribed from sms & voice alarms for Americo CRU.\" } else { msg.payload = \"You are already unsubscribed from sms & voice alarms for Americo CRU\" } return msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1370,
        "y": 140,
        "wires": [
            [
                "5e1d13e2.b00d0c",
                "cea324b3.3ab6d8"
            ]
        ]
    },
    {
        "id": "46b2b631.5405b8",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "Check Incoming Number",
        "func": "var smsContacts = flow.get(\"smsContacts\") if(smsContacts.indexOf(msg.payload.From) != -1) { return msg; } else { return [null,msg]; } ",
        "outputs": 2,
        "noerr": 0,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "c93ad1d3.88b38"
            ],
            [
                "393aa135.56feee"
            ]
        ]
    },
    {
        "id": "6620809a.0f6a3",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "Waiting For Name to True",
        "func": "var waiting = \"waitingForName_\"+msg.phoneNumber flow.set(waiting, true) return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1390,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c93ad1d3.88b38",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "Check for Name",
        "func": "var num = \"waitingForName_\"+msg.payload.From var waiting = flow.get(num)||false if(waiting) { flow.set(num, false) var alarmContacts = flow.get(\"alarmContacts\") alarmContacts[msg.payload.From] = msg.payload.Body flow.set(\"alarmContacts\", alarmContacts) msg.payload = \"Success: Account name set to: \" + msg.payload.Body return [null, msg] } else { return msg; } ",
        "outputs": 2,
        "noerr": 0,
        "x": 760,
        "y": 120,
        "wires": [
            [],
            [
                "5e1d13e2.b00d0c"
            ]
        ]
    },
    {
        "id": "5e1d13e2.b00d0c",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "Get Alarm Contacts",
        "func": "var contacts = flow.get(\"alarmContacts\")||{} msg.payload = JSON.stringify(contacts) return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1430,
        "y": 220,
        "wires": [
            [
                "554cb0aa.9d3fc"
            ]
        ]
    },
    {
        "id": "cea324b3.3ab6d8",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "Get SMS Contacts",
        "func": "var contacts = flow.get(\"smsContacts\")||\"\" msg.payload = contacts return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1450,
        "y": 280,
        "wires": [
            [
                "b8b66db9.8bd3"
            ]
        ]
    },
    {
        "id": "fffb6cde.8a2c5",
        "type": "debug",
        "z": "b10ce2d2.81d18",
        "name": "TWILIO",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 400,
        "y": 140,
        "wires": []
    },
    {
        "id": "3ba6bc16.c23314",
        "type": "ui_button",
        "z": "b10ce2d2.81d18",
        "name": "Send CSV Report",
        "group": "d93206f4.8e76a8",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Send CSV Report",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 323.333251953125,
        "y": 516.7996826171875,
        "wires": [
            [
                "9c1c60b0.e7885"
            ]
        ]
    },
    {
        "id": "9c1c60b0.e7885",
        "type": "function",
        "z": "b10ce2d2.81d18",
        "name": "Weekly Trend All Alarms",
        "func": "var query = \"SELECT name, value, timestamp FROM ccs_scada WHERE timestamp > unix_timestamp(NOW() - INTERVAL 1 WEEK)\" msg.topic = query return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 575.333251953125,
        "y": 516.4663696289062,
        "wires": [
            []
        ]
    },
    {
        "id": "3158abb4.e74fc4",
        "type": "http response",
        "z": "b10ce2d2.81d18",
        "name": "Respond with Status Msg",
        "statusCode": "200",
        "headers": {
            "content-type": "text/plain"
        },
        "x": 1850,
        "y": 320,
        "wires": []
    },
    {
        "id": "554cb0aa.9d3fc",
        "type": "file",
        "z": "b10ce2d2.81d18",
        "name": "File Cache Alarm Contacts",
        "filename": "/data/alarm_contacts.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 1683.9998016357422,
        "y": 391.9998092651367,
        "wires": [
            []
        ]
    },
    {
        "id": "b8b66db9.8bd3",
        "type": "file",
        "z": "b10ce2d2.81d18",
        "name": "File Cache Sms Contacts",
        "filename": "/data/sms_contacts.txt",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 1671.9998016357422,
        "y": 451.9998092651367,
        "wires": [
            []
        ]
    },
    {
        "id": "79b0f31660687179",
        "type": "http response",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 160,
        "wires": []
    },
    {
        "id": "45ba6e37f1581888",
        "type": "function",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "func": "msg.payload = {\n    card: {\n        title: 'A Random Joke',\n        text: msg.payload.value.joke,\n        image: {\n            src: 'https://cdn.dribbble.com/users/1774513/screenshots/3726127/media/ef86424ae75426acfa624dfadcabda14.jpg?compress=1&resize=400x300'\n        },\n        buttons: [{\n            label: 'Another Joke',\n            href: '#',\n            className: 'btn btn-dark'\n        }]\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "f39790b7c1b32cbb"
            ]
        ]
    },
    {
        "id": "fe5e86af251c9c02",
        "type": "http request",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 160,
        "wires": [
            [
                "45ba6e37f1581888"
            ]
        ]
    },
    {
        "id": "f9cf633ec1b34528",
        "type": "function",
        "z": "8c6df8cfab7f5ae0",
        "name": "payload",
        "func": "global.get('nj.addGlobal')('request', msg.req)\n\nconst firstName = msg.req.query.firstName || 'Chuck'\nconst lastName = msg.req.query.lastName || 'Norris'\n\nmsg.method = 'GET'\nmsg.url = `http://api.icndb.com/jokes/random?firstName=${firstName}&lastName=${lastName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "fe5e86af251c9c02"
            ]
        ]
    },
    {
        "id": "1fdca429c8c60b6f",
        "type": "http in",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "url": "/example/joke",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "f9cf633ec1b34528"
            ]
        ]
    },
    {
        "id": "b9a2ff8d07d15421",
        "type": "http response",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "f9ba36f6f0a1145a",
        "type": "function",
        "z": "8c6df8cfab7f5ae0",
        "name": "payload",
        "func": "global.get('nj.addGlobal')('request', msg.req)\n\nmsg.payload = {\n    card: {\n        title: 'Search results',\n        text: `Searching for ${msg.req.query.q || ''}`,\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "b3f6875fd13c8c43"
            ]
        ]
    },
    {
        "id": "599b7390c55080e2",
        "type": "http in",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "url": "/example/search",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "f9ba36f6f0a1145a"
            ]
        ]
    },
    {
        "id": "4cf30c301712f9c8",
        "type": "function",
        "z": "8c6df8cfab7f5ae0",
        "name": "Nunjucks Global Context",
        "func": "const _context = {\n    app: {\n        name: 'Nunjucks for Node-RED'\n    },\n    links: [{\n        label: 'Random Joke',\n        attributes: {\n            'class': 'nav-link',\n            'href': '/example/joke'\n        }\n    }]\n}\n\nObject.entries(_context).forEach(([key, value]) => {\n    global.get('nj.addGlobal')(key, value)\n})\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 460,
        "wires": []
    },
    {
        "id": "7f7ef0cd9623ebab",
        "type": "inject",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "4cf30c301712f9c8"
            ]
        ]
    },
    {
        "id": "2076215c31136a97",
        "type": "function",
        "z": "8c6df8cfab7f5ae0",
        "name": "More Nunjucks Global Context",
        "func": "const _context = {\n    foo: {\n        bar: {\n            baz: 'Hello Baz!'\n        }\n    }\n}\n\nObject.entries(_context).forEach(([key, value]) => {\n    global.get('nj.addGlobal')(key, value)\n})\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": []
    },
    {
        "id": "ce4d3011a50a78ce",
        "type": "inject",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "2076215c31136a97"
            ]
        ]
    },
    {
        "id": "df10be42375fbc1e",
        "type": "function",
        "z": "8c6df8cfab7f5ae0",
        "name": "Filters Example",
        "func": "function myFilter(value) {\n    return `This is myFilter: ${value.toUpperCase()}!!!`\n}\n\nfunction attr(value) {\n    return Object.entries(value).reduce((prev, [key, value]) => {\n        prev.push(`${key}=\"${value}\"`)\n\n        return prev\n    }, []).join(' ')\n}\n\nglobal.get('nj.addFilter')('myFilter', myFilter)\nglobal.get('nj.addFilter')('attr', attr)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": []
    },
    {
        "id": "49bd7037b1599555",
        "type": "inject",
        "z": "8c6df8cfab7f5ae0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "df10be42375fbc1e"
            ]
        ]
    },
    {
        "id": "7c41b5ed52f53c40",
        "type": "nunjucks",
        "z": "8c6df8cfab7f5ae0",
        "name": "cards.html",
        "template": "{% macro card(card) %}\n<div class=\"card\">\n  {% if card.image %}\n    <img src=\"{{ card.image.src  }}\" class=\"card-img-top\" alt=\"{{ card.image.alt  }}\">\n  {% endif %}\n\n  <div class=\"card-body\">\n  {% if card.title %}\n    <h5 class=\"card-title\">{{ card.title }}</h5>\n  {% endif %}\n\n  {% if card.text %}\n    <p class=\"card-text\">{{ card.text }}</p>\n  {% endif %}\n\n  {{  caller() }}\n  </div>\n</div>\n{% endmacro %}",
        "x": 140,
        "y": 360,
        "wires": []
    },
    {
        "id": "3d4160d4d2e68eef",
        "type": "nunjucks",
        "z": "8c6df8cfab7f5ae0",
        "name": "base.html",
        "template": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <!-- Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n    \n    <title>{% block title %}Nunjucks Rocks!{% endblock %}</title>\n  </head>\n  <body>\n    {% include \"navbar.html\" %}\n    <div class=\"container\" style=\"margin-top: 80px;\">\n      {% block body %}\n        <h1>Hello, world!</h1>\n      {% endblock %}\n    </div>\n    <!-- Optional JavaScript; choose one of the two! -->\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/htmx.org@1.7.0\" integrity=\"sha384-EzBXYPt0/T6gxNp0nuPtLkmRpmDBbjg6WmCUZRLXBBwYYmwAUxzlSGej0ARHX0Bo\" crossorigin=\"anonymous\" defer></script>\n\n    {% block footer %}{% endblock %}\n  </body>\n</html>",
        "x": 140,
        "y": 320,
        "wires": []
    },
    {
        "id": "754c717efb65ad56",
        "type": "nunjucks",
        "z": "8c6df8cfab7f5ae0",
        "name": "navbar.html",
        "template": "<nav class=\"navbar navbar-light bg-light fixed-top\">\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" href=\"#\">{{ app.name }}</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasNavbar\" aria-controls=\"offcanvasNavbar\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"offcanvas offcanvas-end\" tabindex=\"-1\" id=\"offcanvasNavbar\" aria-labelledby=\"offcanvasNavbarLabel\">\n      <div class=\"offcanvas-header\">\n        <h5 class=\"offcanvas-title\" id=\"offcanvasNavbarLabel\">{{ foo.bar.baz }}</h5>\n        <button type=\"button\" class=\"btn-close text-reset\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\n      </div>\n      <div class=\"offcanvas-body\">\n        <ul class=\"navbar-nav justify-content-end flex-grow-1 pe-3\">\n          {% for link in links %}\n            <li class=\"nav-item\">\n              <a {{ link.attributes | attr | safe }}>{{ link.label }}</a>\n            </li>\n          {% endfor %}\n        </ul>\n        <form class=\"d-flex\" action=\"/example/search\">\n          <input class=\"form-control me-2\" name=\"q\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value=\"{{ request.query.q }}\">\n          <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</nav>",
        "x": 150,
        "y": 280,
        "wires": []
    },
    {
        "id": "f39790b7c1b32cbb",
        "type": "nunjucks_render",
        "z": "8c6df8cfab7f5ae0",
        "template": "{% extends \"base.html\" %}\n\n{% import \"cards.html\" as cards %}\n\n{% block body %}\n{% call cards.card(card) %}\n  <form>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input type=\"text\" class=\"form-control\" id=\"firstname\" name=\"firstName\" placeholder=\"Firstname\" value=\"{{ request.query.firstName }}\">\n      </div>\n      <div class=\"col\">\n        <input type=\"text\" class=\"form-control\" id=\"firstname\" name=\"lastName\" placeholder=\"Lastname\" value=\"{{ request.query.lastName }}\">\n      </div>\n    </div>\n\n    {# How to call your custom filters #}\n    <div class=\"my-4\">\n    {{ 'Hello' | myFilter }}\n    </div> \n\n    \n    <button type=\"submit\" class=\"btn btn-dark mt-3\">Give me a joke!</button>\n  </form>\n{% endcall %}\n{% endblock %}",
        "x": 780,
        "y": 160,
        "wires": [
            [
                "79b0f31660687179"
            ]
        ]
    },
    {
        "id": "b3f6875fd13c8c43",
        "type": "nunjucks_render",
        "z": "8c6df8cfab7f5ae0",
        "template": "{% extends \"base.html\" %}\n\n{% import \"cards.html\" as cards %}\n\n{% block body %}\n{% call cards.card(card) %}\n  \n{% endcall %}\n{% endblock %}",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "b9a2ff8d07d15421"
            ]
        ]
    },
    {
        "id": "17772d38c9db6b27",
        "type": "inject",
        "z": "1946f35c2b6b141e",
        "name": "Refresh",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 320,
        "wires": [
            [
                "d20d489364595491"
            ]
        ]
    },
    {
        "id": "dff57b67b56110c2",
        "type": "debug",
        "z": "1946f35c2b6b141e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "8819bb267febb98c",
        "type": "comment",
        "z": "1946f35c2b6b141e",
        "name": "Google Oauth2 Refresh",
        "info": "",
        "x": 240,
        "y": 260,
        "wires": []
    },
    {
        "id": "87189e75be5cbe2d",
        "type": "debug",
        "z": "1946f35c2b6b141e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 120,
        "wires": []
    },
    {
        "id": "2d9eb0325e66ea5b",
        "type": "comment",
        "z": "1946f35c2b6b141e",
        "name": "Google Oauth2 Web Login",
        "info": "",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "651766f3f2a40137",
        "type": "subflow:c516bb43d26b1e4d",
        "z": "1946f35c2b6b141e",
        "name": "",
        "env": [
            {
                "name": "Client_id",
                "type": "cred"
            },
            {
                "name": "Secret",
                "type": "cred"
            },
            {
                "name": "Redirect",
                "value": "http://nodered.edgedev.xyz/Google/oauth2",
                "type": "str"
            },
            {
                "name": "Dashboard",
                "value": "http://nodered.edgedev.xyz/ui",
                "type": "str"
            }
        ],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "87189e75be5cbe2d",
                "cdbbc7e5ca159e94"
            ],
            [
                "374187acec4fbadf"
            ]
        ]
    },
    {
        "id": "d20d489364595491",
        "type": "subflow:1b40ef83a0652010",
        "z": "1946f35c2b6b141e",
        "name": "",
        "env": [
            {
                "name": "Client_id",
                "type": "cred"
            },
            {
                "name": "Secret",
                "type": "cred"
            }
        ],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "dff57b67b56110c2",
                "c61cf8b7db717b0b"
            ]
        ]
    },
    {
        "id": "b7cef0a8ca8f96f6",
        "type": "inject",
        "z": "1946f35c2b6b141e",
        "name": "weblogin",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "651766f3f2a40137"
            ]
        ]
    },
    {
        "id": "07d2fe2dff75a528",
        "type": "debug",
        "z": "1946f35c2b6b141e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 180,
        "wires": []
    },
    {
        "id": "9fbdc752e7f35ede",
        "type": "ui_template",
        "z": "1946f35c2b6b141e",
        "group": "d60c193dc192336a",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (data.includes(\"google\")) {\n          window.location.href = data;\n        } \n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            [
                "07d2fe2dff75a528"
            ]
        ]
    },
    {
        "id": "6c60eee658101d50",
        "type": "ui_button",
        "z": "1946f35c2b6b141e",
        "name": "",
        "group": "d60c193dc192336a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Google Oauth2",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "651766f3f2a40137"
            ]
        ]
    },
    {
        "id": "374187acec4fbadf",
        "type": "trigger",
        "z": "1946f35c2b6b141e",
        "name": "reset msg",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "date",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 680,
        "y": 180,
        "wires": [
            [
                "9fbdc752e7f35ede"
            ]
        ]
    },
    {
        "id": "2fc0f97546498662",
        "type": "ui_button",
        "z": "1946f35c2b6b141e",
        "name": "",
        "group": "d60c193dc192336a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Oauth2 Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "d20d489364595491"
            ]
        ]
    },
    {
        "id": "c61cf8b7db717b0b",
        "type": "ui_text",
        "z": "1946f35c2b6b141e",
        "group": "d60c193dc192336a",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 670,
        "y": 240,
        "wires": []
    },
    {
        "id": "cdbbc7e5ca159e94",
        "type": "change",
        "z": "1946f35c2b6b141e",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 240,
        "wires": [
            [
                "c61cf8b7db717b0b"
            ]
        ]
    },
    {
        "id": "bf010e953c18e983",
        "type": "function",
        "z": "1946f35c2b6b141e",
        "name": "GET Calendars",
        "func": "var token = global.get('Google_token');\n\nvar date_time = Date.now();\nvar date1 = new Date(date_time)\nvar timestamp = date1.toLocaleDateString('en-UK');\n\nfunction padZero(i) {\n    return i < 10 ? \"0\"+i : i;\n}\nconst dateString = timestamp;\nconst parts = dateString.split(\"/\");\nconst date = new Date(Number(parts[2]), Number(parts[1]) - 1, Number(parts[0]));\nconst newDateString = date.getFullYear()+'-' + (padZero(date.getMonth()+1)) + '-'+padZero(date.getDate());\n\n\nmsg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \"+token;\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.url = \"https://www.googleapis.com/calendar/v3/calendars/\" + msg.calendar + \"/events?timeMin=\" + newDateString + \"T00:00:00-00:00\";\nmsg.method = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 540,
        "wires": [
            [
                "2e235f55fa98da10"
            ]
        ]
    },
    {
        "id": "2e235f55fa98da10",
        "type": "http request",
        "z": "1946f35c2b6b141e",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 750,
        "y": 540,
        "wires": [
            [
                "52973c9717c9bf0e"
            ]
        ]
    },
    {
        "id": "541f6d98a07e3a9a",
        "type": "inject",
        "z": "1946f35c2b6b141e",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 540,
        "wires": [
            [
                "c2698e3fe585dc50"
            ]
        ]
    },
    {
        "id": "52973c9717c9bf0e",
        "type": "debug",
        "z": "1946f35c2b6b141e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 930,
        "y": 540,
        "wires": []
    },
    {
        "id": "8add0a0fbed8fbc0",
        "type": "comment",
        "z": "1946f35c2b6b141e",
        "name": "Upcoming Calendar events",
        "info": "",
        "x": 250,
        "y": 480,
        "wires": []
    },
    {
        "id": "62dd02dc7530f98d",
        "type": "function",
        "z": "1946f35c2b6b141e",
        "name": "POST Calendars",
        "func": "var token = global.get('Google_token');\n\nmsg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \"+token;\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.url = \"https://www.googleapis.com/calendar/v3/calendars/\" + msg.calendar + \"/events\";\nmsg.method = \"POST\";\n\nmsg.payload = {\n  \"end\": {\n    \"date\": \"2022-04-28\"\n  },\n  \"start\": {\n    \"date\": \"2022-04-28\"\n  },\n  \"description\": \"test\",\n  \"summary\": \"test\"\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 660,
        "wires": [
            [
                "23e582285c0b8338"
            ]
        ]
    },
    {
        "id": "23e582285c0b8338",
        "type": "http request",
        "z": "1946f35c2b6b141e",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 660,
        "wires": [
            [
                "d083803dda4c6637"
            ]
        ]
    },
    {
        "id": "1d17ab50095fcd13",
        "type": "inject",
        "z": "1946f35c2b6b141e",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "0a3ef1b744c3b582"
            ]
        ]
    },
    {
        "id": "d083803dda4c6637",
        "type": "debug",
        "z": "1946f35c2b6b141e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 950,
        "y": 660,
        "wires": []
    },
    {
        "id": "4ed68d312fa881cc",
        "type": "comment",
        "z": "1946f35c2b6b141e",
        "name": "Create event",
        "info": "",
        "x": 210,
        "y": 600,
        "wires": []
    },
    {
        "id": "c2698e3fe585dc50",
        "type": "credentials",
        "z": "1946f35c2b6b141e",
        "name": "Calendar ID",
        "props": [
            {
                "value": "calendar",
                "type": "msg"
            }
        ],
        "x": 370,
        "y": 540,
        "wires": [
            [
                "bf010e953c18e983"
            ]
        ]
    },
    {
        "id": "0a3ef1b744c3b582",
        "type": "credentials",
        "z": "1946f35c2b6b141e",
        "name": "Calendar ID",
        "props": [
            {
                "value": "calendar",
                "type": "msg"
            }
        ],
        "x": 370,
        "y": 660,
        "wires": [
            [
                "62dd02dc7530f98d"
            ]
        ]
    },
    {
        "id": "e4695ab2.c1ac08",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId",
        "payload": "111",
        "payloadType": "num",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "dfe7b83f.29fe78",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 160,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "240a7199.dca9fe",
        "type": "uibuilder",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "topic": "",
        "url": "buttons",
        "fwdInMessages": true,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "vue",
        "extTemplate": "",
        "showfolder": true,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "5.1.1",
        "x": 680,
        "y": 260,
        "wires": [
            [
                "6119f142.2c665",
                "87b393ec.98fec",
                "c8c8bacc.e18a08"
            ],
            [
                "ff4ad4e0.d92f78"
            ]
        ]
    },
    {
        "id": "6119f142.2c665",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 970,
        "y": 120,
        "wires": []
    },
    {
        "id": "4b3a2b7c.19e464",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId2",
        "payload": "111",
        "payloadType": "num",
        "x": 270,
        "y": 200,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "6f231922.2da288",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId2",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 240,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "e90001ca.631e9",
        "type": "comment",
        "z": "43a1a9dc54dbd2b5",
        "name": "index.html",
        "info": "<!doctype html>\n\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes\">\n\n    <title>Node-RED UI Builder</title>\n    <meta name=\"description\" content=\"Node-RED UI Builder - VueJS + bootstrap-vue version\">\n\n    <link rel=\"icon\" href=\"./images/node-blue.ico\">\n\n    <!-- See https://goo.gl/OOhYW5 -->\n    <link rel=\"manifest\" href=\"./manifest.json\">\n    <meta name=\"theme-color\" content=\"#3f51b5\">\n\n    <!-- Used if adding to homescreen for Chrome on Android. Fallback for manifest.json -->\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"application-name\" content=\"Node-RED UI Builder\">\n\n    <!-- Used if adding to homescreen for Safari on iOS -->\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n    <meta name=\"apple-mobile-web-app-title\" content=\"Node-RED UI Builder\">\n\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"../uibuilder/vendor/bootstrap/dist/css/bootstrap.min.css\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"../uibuilder/vendor/bootstrap-vue/dist/bootstrap-vue.css\" />\n\n    <link rel=\"stylesheet\" href=\"./index.css\" media=\"all\">\n</head>\n\n<body>\n    <br />\n    <div class=\"container\">\n        <div class=\"row\" id=\"app\">\n            <div class=\"col-sm-6\">\n                <div id=\"app\" v-cloak>\n                    <b-container id=\"app_container\">\n\n                        <b-form class=\"border p-3 m-2\">\n                            <p>Test out a button</p>\n                            <input type=\"hidden\" name=\"testInput1\" :value=\"someData1\">\n                            <b-button pill variant=\"primary\" v-on:click=\"submit1\">Submit 1</b-button>\n                            Current Card No1: {{cardId}}\n                        </b-form>\n\n                        <b-form class=\"border p-3 m-2\">\n                            <p>Test out a second button</p>\n                            <input type=\"hidden\" name=\"testInput2\" :value=\"someData2\">\n                            <b-button pill variant=\"primary\" v-on:click=\"submit2\">Submit 2</b-button>\n                            Current Card No2: {{cardId2}}\n                        </b-form>\n\n                        <b-form class=\"border p-3 m-2\">\n                            <p>Test out a third button, why not?</p>\n                            <input type=\"hidden\" name=\"testInput3\" :value=\"someData3\">\n                            <b-button pill variant=\"primary\" v-on:click=\"submit3\">Submit 3</b-button>\n                            Current Card No3: {{cardId3}}\n                        </b-form>\n\n                        <b-form class=\"border p-3 m-2\">\n                            <p>Go for gold with four buttons!</p>\n                            <input type=\"hidden\" name=\"testInput4\" :value=\"someData4\">\n                            <b-button pill variant=\"primary\" v-on:click=\"submit4\">Submit 4</b-button>\n                            Current Card No4: {{cardId4}}\n                        </b-form>\n                        \n                        <b-card class=\"mt-3\" header=\"Log Messages\" border-variant=\"primary\" header-bg-variant=\"primary\"\n                            header-text-variant=\"white\" align=\"left\">\n                            <p>\n                                Messages: Received=<b>{{msgsReceived}}</b>, Sent=<b>{{msgsSent}}</b>\n                            </p>\n\n                            <pre v-html=\"hLastRcvd\" class=\"syntax-highlight\"></pre>\n                            <pre v-html=\"hLastSent\" class=\"syntax-highlight\"></pre>\n                        </b-card>\n                    </b-container>\n                </div>\n            </div>\n\n            <!--<div class=\"col-md-6\">-->\n                <!--<div id=\"app\" v-cloak>-->\n                    <!--<b-container id=\"app_container\">-->\n                        <!--<p> Cart Insertion Section</p>-->\n                        <!--<div>Current Card No: {{cardId}}</div>-->\n                        <!--<div>Current Card No2: {{cardId2}}</div>-->\n                        <!--<div>Current Card No3: {{cardId3}}</div>-->\n                        <!--<div>Current Card No4: {{cardId4}}</div>-->\n                    <!--</b-container>-->\n                <!--</div>-->\n            <!--</div>-->\n\n        </div>\n\n    </div>\n    <script src=\"../uibuilder/vendor/socket.io/socket.io.js\"></script>\n\n    <!-- Vendor Libraries - Load in the right order -->\n    <script src=\"../uibuilder/vendor/vue/dist/vue.js\"></script> <!-- dev version with component compiler -->\n    <!-- <script src=\"../uibuilder/vendor/vue/dist/vue.min.js\"></script>   prod version with component compiler -->\n    <!-- <script src=\"../uibuilder/vendor/vue/dist/vue.runtime.min.js\"></script>   prod version without component compiler -->\n    <script src=\"../uibuilder/vendor/bootstrap-vue/dist/bootstrap-vue.js\"></script>\n\n    <!-- REQUIRED: Sets up Socket listeners and the msg object -->\n    <!-- <script src=\"./uibuilderfe.js\"></script>   //dev version -->\n    <script src=\"./uibuilderfe.min.js\"></script> <!--    //prod version -->\n    <!-- OPTIONAL: You probably want this. Put your custom code here -->\n    <script src=\"./index.js\"></script>\n\n</body>\n\n</html>",
        "x": 60,
        "y": 120,
        "wires": []
    },
    {
        "id": "d5c1afe.77a0b5",
        "type": "comment",
        "z": "43a1a9dc54dbd2b5",
        "name": "index.js",
        "info": "/* jshint browser: true, esversion: 5, asi: true */\n/*globals Vue, uibuilder */\n// @ts-nocheck\n/*\n  Copyright (c) 2019 Julian Knight (Totally Information)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n'use strict'\n\n/** @see https://github.com/TotallyInformation/node-red-contrib-uibuilder/wiki/Front-End-Library---available-properties-and-methods */\n/** Heavily modififed from the Github example */\n\n// eslint-disable-next-line no-unused-vars\nvar app1 = new Vue({\n    el: '#app',\n    data: {\n        startMsg    : 'Vue has started, waiting for messages',\n        feVersion   : '',\n        testInput1  : 'testInput1',\n        testInput2  : 'testInput2',\n        testInput3  : 'testInput3',\n        testInput4  : 'testInput4',\n        socketConnectedState : false,\n        serverTimeOffset     : '[unknown]',\n        imgProps             : { width: 75, height: 75 },\n\n        msgRecvd    : '[Nothing]',\n        msgsReceived: 0,\n        msgCtrl     : '[Nothing]',\n        msgsControl : 0,\n\n        msgSent     : '[Nothing]',\n        msgsSent    : 0,\n        msgCtrlSent : '[Nothing]',\n        msgsCtrlSent: 0,\n    }, // --- End of data --- //\n    computed: {\n        \n        hLastRcvd: function() {\n            var msgRecvd = this.msgRecvd\n            if (typeof msgRecvd === 'string') return 'Last Message Received = ' + msgRecvd\n            else return 'Last Message Received = ' + this.syntaxHighlight(msgRecvd)\n        },\n        hLastSent: function() {\n            var msgSent = this.msgSent\n            if (typeof msgSent === 'string') return 'Last Message Sent = ' + msgSent\n            else return 'Last Message Sent = ' + this.syntaxHighlight(msgSent)\n        },\n        hLastCtrlRcvd: function() {\n            var msgCtrl = this.msgCtrl\n            if (typeof msgCtrl === 'string') return 'Last Control Message Received = ' + msgCtrl\n            else return 'Last Control Message Received = ' + this.syntaxHighlight(msgCtrl)\n        },\n        hLastCtrlSent: function() {\n            var msgCtrlSent = this.msgCtrlSent\n            if (typeof msgCtrlSent === 'string') return 'Last Control Message Sent = ' + msgCtrlSent\n            //else return 'Last Message Sent = ' + this.callMethod('syntaxHighlight', [msgCtrlSent])\n            else return 'Last Control Message Sent = ' + this.syntaxHighlight(msgCtrlSent)\n        },\n    }, // --- End of computed --- //\n    methods: {\n\n        submit1: function() {\n            var topic = this.msgRecvd.topic || 'uibuilder/vue'\n            uibuilder.send( {\n                'topic': topic,\n                'payload': {\n                    'type': 'testInput1',\n                    'testInput1': this.testInput1,\n                }\n            } )\n        }, // --- End of submit1 --- //\n\n        submit2: function() {\n            var topic = this.msgRecvd.topic || 'uibuilder/vue'\n            uibuilder.send( {\n                'topic': topic,\n                'payload': {\n                    'type': 'testInput2',\n                    'testInput2': this.testInput2,\n                }\n            } )\n        }, // --- End of submit2 --- //\n\n        submit3: function() {\n            var topic = this.msgRecvd.topic || 'uibuilder/vue'\n            uibuilder.send( {\n                'topic': topic,\n                'payload': {\n                    'type': 'testInput3',\n                    'testInput3': this.testInput3,\n                }\n            } )\n        }, // --- End of submit3 --- //\n        \n        submit4: function() {\n            var topic = this.msgRecvd.topic || 'uibuilder/vue'\n            uibuilder.send( {\n                'topic': topic,\n                'payload': {\n                    'type': 'testInput4',\n                    'testInput4': this.testInput4,\n                }\n            } )\n        }, // --- End of submit3 --- //\n        \n        // return formatted HTML version of JSON object\n        syntaxHighlight: function(json) {\n            json = JSON.stringify(json, undefined, 4)\n            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n            json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n                var cls = 'number'\n                if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                        cls = 'key'\n                    } else {\n                        cls = 'string'\n                    }\n                } else if (/true|false/.test(match)) {\n                    cls = 'boolean'\n                } else if (/null/.test(match)) {\n                    cls = 'null'\n                }\n                return '<span class=\"' + cls + '\">' + match + '</span>'\n            })\n            return json\n        }, // --- End of syntaxHighlight --- //\n    }, // --- End of methods --- //\n\n    // Available hooks: init,mounted,updated,destroyed\n    mounted: function(){\n        //console.debug('[indexjs:Vue.mounted] app mounted - setting up uibuilder watchers')\n\n        /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n         * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n         */\n        uibuilder.start()\n\n        var vueApp = this\n\n        // Example of retrieving data from uibuilder\n        vueApp.feVersion = uibuilder.get('version')\n\n        /** You can use the following to help trace how messages flow back and forth.\n         * You can then amend this processing to suite your requirements.\n         */\n\n        //#region ---- Trace Received Messages ---- //\n        // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n        // newVal relates to the attribute being listened to.\n        uibuilder.onChange('msg', function(newVal){\n        \n        //console.info('[indexjs:uibuilder.onChange] msg received from Node-RED server:', newVal)\n        vueApp.msgRecvd = newVal\n                if ( newVal.topic == 'cardId' ) {\n        vueApp.cardId = newVal.payload\n        }\n\n        vueApp.msgRecvd = newVal\n                if ( newVal.topic == 'cardId2' ) {\n        vueApp.cardId2 = newVal.payload\n        }\n\n        vueApp.msgRecvd = newVal\n                if ( newVal.topic == 'cardId3' ) {\n        vueApp.cardId3 = newVal.payload\n        }\n        \n        vueApp.msgRecvd = newVal\n                if ( newVal.topic == 'cardId4' ) {\n        vueApp.cardId4 = newVal.payload\n        }\n\n        })\n        // As we receive new messages, we get an updated count as well\n        uibuilder.onChange('msgsReceived', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange] Updated count of received msgs:', newVal)\n            vueApp.msgsReceived = newVal\n        })\n\n        // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\n        uibuilder.onChange('ctrlMsg', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal)\n            vueApp.msgCtrl = newVal\n        })\n        // Updated count of control messages received\n        uibuilder.onChange('msgsCtrl', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal)\n            vueApp.msgsControl = newVal\n        })\n        //#endregion ---- End of Trace Received Messages ---- //\n\n        //#region ---- Trace Sent Messages ---- //\n        // You probably only need these to help you understand the order of processing //\n        // If a message is sent back to Node-RED, we can grab a copy here if we want to\n        uibuilder.onChange('sentMsg', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal)\n            vueApp.msgSent = newVal\n        })\n        // Updated count of sent messages\n        uibuilder.onChange('msgsSent', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal)\n            vueApp.msgsSent = newVal\n        })\n\n        // If we send a control message to Node-RED, we can get a copy of it here\n        uibuilder.onChange('sentCtrlMsg', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal)\n            vueApp.msgCtrlSent = newVal\n        })\n        // And we can get an updated count\n        uibuilder.onChange('msgsSentCtrl', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal)\n            vueApp.msgsCtrlSent = newVal\n        })\n        //#endregion ---- End of Trace Sent Messages ---- //\n\n        // If Socket.IO connects/disconnects, we get true/false here\n        uibuilder.onChange('ioConnected', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)\n            vueApp.socketConnectedState = newVal\n        })\n        // If Server Time Offset changes\n        uibuilder.onChange('serverTimeOffset', function(newVal){\n            //console.info('[indexjs:uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)\n            vueApp.serverTimeOffset = newVal\n        })\n\n    } // --- End of mounted hook --- //\n\n}) // --- End of app1 --- //\n  \n// EOF",
        "x": 50,
        "y": 160,
        "wires": []
    },
    {
        "id": "3289dcf.e6c1024",
        "type": "comment",
        "z": "43a1a9dc54dbd2b5",
        "name": "index.css",
        "info": "/* Cloak elements on initial load to hide the possible display of {{ ... }} \n * Add to the app tag or to specific tags\n * To display \"loading...\", change to the following:\n *    [v-cloak] > * { display:none }\n *    [v-cloak]::before { content: \"loading…\" }\n */\n[v-cloak] { display: none; }\n\n/*  Colours for Syntax Highlighted pre's */\n.syntax-highlight {color:white;background-color:black;padding:5px 10px;}\n.syntax-highlight > .key {color:#ffbf35}\n.syntax-highlight > .string {color:#5dff39;}\n.syntax-highlight > .number {color:#70aeff;}\n.syntax-highlight > .boolean {color:#b993ff;}",
        "x": 60,
        "y": 200,
        "wires": []
    },
    {
        "id": "a5390c01.d927e",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId3",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 320,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "1e143001.2c52d",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId3",
        "payload": "111",
        "payloadType": "num",
        "x": 270,
        "y": 280,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "933b8ea0.9a552",
        "type": "link in",
        "z": "43a1a9dc54dbd2b5",
        "name": "Link The Cache Data",
        "links": [
            "ff4ad4e0.d92f78",
            "33b9cb08.e0c5b4",
            "369fd5be.173f9a",
            "d3d8c72a.8fca08",
            "c1c84c77.a74aa"
        ],
        "x": 475,
        "y": 340,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "ff4ad4e0.d92f78",
        "type": "link out",
        "z": "43a1a9dc54dbd2b5",
        "name": "Link The Cache Data",
        "links": [
            "933b8ea0.9a552"
        ],
        "x": 715,
        "y": 340,
        "wires": []
    },
    {
        "id": "4977524a.c304bc",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Cache Data",
        "func": "// Expects input msgs with topic set\n\n// saved context\nvar homeMsgs = context.get('homeMsgs') || {}\n\n// Replay cache if requested\nif ( msg.hasOwnProperty('cacheControl') && msg.cacheControl === 'REPLAY' ) {\n    for (var topic in homeMsgs) {\n        // Only send to a single client if we can\n        if ( msg.hasOwnProperty('_socketId') )\n            node.send({\n                \"topic\": topic, \n                \"payload\": homeMsgs[topic],\n                \"_socketId\": msg._socketId\n            })\n        else\n            node.send({\n                \"topic\": topic, \n                \"payload\": homeMsgs[topic]\n            })\n    }\n    return null\n}\n\n// ignore cacheControl and uibuilder control messages\nif ( msg.hasOwnProperty('cacheControl') || msg.hasOwnProperty('uibuilderCtrl') ) return null\n\n// Keep the last msg.payload by topic\nhomeMsgs[msg.topic] = msg.payload\n\n// save context for next time\ncontext.set('homeMsgs', homeMsgs)\n\n// Show number of cached msgs in status\nnode.status({fill:'green',shape:'ring',text:'Cached: ' + Object.keys(homeMsgs).length})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "240a7199.dca9fe"
            ]
        ]
    },
    {
        "id": "87b393ec.98fec",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.testInput3",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "33b9cb08.e0c5b4",
        "type": "link out",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "mode": "link",
        "links": [
            "933b8ea0.9a552"
        ],
        "x": 1275,
        "y": 420,
        "wires": []
    },
    {
        "id": "eda5ac.30f38a58",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1330,
        "y": 300,
        "wires": []
    },
    {
        "id": "c8c8bacc.e18a08",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Route the Payload",
        "func": "\nvar msg1 = { payload: null };\nvar msg2 = { payload: null };\nvar msg3 = { payload: null };\nvar msg4 = { payload: null };\n\nif ( msg.payload.testInput1 == 'testInput1' ) {\n    msg1 = { payload: msg.payload };\n    return [msg1, null, null, null ];\n} else if (msg.payload.testInput2 == 'testInput2') {\n    msg2 = { payload: msg.payload };\n    return [null, msg2, null, null ];\n} else if ( msg.payload.testInput3 == 'testInput3') {\n    msg3 = { payload: msg.payload };\n    return [null, null, msg3, null ];\n} else if ( msg.payload.testInput4 == 'testInput4') {\n    msg4 = { payload: msg.payload };\n    return [null, null, null, msg4 ];\n}\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 260,
        "wires": [
            [
                "2260e883.1703b8",
                "a7c1883b.9884b8"
            ],
            [
                "40ea1fae.07a01",
                "a1bf2712.cc88b8"
            ],
            [
                "202aa7aa.bc4be8",
                "518de824.756258"
            ],
            [
                "2fba7695.81332a",
                "ba7da14e.0d4b1"
            ]
        ]
    },
    {
        "id": "2260e883.1703b8",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "40ea1fae.07a01",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 460,
        "wires": []
    },
    {
        "id": "202aa7aa.bc4be8",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 680,
        "wires": []
    },
    {
        "id": "7202a48d.81a8fc",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1330,
        "y": 500,
        "wires": []
    },
    {
        "id": "98328330.21f3c",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1330,
        "y": 720,
        "wires": []
    },
    {
        "id": "d3d8c72a.8fca08",
        "type": "link out",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "mode": "link",
        "links": [
            "933b8ea0.9a552"
        ],
        "x": 1275,
        "y": 840,
        "wires": []
    },
    {
        "id": "369fd5be.173f9a",
        "type": "link out",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "mode": "link",
        "links": [
            "933b8ea0.9a552"
        ],
        "x": 1275,
        "y": 620,
        "wires": []
    },
    {
        "id": "8a6149b5.945308",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "Toggle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "testInput2",
        "payloadType": "str",
        "x": 910,
        "y": 500,
        "wires": [
            [
                "ed47ace5.345a9"
            ]
        ]
    },
    {
        "id": "a1bf2712.cc88b8",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Set Payload",
        "func": "msg.payload = msg.payload.testInput2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 460,
        "wires": [
            [
                "ed47ace5.345a9"
            ]
        ]
    },
    {
        "id": "518de824.756258",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Set Payload",
        "func": "msg.payload = msg.payload.testInput3;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "605a3a57.68d0a4"
            ]
        ]
    },
    {
        "id": "a7c1883b.9884b8",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Set Payload",
        "func": "msg.payload = msg.payload.testInput1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 260,
        "wires": [
            [
                "d9c64d70.401e88"
            ]
        ]
    },
    {
        "id": "2fba7695.81332a",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Set Payload",
        "func": "msg.payload = msg.payload.testInput4;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 880,
        "wires": [
            [
                "304a4680.d1f87a"
            ]
        ]
    },
    {
        "id": "ba7da14e.0d4b1",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 880,
        "wires": []
    },
    {
        "id": "ca36fec0.18905",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1330,
        "y": 920,
        "wires": []
    },
    {
        "id": "c1c84c77.a74aa",
        "type": "link out",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "mode": "link",
        "links": [
            "933b8ea0.9a552"
        ],
        "x": 1275,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a504e997.a15f58",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId4",
        "payload": "111",
        "payloadType": "num",
        "x": 270,
        "y": 360,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "710f6358.98587c",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId4",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "a0d2adcb.cee38",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Show Relay 4 Status",
        "func": "if ( msg.payload == true ) {\n    msg.topic = \"cardId4\";\n    msg.payload = \"Off\";\n} else if ( msg.payload == false ) {\n    msg.topic = \"cardId4\";\n    msg.payload = \"On\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1380,
        "y": 960,
        "wires": [
            [
                "aa6b82db.12e13",
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "aa6b82db.12e13",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1330,
        "y": 1000,
        "wires": []
    },
    {
        "id": "30bb2cb7.b46504",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Show Relay 1 Status",
        "func": "if ( msg.payload == true ) {\n    msg.topic = \"cardId\";\n    msg.payload = \"Off\";\n} else if ( msg.payload == false ) {\n    msg.topic = \"cardId\";\n    msg.payload = \"On\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 340,
        "wires": [
            [
                "f598030e.533ea",
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "f598030e.533ea",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1390,
        "y": 380,
        "wires": []
    },
    {
        "id": "39a8ac5d.cf2c24",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Show Relay 2 Status",
        "func": "if ( msg.payload == true ) {\n    msg.topic = \"cardId2\";\n    msg.payload = \"Off\";\n} else if ( msg.payload == false ) {\n    msg.topic = \"cardId2\";\n    msg.payload = \"On\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1360,
        "y": 540,
        "wires": [
            [
                "99503a98.9a4488",
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "99503a98.9a4488",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1390,
        "y": 580,
        "wires": []
    },
    {
        "id": "f7c8fed6.9972",
        "type": "function",
        "z": "43a1a9dc54dbd2b5",
        "name": "Show Relay 3 Status",
        "func": "if ( msg.payload == true ) {\n    msg.topic = \"cardId3\";\n    msg.payload = \"Off\";\n} else if ( msg.payload == false ) {\n    msg.topic = \"cardId3\";\n    msg.payload = \"On\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1360,
        "y": 760,
        "wires": [
            [
                "59624a75.b042c4",
                "4977524a.c304bc"
            ]
        ]
    },
    {
        "id": "59624a75.b042c4",
        "type": "debug",
        "z": "43a1a9dc54dbd2b5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1390,
        "y": 800,
        "wires": []
    },
    {
        "id": "bb7e02cd.63878",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "Toggle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "testInput3",
        "payloadType": "str",
        "x": 910,
        "y": 720,
        "wires": [
            [
                "605a3a57.68d0a4"
            ]
        ]
    },
    {
        "id": "15140af7.54e2b5",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "Toggle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "testInput4",
        "payloadType": "str",
        "x": 910,
        "y": 920,
        "wires": [
            [
                "304a4680.d1f87a"
            ]
        ]
    },
    {
        "id": "345c6535.38180a",
        "type": "inject",
        "z": "43a1a9dc54dbd2b5",
        "name": "Toggle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "testInput1",
        "payloadType": "str",
        "x": 910,
        "y": 320,
        "wires": [
            [
                "d9c64d70.401e88"
            ]
        ]
    },
    {
        "id": "d9c64d70.401e88",
        "type": "toggle",
        "z": "43a1a9dc54dbd2b5",
        "name": "Relay 1",
        "onOffTopic": "",
        "onValue": "true",
        "onType": "bool",
        "offValue": "false",
        "offType": "bool",
        "toggleTopic": "",
        "toggleValue": "testInput1",
        "toggleType": "str",
        "passOnOff": "",
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "eda5ac.30f38a58",
                "33b9cb08.e0c5b4",
                "30bb2cb7.b46504"
            ]
        ]
    },
    {
        "id": "ed47ace5.345a9",
        "type": "toggle",
        "z": "43a1a9dc54dbd2b5",
        "name": "Relay 2",
        "onOffTopic": "",
        "onValue": "true",
        "onType": "bool",
        "offValue": "false",
        "offType": "bool",
        "toggleTopic": "",
        "toggleValue": "testInput2",
        "toggleType": "str",
        "passOnOff": "",
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "7202a48d.81a8fc",
                "369fd5be.173f9a",
                "39a8ac5d.cf2c24"
            ]
        ]
    },
    {
        "id": "605a3a57.68d0a4",
        "type": "toggle",
        "z": "43a1a9dc54dbd2b5",
        "name": "Relay 3",
        "onOffTopic": "",
        "onValue": "true",
        "onType": "bool",
        "offValue": "false",
        "offType": "bool",
        "toggleTopic": "",
        "toggleValue": "",
        "toggleType": "any",
        "passOnOff": "",
        "x": 1140,
        "y": 720,
        "wires": [
            [
                "98328330.21f3c",
                "d3d8c72a.8fca08",
                "f7c8fed6.9972"
            ]
        ]
    },
    {
        "id": "304a4680.d1f87a",
        "type": "toggle",
        "z": "43a1a9dc54dbd2b5",
        "name": "Relay 4",
        "onOffTopic": "",
        "onValue": "true",
        "onType": "bool",
        "offValue": "false",
        "offType": "bool",
        "toggleTopic": "",
        "toggleValue": "",
        "toggleType": "any",
        "passOnOff": "",
        "x": 1140,
        "y": 920,
        "wires": [
            [
                "ca36fec0.18905",
                "c1c84c77.a74aa",
                "a0d2adcb.cee38"
            ]
        ]
    },
    {
        "id": "461e8ebd.154688",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 550,
        "y": 60,
        "wires": []
    },
    {
        "id": "30b26c38.a3765c",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "bf4ff609.dd68f"
            ]
        ]
    },
    {
        "id": "a3b5157.5b448e8",
        "type": "catch",
        "z": "652f4e57.e3d538",
        "name": "",
        "scope": null,
        "x": 760,
        "y": 60,
        "wires": [
            [
                "f4562026.e964e8",
                "527faaad.71bfb4",
                "3fcea88e.d87c4"
            ]
        ]
    },
    {
        "id": "f4562026.e964e8",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 930,
        "y": 60,
        "wires": []
    },
    {
        "id": "15c06b93.b1bd24",
        "type": "modbus-queue-info",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Read Client Queue",
        "topic": "",
        "unitid": "1",
        "queueReadIntervalTime": "1000",
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "fa873ff5.42afa",
        "errorOnHighLevel": false,
        "showStatusActivities": false,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 1520,
        "y": 120,
        "wires": [
            [
                "414c8e91.3579"
            ]
        ]
    },
    {
        "id": "b6ec7b66.431b9",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "reset on High",
        "func": "if(\"high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 100,
        "wires": [
            [
                "15c06b93.b1bd24"
            ]
        ]
    },
    {
        "id": "6a69f701.a84ee",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "reset on HighHigh",
        "func": "if(\"high high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "15c06b93.b1bd24"
            ]
        ]
    },
    {
        "id": "414c8e91.3579",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1730,
        "y": 120,
        "wires": []
    },
    {
        "id": "527faaad.71bfb4",
        "type": "switch",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Read Client",
        "property": "modbusClientName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modbus Local Read Client",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "6a69f701.a84ee",
                "b6ec7b66.431b9"
            ]
        ]
    },
    {
        "id": "5888f029.3989d",
        "type": "modbus-read",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Polling FC4",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "1",
        "rate": "500",
        "rateUnit": "ms",
        "delayOnStart": true,
        "startDelayTime": "1",
        "server": "fa873ff5.42afa",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 210,
        "y": 1440,
        "wires": [
            [
                "293e28c4.8b1fa",
                "4b154e45.9bb428",
                "c3d67def.95ff5"
            ],
            [
                "8be2662b.cf5f98",
                "d375aec4.fb738"
            ]
        ]
    },
    {
        "id": "293e28c4.8b1fa",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "d375aec4.fb738",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 430,
        "y": 1500,
        "wires": []
    },
    {
        "id": "8be2662b.cf5f98",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 470,
        "y": 1540,
        "wires": []
    },
    {
        "id": "4b154e45.9bb428",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 430,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c3d67def.95ff5",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 480,
        "y": 1400,
        "wires": []
    },
    {
        "id": "d9ffe1f3.4530d8",
        "type": "modbus-write",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Writing FC6",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "883d0976.8296d",
        "x": 480,
        "y": 800,
        "wires": [
            [
                "1e2d7820.c850e8",
                "4442cb93.61dff4",
                "f8d57814.430108"
            ],
            [
                "f7ebf848.9c04c",
                "c73cdfa6.10a5"
            ]
        ]
    },
    {
        "id": "d9ea409.84451c",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "2e944c71.7dbf2c"
            ]
        ]
    },
    {
        "id": "2e944c71.7dbf2c",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random",
        "func": "msg.payload = Math.random() * (65000 - 1) + 1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 800,
        "wires": [
            [
                "d9ffe1f3.4530d8"
            ]
        ]
    },
    {
        "id": "1e2d7820.c850e8",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 730,
        "y": 700,
        "wires": []
    },
    {
        "id": "f7ebf848.9c04c",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 710,
        "y": 840,
        "wires": []
    },
    {
        "id": "c73cdfa6.10a5",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 750,
        "y": 900,
        "wires": []
    },
    {
        "id": "f8d57814.430108",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 710,
        "y": 780,
        "wires": []
    },
    {
        "id": "4442cb93.61dff4",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 760,
        "y": 740,
        "wires": []
    },
    {
        "id": "9f2fea52.eaa4a8",
        "type": "modbus-queue-info",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Write Client Queue",
        "topic": "",
        "unitid": "1",
        "queueReadIntervalTime": "1000",
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "883d0976.8296d",
        "errorOnHighLevel": false,
        "showStatusActivities": false,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 1520,
        "y": 200,
        "wires": [
            [
                "c4986456.111ab8"
            ]
        ]
    },
    {
        "id": "4e72b028.97c058",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "reset on High",
        "func": "if(\"high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 180,
        "wires": [
            [
                "9f2fea52.eaa4a8"
            ]
        ]
    },
    {
        "id": "f7bed91f.92e3b",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "reset on HighHigh",
        "func": "if(\"high high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 220,
        "wires": [
            [
                "9f2fea52.eaa4a8"
            ]
        ]
    },
    {
        "id": "c4986456.111ab8",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1730,
        "y": 200,
        "wires": []
    },
    {
        "id": "3fcea88e.d87c4",
        "type": "switch",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Write Client",
        "property": "modbusClientName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modbus Local Write Client",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "f7bed91f.92e3b",
                "4e72b028.97c058"
            ]
        ]
    },
    {
        "id": "6185f559.84e4ec",
        "type": "modbus-write",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Writing FC5",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "1",
        "server": "883d0976.8296d",
        "x": 600,
        "y": 1060,
        "wires": [
            [
                "6c562f8c.305f38",
                "90994d7b.b9544",
                "adaa4ea7.deb068"
            ],
            [
                "7152ce83.436ec",
                "df118d8b.7eeb8"
            ]
        ]
    },
    {
        "id": "1d4a0af3.bdccc5",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1060,
        "wires": [
            [
                "ef8055a2.579698"
            ]
        ]
    },
    {
        "id": "ef8055a2.579698",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random",
        "func": "msg.payload = parseInt(Math.random() * (65000 - 1) + 1) % 2\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "6185f559.84e4ec"
            ]
        ]
    },
    {
        "id": "6c562f8c.305f38",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 850,
        "y": 960,
        "wires": []
    },
    {
        "id": "7152ce83.436ec",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 850,
        "y": 1100,
        "wires": []
    },
    {
        "id": "df118d8b.7eeb8",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 870,
        "y": 1160,
        "wires": []
    },
    {
        "id": "adaa4ea7.deb068",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 850,
        "y": 1040,
        "wires": []
    },
    {
        "id": "90994d7b.b9544",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 880,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d2c08ac9.b96e38",
        "type": "modbus-write",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Writing FC16",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "MHoldingRegisters",
        "adr": "0",
        "quantity": "10",
        "server": "883d0976.8296d",
        "x": 1440,
        "y": 780,
        "wires": [
            [
                "7685cbe6.07b604",
                "a0a3a877.0ac948",
                "6191adca.7ac9b4"
            ],
            [
                "b4d4ff41.d4e4d8",
                "335bad1c.f9e6a2"
            ]
        ]
    },
    {
        "id": "208c9c1d.546dc4",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "a57b5846.1be5c8"
            ]
        ]
    },
    {
        "id": "a57b5846.1be5c8",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random 10",
        "func": "msg.payload = [\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1\n    ]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 780,
        "wires": [
            [
                "d2c08ac9.b96e38"
            ]
        ]
    },
    {
        "id": "7685cbe6.07b604",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1710,
        "y": 680,
        "wires": []
    },
    {
        "id": "b4d4ff41.d4e4d8",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1690,
        "y": 820,
        "wires": []
    },
    {
        "id": "335bad1c.f9e6a2",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 1730,
        "y": 880,
        "wires": []
    },
    {
        "id": "6191adca.7ac9b4",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1690,
        "y": 760,
        "wires": []
    },
    {
        "id": "a0a3a877.0ac948",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 1740,
        "y": 720,
        "wires": []
    },
    {
        "id": "d2a72708.ce1a1",
        "type": "modbus-write",
        "z": "652f4e57.e3d538",
        "name": "Modbus Local Writing FC15",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "MCoils",
        "adr": "0",
        "quantity": "10",
        "server": "883d0976.8296d",
        "x": 1540,
        "y": 1040,
        "wires": [
            [
                "90e7a195.24a6a8",
                "cbfe21b4.7b9b9",
                "a87193da.49314"
            ],
            [
                "58230566.ee0f4c",
                "92bc265b.52ef6"
            ]
        ]
    },
    {
        "id": "60f0f46.a02150c",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 1040,
        "wires": [
            [
                "ba886d02.130e98"
            ]
        ]
    },
    {
        "id": "ba886d02.130e98",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random 10",
        "func": "msg.payload = [\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2    \n    ]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1310,
        "y": 1040,
        "wires": [
            [
                "d2a72708.ce1a1"
            ]
        ]
    },
    {
        "id": "90e7a195.24a6a8",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1790,
        "y": 940,
        "wires": []
    },
    {
        "id": "58230566.ee0f4c",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1790,
        "y": 1080,
        "wires": []
    },
    {
        "id": "92bc265b.52ef6",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 1810,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a87193da.49314",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1790,
        "y": 1020,
        "wires": []
    },
    {
        "id": "cbfe21b4.7b9b9",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 1820,
        "y": 980,
        "wires": []
    },
    {
        "id": "9f598122.0822a8",
        "type": "comment",
        "z": "652f4e57.e3d538",
        "name": "Normal Writing",
        "info": "",
        "x": 140,
        "y": 700,
        "wires": []
    },
    {
        "id": "e14e3869.eb3a5",
        "type": "modbus-flex-getter",
        "z": "652f4e57.e3d538",
        "name": "Modbus Flexible Read",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "fa873ff5.42afa",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 520,
        "y": 400,
        "wires": [
            [
                "ff88bff3.9f8ff",
                "6f54a366.20bebc",
                "ade16e02.cb6d18"
            ],
            [
                "f3f1b052.baf858",
                "fa9a0149.27dc7"
            ]
        ]
    },
    {
        "id": "2eea6853.20c25",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "e38a7a4f.8c2f48"
            ]
        ]
    },
    {
        "id": "e38a7a4f.8c2f48",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "FC1",
        "func": "msg.payload = { 'fc': 1, 'unitid': 1, 'address': 0 , 'quantity': 16 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "e14e3869.eb3a5"
            ]
        ]
    },
    {
        "id": "ff88bff3.9f8ff",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "f3f1b052.baf858",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 750,
        "y": 440,
        "wires": []
    },
    {
        "id": "fa9a0149.27dc7",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 790,
        "y": 480,
        "wires": []
    },
    {
        "id": "ade16e02.cb6d18",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "6f54a366.20bebc",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "8ed3e78.4db9a98",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "de331f5c.d08768"
            ]
        ]
    },
    {
        "id": "de331f5c.d08768",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "FC2",
        "func": "msg.payload = { 'fc': 2, 'unitid': 1, 'address': 0 , 'quantity': 8 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 380,
        "wires": [
            [
                "e14e3869.eb3a5"
            ]
        ]
    },
    {
        "id": "3c4efee.7c84982",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "ef723150.a5224"
            ]
        ]
    },
    {
        "id": "ef723150.a5224",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "FC3",
        "func": "msg.payload = { 'fc': 3, 'unitid': 1, 'address': 0 , 'quantity': 8 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 420,
        "wires": [
            [
                "e14e3869.eb3a5"
            ]
        ]
    },
    {
        "id": "f370e948.f19418",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "ac2f1711.01ace"
            ]
        ]
    },
    {
        "id": "ac2f1711.01ace",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "FC4",
        "func": "msg.payload = { 'fc': 4, 'unitid': 1, 'address': 0 , 'quantity': 10 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 460,
        "wires": [
            [
                "e14e3869.eb3a5"
            ]
        ]
    },
    {
        "id": "ecb9178e.9920e",
        "type": "modbus-flex-write",
        "z": "652f4e57.e3d538",
        "name": "Modbus Flexible Write",
        "showStatusActivities": false,
        "showErrors": true,
        "server": "883d0976.8296d",
        "x": 1540,
        "y": 380,
        "wires": [
            [
                "734d823a.4838ec",
                "4cdfafbd.8287c",
                "209706a5.f36202"
            ],
            [
                "9e2e2512.eec7a8",
                "46369521.c482b4"
            ]
        ]
    },
    {
        "id": "734d823a.4838ec",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1770,
        "y": 280,
        "wires": []
    },
    {
        "id": "9e2e2512.eec7a8",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1750,
        "y": 420,
        "wires": []
    },
    {
        "id": "46369521.c482b4",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 1790,
        "y": 460,
        "wires": []
    },
    {
        "id": "209706a5.f36202",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1750,
        "y": 360,
        "wires": []
    },
    {
        "id": "4cdfafbd.8287c",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 1800,
        "y": 320,
        "wires": []
    },
    {
        "id": "5520a02e.18592",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1100,
        "y": 320,
        "wires": [
            [
                "a51c8357.9ac0c"
            ]
        ]
    },
    {
        "id": "a51c8357.9ac0c",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random 10 FC16",
        "func": "let values = [\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1,\n    Math.random() * (65000 - 1) + 1\n]\nmsg.payload = { 'value': values, 'fc': 16, 'unitid': 1, 'address': 0 , 'quantity': 10 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1290,
        "y": 320,
        "wires": [
            [
                "ecb9178e.9920e"
            ]
        ]
    },
    {
        "id": "1200bb7e.c6d265",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1100,
        "y": 360,
        "wires": [
            [
                "a672caf3.0351"
            ]
        ]
    },
    {
        "id": "a672caf3.0351",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random 10 FC15",
        "func": "let values = [\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2,\n    parseInt(Math.random() * (65000 - 1) + 1) % 2    \n]\nmsg.payload = { 'value': values, 'fc': 15, 'unitid': 1, 'address': 0 , 'quantity': 10 }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1290,
        "y": 360,
        "wires": [
            [
                "ecb9178e.9920e"
            ]
        ]
    },
    {
        "id": "cbdcdf7c.3fccf8",
        "type": "comment",
        "z": "652f4e57.e3d538",
        "name": "Flexible Read and Write",
        "info": "",
        "x": 160,
        "y": 280,
        "wires": []
    },
    {
        "id": "9c2490db.bf40f",
        "type": "modbus-getter",
        "z": "652f4e57.e3d538",
        "name": "Modbus Event Read FC3",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "5",
        "server": "fa873ff5.42afa",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 1110,
        "y": 1440,
        "wires": [
            [
                "8b2600b1.ee44f",
                "c4d95a04.09c2d",
                "b24a0dd9.6f1e28"
            ],
            [
                "7e33f6ef.578658",
                "97f45b69.ce34f"
            ]
        ]
    },
    {
        "id": "8b2600b1.ee44f",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1350,
        "y": 1380,
        "wires": []
    },
    {
        "id": "7e33f6ef.578658",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1330,
        "y": 1520,
        "wires": []
    },
    {
        "id": "97f45b69.ce34f",
        "type": "modbus-response",
        "z": "652f4e57.e3d538",
        "name": "",
        "registerShowMax": 20,
        "x": 1370,
        "y": 1560,
        "wires": []
    },
    {
        "id": "b24a0dd9.6f1e28",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1330,
        "y": 1460,
        "wires": []
    },
    {
        "id": "c4d95a04.09c2d",
        "type": "debug",
        "z": "652f4e57.e3d538",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 1380,
        "y": 1420,
        "wires": []
    },
    {
        "id": "58aa9a53.75fee4",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 1440,
        "wires": [
            [
                "9c2490db.bf40f"
            ]
        ]
    },
    {
        "id": "ea49bd56.ecece8",
        "type": "comment",
        "z": "652f4e57.e3d538",
        "name": "Normal Reading",
        "info": "",
        "x": 140,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c1b52524.e78b4",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1100,
        "y": 400,
        "wires": [
            [
                "372a573f.d4f28"
            ]
        ]
    },
    {
        "id": "372a573f.d4f28",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random FC 6",
        "func": "let values = Math.random() * (65000 - 1) + 1\nmsg.payload = { 'value': values, 'fc': 6, 'unitid': 1, 'address': 0 , 'quantity': 1 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1300,
        "y": 400,
        "wires": [
            [
                "ecb9178e.9920e"
            ]
        ]
    },
    {
        "id": "8ff75dfe.fb5808",
        "type": "inject",
        "z": "652f4e57.e3d538",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1100,
        "y": 440,
        "wires": [
            [
                "d91b7970.2a5c9"
            ]
        ]
    },
    {
        "id": "d91b7970.2a5c9",
        "type": "function",
        "z": "652f4e57.e3d538",
        "name": "Random FC 5",
        "func": "let values = parseInt(Math.random() * (65000 - 1) + 1) % 2\nmsg.payload = { value: values, 'fc': 5, 'unitid': 1, 'address': 0 , 'quantity': 10 }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1300,
        "y": 440,
        "wires": [
            [
                "ecb9178e.9920e"
            ]
        ]
    },
    {
        "id": "bf4ff609.dd68f",
        "type": "modbus-flex-server",
        "z": "652f4e57.e3d538",
        "name": "",
        "logEnabled": false,
        "serverAddress": "0.0.0.0",
        "serverPort": "15502",
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr > node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr > node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": false,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "461e8ebd.154688"
            ],
            [
                "461e8ebd.154688"
            ],
            [
                "461e8ebd.154688"
            ],
            [
                "461e8ebd.154688"
            ],
            []
        ]
    },
    {
        "id": "b5c5319c.07e0b8",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Inject",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 20,
        "wires": [
            [
                "7c7e0ef2.453118"
            ]
        ]
    },
    {
        "id": "ad6a539.c3737b",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "f5b52f9.da40ed"
            ]
        ]
    },
    {
        "id": "f5b52f9.da40ed",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "Set coils register 0",
        "func": "msg.payload = { \n    'value': msg.payload, \n    'register': 'coils', \n    'address': 0 ,\n    'disablemsg' : 1\n} ;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "7c7e0ef2.453118"
            ]
        ]
    },
    {
        "id": "6d5a3077.e2632",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "f5b52f9.da40ed"
            ]
        ]
    },
    {
        "id": "c2a77416.0c366",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "holding ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 940,
        "y": 60,
        "wires": []
    },
    {
        "id": "ef53de42.56dfd8",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "coils ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 930,
        "y": 100,
        "wires": []
    },
    {
        "id": "37d9456a.be0852",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "input ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 930,
        "y": 140,
        "wires": []
    },
    {
        "id": "2ba65ddb.5f27ca",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "discrete inputs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 960,
        "y": 180,
        "wires": []
    },
    {
        "id": "7c7e0ef2.453118",
        "type": "modbus-flex-server",
        "z": "773d005b.cd22d8",
        "name": "",
        "logEnabled": false,
        "serverAddress": "127.0.0.1",
        "serverPort": 11502,
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": false,
        "x": 680,
        "y": 120,
        "wires": [
            [
                "c2a77416.0c366"
            ],
            [
                "ef53de42.56dfd8"
            ],
            [
                "37d9456a.be0852"
            ],
            [
                "2ba65ddb.5f27ca"
            ],
            []
        ]
    },
    {
        "id": "7f6bf77b.91b04",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "624b4932.55bb48"
            ]
        ]
    },
    {
        "id": "624b4932.55bb48",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "Set discrete register 0",
        "func": "msg.payload = { \n    'value': msg.payload, \n    'register': 'discrete', \n    'address': 0 ,\n    'disablemsg' : 1\n} ;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 200,
        "wires": [
            [
                "7c7e0ef2.453118"
            ]
        ]
    },
    {
        "id": "261a1d0f.1892d2",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "624b4932.55bb48"
            ]
        ]
    },
    {
        "id": "8e14ca38.67c7e8",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "a201fa81.71e298"
            ]
        ]
    },
    {
        "id": "a201fa81.71e298",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "Set holding register 0",
        "func": "msg.payload = { \n    'value': msg.payload, \n    'register': 'holding', \n    'address': 0 ,\n    'disablemsg' : 1\n} ;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 300,
        "wires": [
            [
                "7c7e0ef2.453118"
            ]
        ]
    },
    {
        "id": "2e8ef6c0.bf2f42",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 90,
        "y": 280,
        "wires": [
            [
                "a201fa81.71e298"
            ]
        ]
    },
    {
        "id": "4a8185c6.28407c",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 90,
        "y": 420,
        "wires": [
            [
                "b9f8e19b.5999f"
            ]
        ]
    },
    {
        "id": "b9f8e19b.5999f",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "Set Input register 0",
        "func": "msg.payload = { \n    'value': msg.payload, \n    'register': 'input', \n    'address': 0 ,\n    'disablemsg' : 1\n} ;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 400,
        "wires": [
            [
                "7c7e0ef2.453118"
            ]
        ]
    },
    {
        "id": "94df215c.c128e",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 90,
        "y": 380,
        "wires": [
            [
                "b9f8e19b.5999f"
            ]
        ]
    },
    {
        "id": "c673953e.4b3658",
        "type": "modbus-flex-getter",
        "z": "773d005b.cd22d8",
        "name": "Modbus Flexible Read",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "4483385.85f9ac8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 500,
        "y": 640,
        "wires": [
            [
                "5913ce4a.9fdbb",
                "834e4b55.1558e8",
                "905a2f03.a1a32"
            ],
            [
                "98c58674.0cc79",
                "622bfb4f.c83aec"
            ]
        ]
    },
    {
        "id": "93ed4e15.56a4",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "e761d393.a42a1"
            ]
        ]
    },
    {
        "id": "e761d393.a42a1",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "FC1",
        "func": "msg.payload = { 'fc': 1, 'unitid': 1, 'address': 0 , 'quantity': 16 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 580,
        "wires": [
            [
                "c673953e.4b3658"
            ]
        ]
    },
    {
        "id": "5913ce4a.9fdbb",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 750,
        "y": 540,
        "wires": []
    },
    {
        "id": "98c58674.0cc79",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 730,
        "y": 680,
        "wires": []
    },
    {
        "id": "622bfb4f.c83aec",
        "type": "modbus-response",
        "z": "773d005b.cd22d8",
        "name": "",
        "registerShowMax": 20,
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "905a2f03.a1a32",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 730,
        "y": 620,
        "wires": []
    },
    {
        "id": "834e4b55.1558e8",
        "type": "debug",
        "z": "773d005b.cd22d8",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "responseBuffer",
        "x": 780,
        "y": 580,
        "wires": []
    },
    {
        "id": "764d20db.f6cce",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "37e6f7dc.f52e68"
            ]
        ]
    },
    {
        "id": "37e6f7dc.f52e68",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "FC2",
        "func": "msg.payload = { 'fc': 2, 'unitid': 1, 'address': 0 , 'quantity': 8 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 620,
        "wires": [
            [
                "c673953e.4b3658"
            ]
        ]
    },
    {
        "id": "4f644547.4ec13c",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 660,
        "wires": [
            [
                "6f9cbd7.c5650c4"
            ]
        ]
    },
    {
        "id": "6f9cbd7.c5650c4",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "FC3",
        "func": "msg.payload = { 'fc': 3, 'unitid': 1, 'address': 0 , 'quantity': 8 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 660,
        "wires": [
            [
                "c673953e.4b3658"
            ]
        ]
    },
    {
        "id": "1554cf19.82b009",
        "type": "inject",
        "z": "773d005b.cd22d8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "f74b28a3.5bd1a"
            ]
        ]
    },
    {
        "id": "f74b28a3.5bd1a",
        "type": "function",
        "z": "773d005b.cd22d8",
        "name": "FC4",
        "func": "msg.payload = { 'fc': 4, 'unitid': 1, 'address': 0 , 'quantity': 10 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 700,
        "wires": [
            [
                "c673953e.4b3658"
            ]
        ]
    },
    {
        "id": "653f1ec9.b19868",
        "type": "comment",
        "z": "773d005b.cd22d8",
        "name": "Flexible Read and Write",
        "info": "",
        "x": 140,
        "y": 520,
        "wires": []
    },
    {
        "id": "d411a49f.e9ffd8",
        "type": "modbus-server",
        "z": "42ed18ca.652838",
        "name": "",
        "logEnabled": false,
        "hostname": "0.0.0.0",
        "serverPort": "10502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": "1024",
        "holdingBufferSize": "1024",
        "inputBufferSize": "1024",
        "discreteBufferSize": "1024",
        "showErrors": true,
        "x": 435,
        "y": 160,
        "wires": [
            [
                "36782533.082afa"
            ],
            [
                "fa7b2d15.15806"
            ],
            [
                "6ec442b7.58008c"
            ],
            [
                "1fab23a0.563b14"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "98d7383d.aa12a",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [1,1,1], \n    'register': 'input', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 100,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "f9c46e21.735658",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 100,
        "wires": [
            [
                "98d7383d.aa12a"
            ]
        ],
        "l": false
    },
    {
        "id": "1fab23a0.563b14",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 535,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "d0b032a8.169678",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 480,
        "wires": [
            [],
            [
                "a51b31cc.63a8c8"
            ]
        ],
        "l": false
    },
    {
        "id": "a51b31cc.63a8c8",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 480,
        "wires": [],
        "l": false
    },
    {
        "id": "5fc93873.d0eb58",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [233,234,235], \n    'register': 'holding', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 140,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "1df0ae40.cb902a",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 140,
        "wires": [
            [
                "5fc93873.d0eb58"
            ]
        ],
        "l": false
    },
    {
        "id": "6ec442b7.58008c",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 535,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "fa7b2d15.15806",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 535,
        "y": 120,
        "wires": [],
        "l": false
    },
    {
        "id": "36782533.082afa",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 535,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "afaf95b3.c7345",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 535,
        "y": 240,
        "wires": [],
        "l": false
    },
    {
        "id": "74c23b77.016c1c",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Input",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 420,
        "wires": [
            [],
            [
                "207cf0ad.a46348"
            ]
        ],
        "l": false
    },
    {
        "id": "207cf0ad.a46348",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 420,
        "wires": [],
        "l": false
    },
    {
        "id": "550f6965.7b646",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'coils', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 180,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "8e0fdad2.3d36d8",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 180,
        "wires": [
            [
                "550f6965.7b646"
            ]
        ],
        "l": false
    },
    {
        "id": "d9e798fa.a1a0f",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 360,
        "wires": [
            [],
            [
                "3ae7077d.cc7c9"
            ]
        ],
        "l": false
    },
    {
        "id": "3ae7077d.cc7c9",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 360,
        "wires": [],
        "l": false
    },
    {
        "id": "50139c42.f53b8c",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 560,
        "wires": [
            [],
            [
                "7679a351.b1b4d4"
            ]
        ],
        "l": false
    },
    {
        "id": "7679a351.b1b4d4",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 560,
        "wires": [],
        "l": false
    },
    {
        "id": "81bc1a3a.a886c",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'discrete', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 220,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "cd2a5684.44ff68",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 220,
        "wires": [
            [
                "81bc1a3a.a886c"
            ]
        ],
        "l": false
    },
    {
        "id": "7da7ffd5.e0a78",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    \"value\": [101, 201, 102, 202, 103, 203, 104, 204, 105, 205, 106, 206],\n    \"register\": 'input',\n    \"address\": 0,\n    \"disableMsgOutput\": 0\n  }; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 100,
        "wires": [
            [
                "a36007c2.e2ab",
                "9b38071f.f0e64"
            ]
        ],
        "l": false
    },
    {
        "id": "60e01cfb.657bcc",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 100,
        "wires": [
            [
                "7da7ffd5.e0a78"
            ]
        ],
        "l": false
    },
    {
        "id": "b70c703a.2ce758",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "d88d61f0.43ed4",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [233,234,235], \n    'register': 'holding', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 140,
        "wires": [
            [
                "a36007c2.e2ab"
            ]
        ],
        "l": false
    },
    {
        "id": "42e70f31.2716f8",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 140,
        "wires": [
            [
                "d88d61f0.43ed4"
            ]
        ],
        "l": false
    },
    {
        "id": "7396158c.16bc64",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "dad8bd10.17615",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 120,
        "wires": [],
        "l": false
    },
    {
        "id": "3295320d.e0b5a6",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "f0dbb7f0.c60cb",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1035,
        "y": 240,
        "wires": [],
        "l": false
    },
    {
        "id": "d948112a.b763e8",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'coils', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 180,
        "wires": [
            [
                "a36007c2.e2ab"
            ]
        ],
        "l": false
    },
    {
        "id": "e26f5ad9.a27318",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 180,
        "wires": [
            [
                "d948112a.b763e8"
            ]
        ],
        "l": false
    },
    {
        "id": "b5b09453.c697f8",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'discrete', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 220,
        "wires": [
            [
                "a36007c2.e2ab"
            ]
        ],
        "l": false
    },
    {
        "id": "7f3a58f6.09d4c",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 220,
        "wires": [
            [
                "b5b09453.c697f8"
            ]
        ],
        "l": false
    },
    {
        "id": "a36007c2.e2ab",
        "type": "modbus-flex-server",
        "z": "42ed18ca.652838",
        "name": "",
        "logEnabled": false,
        "serverAddress": "0.0.0.0",
        "serverPort": 11502,
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": true,
        "x": 915,
        "y": 160,
        "wires": [
            [
                "3295320d.e0b5a6"
            ],
            [
                "dad8bd10.17615"
            ],
            [
                "7396158c.16bc64"
            ],
            [
                "b70c703a.2ce758"
            ],
            [
                "f0dbb7f0.c60cb"
            ]
        ],
        "l": false
    },
    {
        "id": "7f32509f.0951b",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 500,
        "wires": [
            [],
            [
                "7080819.2832e"
            ]
        ],
        "l": false
    },
    {
        "id": "7080819.2832e",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 870,
        "y": 500,
        "wires": [],
        "l": false
    },
    {
        "id": "38f7ff96.70e68",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Input",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 440,
        "wires": [
            [],
            [
                "45cdacc4.8bc574"
            ]
        ],
        "l": false
    },
    {
        "id": "45cdacc4.8bc574",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 870,
        "y": 440,
        "wires": [],
        "l": false
    },
    {
        "id": "d820acbf.3c10e8",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 380,
        "wires": [
            [],
            [
                "f28c037a.6514a"
            ]
        ],
        "l": false
    },
    {
        "id": "f28c037a.6514a",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 895,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "b71444df.a52298",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 580,
        "wires": [
            [],
            [
                "8597b09f.6c6ae"
            ]
        ],
        "l": false
    },
    {
        "id": "8597b09f.6c6ae",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 870,
        "y": 580,
        "wires": [],
        "l": false
    },
    {
        "id": "9b38071f.f0e64",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 915,
        "y": 60,
        "wires": [],
        "l": false
    },
    {
        "id": "7dd49c19.29e75c",
        "type": "modbus-server",
        "z": "c88a71c9.688818",
        "name": "",
        "logEnabled": false,
        "hostname": "",
        "serverPort": "14502",
        "responseDelay": "50",
        "delayUnit": "ms",
        "coilsBufferSize": 1024,
        "holdingBufferSize": 1024,
        "inputBufferSize": 1024,
        "discreteBufferSize": "1024",
        "showErrors": true,
        "x": 360,
        "y": 80,
        "wires": [
            [
                "e4beac85.1d4d78"
            ],
            [
                "e4beac85.1d4d78"
            ],
            [
                "e4beac85.1d4d78"
            ],
            [
                "e4beac85.1d4d78"
            ],
            [
                "2534b73c.f4a13"
            ]
        ]
    },
    {
        "id": "699046ec.3e1b78",
        "type": "inject",
        "z": "c88a71c9.688818",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "7dd49c19.29e75c"
            ]
        ]
    },
    {
        "id": "e4beac85.1d4d78",
        "type": "debug",
        "z": "c88a71c9.688818",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 590,
        "y": 80,
        "wires": []
    },
    {
        "id": "8ffaec31.e2a02",
        "type": "debug",
        "z": "c88a71c9.688818",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 570,
        "y": 180,
        "wires": []
    },
    {
        "id": "62981a95.cd186c",
        "type": "inject",
        "z": "c88a71c9.688818",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "a56de452.aafbd8"
            ]
        ]
    },
    {
        "id": "2bc1708e.a8539",
        "type": "comment",
        "z": "c88a71c9.688818",
        "name": "Information",
        "info": "The Modbus Server and Modbus Flex Server \nworking with all reading and writing nodes.\n\nThese are two different servers \nfrom different libraries.\n\nThe simple examples hold \nthe same functions for both servers.\n",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "a56de452.aafbd8",
        "type": "modbus-flex-server",
        "z": "c88a71c9.688818",
        "name": "",
        "logEnabled": false,
        "serverAddress": "0.0.0.0",
        "serverPort": "15502",
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr > node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr > node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": true,
        "x": 380,
        "y": 180,
        "wires": [
            [
                "8ffaec31.e2a02"
            ],
            [
                "8ffaec31.e2a02"
            ],
            [
                "8ffaec31.e2a02"
            ],
            [
                "8ffaec31.e2a02"
            ],
            [
                "afb69812.fc4d68"
            ]
        ]
    },
    {
        "id": "afb69812.fc4d68",
        "type": "debug",
        "z": "c88a71c9.688818",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 570,
        "y": 220,
        "wires": []
    },
    {
        "id": "2534b73c.f4a13",
        "type": "debug",
        "z": "c88a71c9.688818",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 590,
        "y": 120,
        "wires": []
    },
    {
        "id": "f25bd8a6.734138",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 610,
        "y": 440,
        "wires": []
    },
    {
        "id": "c0e162d2.6db27",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 710,
        "y": 320,
        "wires": []
    },
    {
        "id": "f9c3ebf8.f2e6b8",
        "type": "modbus-response",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "registerShowMax": "10",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "e0e8e21c.f917b",
        "type": "modbus-read",
        "z": "5b26a23d.a8a06c",
        "name": "Automatic Read FC3",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "10",
        "rate": "8",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "2",
        "server": "352955bb.be6e6a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "1d537db5.0353fa"
            ],
            [
                "eba31f91.af43a",
                "4118dde8.6df054"
            ]
        ]
    },
    {
        "id": "eba31f91.af43a",
        "type": "modbus-response",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "registerShowMax": "20",
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "1d537db5.0353fa",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 450,
        "y": 60,
        "wires": []
    },
    {
        "id": "a7fbe888.fdf11",
        "type": "modbus-response",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "registerShowMax": "20",
        "x": 630,
        "y": 480,
        "wires": []
    },
    {
        "id": "e1a56f7c.98a5c8",
        "type": "inject",
        "z": "5b26a23d.a8a06c",
        "name": "Get!",
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "a765793e.a9ac"
            ]
        ]
    },
    {
        "id": "7123d832.8f5228",
        "type": "inject",
        "z": "5b26a23d.a8a06c",
        "name": "Get every second",
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "2ccc10d7.f00728"
            ]
        ]
    },
    {
        "id": "cda168cc.b7a57",
        "type": "modbus-response",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "registerShowMax": "5",
        "x": 1010,
        "y": 300,
        "wires": []
    },
    {
        "id": "6293ed5b.e22d6c",
        "type": "inject",
        "z": "5b26a23d.a8a06c",
        "name": "Get flexible!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "391d65b9.85b07a"
            ]
        ]
    },
    {
        "id": "391d65b9.85b07a",
        "type": "function",
        "z": "5b26a23d.a8a06c",
        "name": "Read 0-9 on Unit 1 FC3",
        "func": "msg.payload = { input: msg.payload, 'fc': 3, 'unitid': 1, 'address': 0 , 'quantity': 10 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "823b8c53.ee14b8"
            ]
        ]
    },
    {
        "id": "21d10a41.4a5d56",
        "type": "function",
        "z": "5b26a23d.a8a06c",
        "name": "Read 10-18 on Unit 1 FC3",
        "func": "msg.payload = { input: msg.payload, 'fc': 3, 'unitid': 1, 'address': 10 , 'quantity': 8 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 260,
        "wires": [
            [
                "823b8c53.ee14b8"
            ]
        ]
    },
    {
        "id": "c4a87f77.06804",
        "type": "inject",
        "z": "5b26a23d.a8a06c",
        "name": "Get flexible!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "21d10a41.4a5d56"
            ]
        ]
    },
    {
        "id": "823b8c53.ee14b8",
        "type": "modbus-flex-getter",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "352955bb.be6e6a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 740,
        "y": 240,
        "wires": [
            [
                "399af77.a109088"
            ],
            [
                "cda168cc.b7a57",
                "f12542b3.505cf"
            ]
        ]
    },
    {
        "id": "ffc9d28b.806998",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 610,
        "y": 560,
        "wires": []
    },
    {
        "id": "52ff3397.1902ac",
        "type": "modbus-response",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "registerShowMax": "20",
        "x": 630,
        "y": 600,
        "wires": []
    },
    {
        "id": "5d569041.3b246",
        "type": "inject",
        "z": "5b26a23d.a8a06c",
        "name": "Get!",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "60c1ec4c.275374"
            ]
        ]
    },
    {
        "id": "759e0070.059d38",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 610,
        "y": 690,
        "wires": []
    },
    {
        "id": "f89ba70c.f95b2",
        "type": "modbus-response",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "registerShowMax": "20",
        "x": 630,
        "y": 730,
        "wires": []
    },
    {
        "id": "3c12b070.610f98",
        "type": "inject",
        "z": "5b26a23d.a8a06c",
        "name": "Get!",
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "54e29432.0aa5cc"
            ]
        ]
    },
    {
        "id": "2ccc10d7.f00728",
        "type": "modbus-getter",
        "z": "5b26a23d.a8a06c",
        "name": "Half-Automatic Getter FC4",
        "showStatusActivities": true,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "10",
        "server": "352955bb.be6e6a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 440,
        "y": 340,
        "wires": [
            [
                "c0e162d2.6db27"
            ],
            [
                "f9c3ebf8.f2e6b8"
            ]
        ]
    },
    {
        "id": "a765793e.a9ac",
        "type": "modbus-getter",
        "z": "5b26a23d.a8a06c",
        "name": "Manual Getter FC3",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "10",
        "server": "352955bb.be6e6a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "f25bd8a6.734138"
            ],
            [
                "a7fbe888.fdf11"
            ]
        ]
    },
    {
        "id": "60c1ec4c.275374",
        "type": "modbus-getter",
        "z": "5b26a23d.a8a06c",
        "name": "Manual Getter FC1",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "10",
        "quantity": "1",
        "server": "352955bb.be6e6a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 330,
        "y": 600,
        "wires": [
            [
                "ffc9d28b.806998"
            ],
            [
                "52ff3397.1902ac"
            ]
        ]
    },
    {
        "id": "54e29432.0aa5cc",
        "type": "modbus-getter",
        "z": "5b26a23d.a8a06c",
        "name": "Manual Getter FC2",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Input",
        "adr": "0",
        "quantity": "10",
        "server": "352955bb.be6e6a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 330,
        "y": 720,
        "wires": [
            [
                "759e0070.059d38"
            ],
            [
                "f89ba70c.f95b2"
            ]
        ]
    },
    {
        "id": "399af77.a109088",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 990,
        "y": 220,
        "wires": []
    },
    {
        "id": "f12542b3.505cf",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 970,
        "y": 260,
        "wires": []
    },
    {
        "id": "4118dde8.6df054",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 430,
        "y": 100,
        "wires": []
    },
    {
        "id": "a865fbaf.367808",
        "type": "comment",
        "z": "5b26a23d.a8a06c",
        "name": "Modbus Server",
        "info": "These nodes are to write to the Modbus Server.",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "cfad602f.fa69c8",
        "type": "catch",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 720,
        "y": 80,
        "wires": [
            [
                "e0901843.1a8d4",
                "9bd0a01b.f370a8"
            ]
        ]
    },
    {
        "id": "e0901843.1a8d4",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 910,
        "y": 140,
        "wires": []
    },
    {
        "id": "387fc05e.ba7838",
        "type": "modbus-queue-info",
        "z": "5b26a23d.a8a06c",
        "name": "Server Client Queue",
        "topic": "",
        "unitid": "1",
        "queueReadIntervalTime": "1000",
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "352955bb.be6e6a",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 1400,
        "y": 80,
        "wires": [
            [
                "6e288031.0f3bb"
            ]
        ]
    },
    {
        "id": "c3fc62a4.0522f8",
        "type": "function",
        "z": "5b26a23d.a8a06c",
        "name": "reset on High",
        "func": "if(\"high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 60,
        "wires": [
            [
                "387fc05e.ba7838"
            ]
        ]
    },
    {
        "id": "dd790617.d9a738",
        "type": "function",
        "z": "5b26a23d.a8a06c",
        "name": "reset on HighHigh",
        "func": "if(\"high high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 100,
        "wires": [
            [
                "387fc05e.ba7838"
            ]
        ]
    },
    {
        "id": "6e288031.0f3bb",
        "type": "debug",
        "z": "5b26a23d.a8a06c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1590,
        "y": 80,
        "wires": []
    },
    {
        "id": "9bd0a01b.f370a8",
        "type": "switch",
        "z": "5b26a23d.a8a06c",
        "name": "Modbus Server",
        "property": "modbusClientName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modbus Server",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 920,
        "y": 80,
        "wires": [
            [
                "c3fc62a4.0522f8",
                "dd790617.d9a738"
            ]
        ]
    },
    {
        "id": "101179f2.207b46",
        "type": "modbus-flex-write",
        "z": "7d09e02b.55be3",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "352955bb.be6e6a",
        "emptyMsgOnFail": true,
        "x": 730,
        "y": 300,
        "wires": [
            [
                "d5f6943c.f31168"
            ],
            [
                "22682227.4cff5e",
                "74137990.5ced8"
            ]
        ]
    },
    {
        "id": "c33ab024.fd8f38",
        "type": "modbus-flex-write",
        "z": "7d09e02b.55be3",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "server": "352955bb.be6e6a",
        "emptyMsgOnFail": true,
        "x": 730,
        "y": 140,
        "wires": [
            [
                "4f4487c.d2af0f8"
            ],
            [
                "b94da021.2eef68",
                "c5a256e9.8a997"
            ]
        ]
    },
    {
        "id": "b94da021.2eef68",
        "type": "modbus-response",
        "z": "7d09e02b.55be3",
        "name": "",
        "registerShowMax": 20,
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "e2ef7b30.196b5",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "Write multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,2,3,4,5,6,7,8,9,10]",
        "payloadType": "json",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "40f5364e.ac0c2"
            ]
        ]
    },
    {
        "id": "40f5364e.ac0c2",
        "type": "function",
        "z": "7d09e02b.55be3",
        "name": "Write 0-9 on Unit 1 FC15",
        "func": "msg.payload = { value: msg.payload, 'fc': 15, 'unitid': 1, 'address': 0 , 'quantity': 10 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 100,
        "wires": [
            [
                "c33ab024.fd8f38"
            ]
        ]
    },
    {
        "id": "c60dd8e2.d29288",
        "type": "function",
        "z": "7d09e02b.55be3",
        "name": "Write 10-18 on Unit 1 FC15",
        "func": "msg.payload = { value: msg.payload, 'fc': 15, 'unitid': 1, 'address': 10 , 'quantity': 9 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 140,
        "wires": [
            [
                "c33ab024.fd8f38"
            ]
        ]
    },
    {
        "id": "58b094c3.988e74",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "Write wrong multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,2,3,4,5,6,7,8,9,10]",
        "payloadType": "json",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "c60dd8e2.d29288"
            ]
        ]
    },
    {
        "id": "22682227.4cff5e",
        "type": "modbus-response",
        "z": "7d09e02b.55be3",
        "name": "",
        "registerShowMax": 20,
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "2bd17c1b.842a4c",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "Write wrong multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,0,1,0,1,0,1,1]",
        "payloadType": "json",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "1a6a17c2.18d91"
            ]
        ]
    },
    {
        "id": "1a6a17c2.18d91",
        "type": "function",
        "z": "7d09e02b.55be3",
        "name": "Write 0-9 on Unit 1 FC16",
        "func": "msg.payload = { value: msg.payload, 'fc': 16, 'unitid': 1, 'address': 0 , 'quantity': 10 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 280,
        "wires": [
            [
                "101179f2.207b46"
            ]
        ]
    },
    {
        "id": "f22c680d.2cd4e",
        "type": "function",
        "z": "7d09e02b.55be3",
        "name": "Write 10 on Unit 1 FC6",
        "func": "msg.payload = { value: msg.payload, 'fc': 6, 'unitid': 1, 'address': 10 , 'quantity': 1 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 320,
        "wires": [
            [
                "101179f2.207b46"
            ]
        ]
    },
    {
        "id": "ba0b6d46.9d8168",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "Write single!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "2345",
        "payloadType": "num",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "f22c680d.2cd4e"
            ]
        ]
    },
    {
        "id": "d5f6943c.f31168",
        "type": "debug",
        "z": "7d09e02b.55be3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 240,
        "wires": []
    },
    {
        "id": "bb6d29e7.8f04c",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "Write single!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "c2e47ce8.03bc48"
            ]
        ]
    },
    {
        "id": "c2e47ce8.03bc48",
        "type": "function",
        "z": "7d09e02b.55be3",
        "name": "Write 10 on Unit 1 FC5",
        "func": "msg.payload = { value: msg.payload, 'fc': 5, 'unitid': 1, 'address': 10 , 'quantity': 1 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "c33ab024.fd8f38"
            ]
        ]
    },
    {
        "id": "9c966449.aa6798",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "Write multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,2,3,4,5,6,7,8,9]",
        "payloadType": "json",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "c60dd8e2.d29288"
            ]
        ]
    },
    {
        "id": "2a2eb89a.eac0b",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "Write multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,0,1,0,1,0,1,1,1,1]",
        "payloadType": "json",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "1a6a17c2.18d91"
            ]
        ]
    },
    {
        "id": "74137990.5ced8",
        "type": "debug",
        "z": "7d09e02b.55be3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 280,
        "wires": []
    },
    {
        "id": "4f4487c.d2af0f8",
        "type": "debug",
        "z": "7d09e02b.55be3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 80,
        "wires": []
    },
    {
        "id": "c5a256e9.8a997",
        "type": "debug",
        "z": "7d09e02b.55be3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 120,
        "wires": []
    },
    {
        "id": "eb74a645.8cc998",
        "type": "comment",
        "z": "7d09e02b.55be3",
        "name": "Modbus Server",
        "info": "These nodes are to write to the Modbus Server.",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "3532c602.c961ba",
        "type": "modbus-write",
        "z": "7d09e02b.55be3",
        "name": "Write Reset FC5",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "64",
        "quantity": "1",
        "server": "352955bb.be6e6a",
        "emptyMsgOnFail": true,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "8fc3a875.c9f84"
            ],
            [
                "e3c3726.265e89"
            ]
        ]
    },
    {
        "id": "f9f646cd.d28fb8",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 131,
        "y": 390,
        "wires": [
            [
                "3532c602.c961ba"
            ]
        ]
    },
    {
        "id": "8fc3a875.c9f84",
        "type": "debug",
        "z": "7d09e02b.55be3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 380,
        "wires": []
    },
    {
        "id": "e3c3726.265e89",
        "type": "modbus-response",
        "z": "7d09e02b.55be3",
        "name": "",
        "registerShowMax": 20,
        "x": 990,
        "y": 420,
        "wires": []
    },
    {
        "id": "43c92684.cce2f",
        "type": "inject",
        "z": "7d09e02b.55be3",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 131,
        "y": 430,
        "wires": [
            [
                "3532c602.c961ba"
            ]
        ]
    },
    {
        "id": "a4b0567c.c9ca18",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "df7e5ef2.38f65",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 730,
        "y": 340,
        "wires": []
    },
    {
        "id": "fd17a154.42454",
        "type": "modbus-response",
        "z": "f819cc75.23b27",
        "name": "",
        "registerShowMax": "10",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "a62ceb23.ca5f",
        "type": "modbus-read",
        "z": "f819cc75.23b27",
        "name": "Automatic Read Flex FC3",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "10",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "2",
        "server": "a9050e37.a6f618",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "b5b49663.94d3e"
            ],
            [
                "ce347a0d.6f9618",
                "b2085c61.0f8218"
            ]
        ]
    },
    {
        "id": "ce347a0d.6f9618",
        "type": "modbus-response",
        "z": "f819cc75.23b27",
        "name": "",
        "registerShowMax": "20",
        "x": 490,
        "y": 160,
        "wires": []
    },
    {
        "id": "b5b49663.94d3e",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 470,
        "y": 80,
        "wires": []
    },
    {
        "id": "f16ef99a.d686b8",
        "type": "modbus-response",
        "z": "f819cc75.23b27",
        "name": "",
        "registerShowMax": "20",
        "x": 650,
        "y": 500,
        "wires": []
    },
    {
        "id": "6c19f11.23bfb1",
        "type": "inject",
        "z": "f819cc75.23b27",
        "name": "Get!",
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "1674f8e1.fdfe8f"
            ]
        ]
    },
    {
        "id": "4505efaa.4c38a",
        "type": "inject",
        "z": "f819cc75.23b27",
        "name": "Get every second",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "f4193204.e18"
            ]
        ]
    },
    {
        "id": "b8b9aa5f.a152f",
        "type": "modbus-response",
        "z": "f819cc75.23b27",
        "name": "",
        "registerShowMax": "5",
        "x": 1030,
        "y": 320,
        "wires": []
    },
    {
        "id": "3153c927.8496de",
        "type": "inject",
        "z": "f819cc75.23b27",
        "name": "Get flexible!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "677eb47b.294d54"
            ]
        ]
    },
    {
        "id": "677eb47b.294d54",
        "type": "function",
        "z": "f819cc75.23b27",
        "name": "Read 0-9 on Unit 1 FC3",
        "func": "msg.payload = { input: msg.payload, 'fc': 3, 'unitid': 1, 'address': 0 , 'quantity': 10 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "352074dc.bbbb44"
            ]
        ]
    },
    {
        "id": "a1aca335.01abe8",
        "type": "function",
        "z": "f819cc75.23b27",
        "name": "Read 10-18 on Unit 1 FC3",
        "func": "msg.payload = { input: msg.payload, 'fc': 3, 'unitid': 1, 'address': 10 , 'quantity': 8 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 280,
        "wires": [
            [
                "352074dc.bbbb44"
            ]
        ]
    },
    {
        "id": "7cc2fa48.db70cc",
        "type": "inject",
        "z": "f819cc75.23b27",
        "name": "Get flexible!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "a1aca335.01abe8"
            ]
        ]
    },
    {
        "id": "352074dc.bbbb44",
        "type": "modbus-flex-getter",
        "z": "f819cc75.23b27",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "a9050e37.a6f618",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 760,
        "y": 260,
        "wires": [
            [
                "88c7e9bb.184e28"
            ],
            [
                "b8b9aa5f.a152f",
                "d841a49e.2529c8"
            ]
        ]
    },
    {
        "id": "9c71ba37.9be1b",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 630,
        "y": 580,
        "wires": []
    },
    {
        "id": "f5aea6f3.3fb8b",
        "type": "modbus-response",
        "z": "f819cc75.23b27",
        "name": "",
        "registerShowMax": "20",
        "x": 650,
        "y": 620,
        "wires": []
    },
    {
        "id": "f42e134e.8b7c78",
        "type": "inject",
        "z": "f819cc75.23b27",
        "name": "Get!",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "202ae9e5.0aa426"
            ]
        ]
    },
    {
        "id": "7c02de95.ae17c",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 630,
        "y": 710,
        "wires": []
    },
    {
        "id": "e0c9d009.3c206",
        "type": "modbus-response",
        "z": "f819cc75.23b27",
        "name": "",
        "registerShowMax": "20",
        "x": 650,
        "y": 750,
        "wires": []
    },
    {
        "id": "da2c72f8.030828",
        "type": "inject",
        "z": "f819cc75.23b27",
        "name": "Get!",
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 740,
        "wires": [
            [
                "971115d3.09e608"
            ]
        ]
    },
    {
        "id": "f4193204.e18",
        "type": "modbus-getter",
        "z": "f819cc75.23b27",
        "name": "Half-Automatic Getter FC4",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "10",
        "server": "a9050e37.a6f618",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 480,
        "y": 360,
        "wires": [
            [
                "df7e5ef2.38f65"
            ],
            [
                "fd17a154.42454"
            ]
        ]
    },
    {
        "id": "1674f8e1.fdfe8f",
        "type": "modbus-getter",
        "z": "f819cc75.23b27",
        "name": "Manual Getter FC3",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "10",
        "server": "a9050e37.a6f618",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 350,
        "y": 480,
        "wires": [
            [
                "a4b0567c.c9ca18"
            ],
            [
                "f16ef99a.d686b8"
            ]
        ]
    },
    {
        "id": "202ae9e5.0aa426",
        "type": "modbus-getter",
        "z": "f819cc75.23b27",
        "name": "Manual Getter FC1",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "10",
        "quantity": "1",
        "server": "a9050e37.a6f618",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "9c71ba37.9be1b"
            ],
            [
                "f5aea6f3.3fb8b"
            ]
        ]
    },
    {
        "id": "971115d3.09e608",
        "type": "modbus-getter",
        "z": "f819cc75.23b27",
        "name": "Manual Getter FC2",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Input",
        "adr": "0",
        "quantity": "10",
        "server": "a9050e37.a6f618",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 350,
        "y": 740,
        "wires": [
            [
                "7c02de95.ae17c"
            ],
            [
                "e0c9d009.3c206"
            ]
        ]
    },
    {
        "id": "88c7e9bb.184e28",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1010,
        "y": 240,
        "wires": []
    },
    {
        "id": "d841a49e.2529c8",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "b2085c61.0f8218",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 450,
        "y": 120,
        "wires": []
    },
    {
        "id": "262f08f6.a82fb8",
        "type": "comment",
        "z": "f819cc75.23b27",
        "name": "Modbus Flex Server",
        "info": "These nodes are to write to the Modbus Flex Server.",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "7c7d3fc.7ad87c",
        "type": "catch",
        "z": "f819cc75.23b27",
        "name": "",
        "scope": null,
        "x": 780,
        "y": 100,
        "wires": [
            [
                "5e2abeb6.a4fe7",
                "8391d6ea.0f47f8"
            ]
        ]
    },
    {
        "id": "5e2abeb6.a4fe7",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 990,
        "y": 60,
        "wires": []
    },
    {
        "id": "5691f88a.317158",
        "type": "modbus-queue-info",
        "z": "f819cc75.23b27",
        "name": "Flex Server Client Queue",
        "topic": "",
        "unitid": "1",
        "queueReadIntervalTime": "1000",
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "a9050e37.a6f618",
        "errorOnHighLevel": false,
        "showStatusActivities": false,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 1490,
        "y": 120,
        "wires": [
            [
                "60d284e5.b74a04"
            ]
        ]
    },
    {
        "id": "53ad109f.dbb948",
        "type": "function",
        "z": "f819cc75.23b27",
        "name": "reset on High",
        "func": "if(\"high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 100,
        "wires": [
            [
                "5691f88a.317158"
            ]
        ]
    },
    {
        "id": "62c07aee.525b04",
        "type": "function",
        "z": "f819cc75.23b27",
        "name": "reset on HighHigh",
        "func": "if(\"high high level reached\" === msg.state) {\n    msg.resetQueue = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "5691f88a.317158"
            ]
        ]
    },
    {
        "id": "60d284e5.b74a04",
        "type": "debug",
        "z": "f819cc75.23b27",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1670,
        "y": 120,
        "wires": []
    },
    {
        "id": "8391d6ea.0f47f8",
        "type": "switch",
        "z": "f819cc75.23b27",
        "name": "Modbus Flex Server",
        "property": "modbusClientName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modbus Flex Server",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "62c07aee.525b04",
                "53ad109f.dbb948"
            ]
        ]
    },
    {
        "id": "2c0aa5f.9ef9d5a",
        "type": "modbus-flex-write",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "a9050e37.a6f618",
        "emptyMsgOnFail": true,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "450c068a.c5bd88"
            ],
            [
                "265b6a2c.a2c256",
                "bc150c1e.72946"
            ]
        ]
    },
    {
        "id": "79cfb326.6f93a4",
        "type": "modbus-flex-write",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "server": "a9050e37.a6f618",
        "emptyMsgOnFail": true,
        "x": 770,
        "y": 140,
        "wires": [
            [
                "254f54b4.237a9c"
            ],
            [
                "65130716.4ebcc",
                "7887793e.221e5"
            ]
        ]
    },
    {
        "id": "65130716.4ebcc",
        "type": "modbus-response",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "registerShowMax": 20,
        "x": 1030,
        "y": 160,
        "wires": []
    },
    {
        "id": "8f31cedb.2ef6e",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "Write multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,2,3,4,5,6,7,8,9,10]",
        "payloadType": "json",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "7e52fe0a.b0d808"
            ]
        ]
    },
    {
        "id": "7e52fe0a.b0d808",
        "type": "function",
        "z": "3f96c5b3.72cd02",
        "name": "Write 0-9 on Unit 1 FC15",
        "func": "msg.payload = { value: msg.payload, 'fc': 15, 'unitid': 1, 'address': 0 , 'quantity': 10 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "79cfb326.6f93a4"
            ]
        ]
    },
    {
        "id": "84718058.fd93d",
        "type": "function",
        "z": "3f96c5b3.72cd02",
        "name": "Write 10-18 on Unit 1 FC15",
        "func": "msg.payload = { value: msg.payload, 'fc': 15, 'unitid': 1, 'address': 10 , 'quantity': 9 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 140,
        "wires": [
            [
                "79cfb326.6f93a4"
            ]
        ]
    },
    {
        "id": "f8a40860.a906e",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "Write wrong multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,2,3,4,5,6,7,8,9,10]",
        "payloadType": "json",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "84718058.fd93d"
            ]
        ]
    },
    {
        "id": "265b6a2c.a2c256",
        "type": "modbus-response",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "registerShowMax": 20,
        "x": 1030,
        "y": 320,
        "wires": []
    },
    {
        "id": "7ed5896e.c51ff",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "Write wrong multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,0,1,0,1,0,1,1]",
        "payloadType": "json",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "3eefe4d0.f45544"
            ]
        ]
    },
    {
        "id": "3eefe4d0.f45544",
        "type": "function",
        "z": "3f96c5b3.72cd02",
        "name": "Write 0-9 on Unit 1 FC16",
        "func": "msg.payload = { value: msg.payload, 'fc': 16, 'unitid': 1, 'address': 0 , 'quantity': 10 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 280,
        "wires": [
            [
                "2c0aa5f.9ef9d5a"
            ]
        ]
    },
    {
        "id": "88c32a01.71c17",
        "type": "function",
        "z": "3f96c5b3.72cd02",
        "name": "Write 10 on Unit 1 FC6",
        "func": "msg.payload = { value: msg.payload, 'fc': 6, 'unitid': 1, 'address': 10 , 'quantity': 1 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 320,
        "wires": [
            [
                "2c0aa5f.9ef9d5a"
            ]
        ]
    },
    {
        "id": "cf2c6eae.078bd8",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "Write single!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "2345",
        "payloadType": "num",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "88c32a01.71c17"
            ]
        ]
    },
    {
        "id": "450c068a.c5bd88",
        "type": "debug",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 990,
        "y": 240,
        "wires": []
    },
    {
        "id": "ceff98ed.ceb478",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "Write single!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "bf1652af.654dc"
            ]
        ]
    },
    {
        "id": "bf1652af.654dc",
        "type": "function",
        "z": "3f96c5b3.72cd02",
        "name": "Write 10 on Unit 1 FC5",
        "func": "msg.payload = { value: msg.payload, 'fc': 5, 'unitid': 1, 'address': 10 , 'quantity': 1 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 180,
        "wires": [
            [
                "79cfb326.6f93a4"
            ]
        ]
    },
    {
        "id": "759e3ebb.1b4b68",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "Write multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,2,3,4,5,6,7,8,9]",
        "payloadType": "json",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "84718058.fd93d"
            ]
        ]
    },
    {
        "id": "6d9a0452.a42ffc",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "Write multiple!",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "[1,0,1,0,1,0,1,1,1,1]",
        "payloadType": "json",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "3eefe4d0.f45544"
            ]
        ]
    },
    {
        "id": "bc150c1e.72946",
        "type": "debug",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "254f54b4.237a9c",
        "type": "debug",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 990,
        "y": 80,
        "wires": []
    },
    {
        "id": "7887793e.221e5",
        "type": "debug",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 990,
        "y": 120,
        "wires": []
    },
    {
        "id": "e78016f7.901f18",
        "type": "comment",
        "z": "3f96c5b3.72cd02",
        "name": "Modbus Flex Server",
        "info": "These nodes are to write to the Modbus Flex Server.",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "1057e396.82fb74",
        "type": "modbus-write",
        "z": "3f96c5b3.72cd02",
        "name": "Write Reset FC5",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "64",
        "quantity": "1",
        "server": "a9050e37.a6f618",
        "emptyMsgOnFail": true,
        "x": 760,
        "y": 420,
        "wires": [
            [
                "8a33cbd3.d5bdf"
            ],
            [
                "57244dc.1164d34"
            ]
        ]
    },
    {
        "id": "ae0523d0.f086",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 171,
        "y": 390,
        "wires": [
            [
                "1057e396.82fb74"
            ]
        ]
    },
    {
        "id": "8a33cbd3.d5bdf",
        "type": "debug",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 990,
        "y": 400,
        "wires": []
    },
    {
        "id": "57244dc.1164d34",
        "type": "modbus-response",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "registerShowMax": 20,
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "a4158073.da8558",
        "type": "inject",
        "z": "3f96c5b3.72cd02",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 171,
        "y": 430,
        "wires": [
            [
                "1057e396.82fb74"
            ]
        ]
    },
    {
        "id": "b5762218.8300d8",
        "type": "modbus-flex-sequencer",
        "z": "f0cfd0c1.8a4f48",
        "name": "",
        "sequences": [
            {
                "name": "",
                "unitid": "1",
                "fc": "FC1",
                "address": "1",
                "quantity": "2"
            },
            {
                "name": "",
                "unitid": "1",
                "fc": "FC1",
                "address": "10",
                "quantity": "2"
            }
        ],
        "server": "352955bb.be6e6a",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "x": 400,
        "y": 120,
        "wires": [
            [
                "14045550.27c8fb"
            ],
            [
                "fee04ce7.992778",
                "c0bdb056.aad1f"
            ]
        ]
    },
    {
        "id": "442061b.228722",
        "type": "inject",
        "z": "f0cfd0c1.8a4f48",
        "name": "Read Sequence",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "b5762218.8300d8"
            ]
        ]
    },
    {
        "id": "c0bdb056.aad1f",
        "type": "modbus-response",
        "z": "f0cfd0c1.8a4f48",
        "name": "",
        "registerShowMax": 20,
        "x": 690,
        "y": 160,
        "wires": []
    },
    {
        "id": "14045550.27c8fb",
        "type": "debug",
        "z": "f0cfd0c1.8a4f48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 650,
        "y": 80,
        "wires": []
    },
    {
        "id": "fee04ce7.992778",
        "type": "debug",
        "z": "f0cfd0c1.8a4f48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 650,
        "y": 120,
        "wires": []
    }
]